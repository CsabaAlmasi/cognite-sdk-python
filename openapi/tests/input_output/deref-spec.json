{
  "openapi": "3.0.1",
  "info": {
    "title": "Cognite API",
    "description": "# Introduction\nThis is the reference documentation for the Cognite API with \nan overview of all the available methods.\n\n# Pagination\nMost resource types can be paginated, indicated by the field `nextCursor` in the response.\nBy passing the value of `nextCursor` as the cursor you will get the next page of `limit` results.\nNote that all parameters except `cursor` has to stay the same.\n\n# Parallel retrieval\nIf you want to download a lot of resources (let's say events), paginating through millions of records can be slow.\nWe support parallel retrieval through the `partition` parameter, which has the format `m/n` where `n` is the amount of partitions you would like to split the entire data set into.\nIf you want to download the entire data set by splitting it into 10 partitions, you would do the following in parallel with `m` running from 1 to 10:\n  - Make a request to `/events` with `partition=m/10`.\n  - Paginate through the response by following the cursor as explained above. Note that the `partition` parameter needs to be passed to all subqueries.\n",
    "version": "v1",
    "contact": {
      "name": "Cognite Support",
      "url": "https://support.cognite.com",
      "email": "support@cognite.com"
    }
  },
  "servers": [
    {
      "url": "https://api.cognitedata.com"
    }
  ],
  "paths": {
    "/api/v1/projects/{project}/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "List assets",
        "description": "List all assets, or only the assets matching the specified query.",
        "operationId": "getAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "The name of the asset.",
              "minLength": 1,
              "maxLength": 140
            }
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "List only assets that have one of the parentIds as a parent. The parentId for root assets is null.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "minItems": 1,
              "maxItems": 100,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "rootIds",
            "description": "List only assets that have one of the rootIds as a root asset. A root asset is its own root asset.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of the asset, for example which database it's from."
            }
          },
          {
            "in": "query",
            "name": "root",
            "schema": {
              "type": "boolean",
              "default": false,
              "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "Filter by this (case-sensitive) prefix for the external ID.",
              "type": "string",
              "maxLength": 255,
              "example": "my.known.prefix"
            }
          },
          {
            "in": "query",
            "name": "partition",
            "required": false,
            "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
            "schema": {
              "type": "string",
              "example": "1/10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "The cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next or previous page of results."
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.list({ filter: { name: '21PT1019' } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "asset_list = client.assets.list(limit=5)\nfor asset in client.assets:\n    asset # do something with the asset\nfor asset_list in client.assets(chunk_size=2500):\n    asset_list # do something with the assets\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create assets",
        "description": "You can create a maximum of 1000 assets per request.",
        "operationId": "createAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of the assets to create. You can create a maximum of 1000 assets per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the asset.",
                              "minLength": 1,
                              "maxLength": 140
                            },
                            "parentId": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "description": {
                              "type": "string",
                              "description": "The description of the asset.",
                              "maxLength": 500
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "source": {
                              "type": "string",
                              "maxLength": 128,
                              "description": "The source of the asset."
                            }
                          },
                          "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                        },
                        {
                          "type": "object",
                          "properties": {
                            "parentExternalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = [\n  { name: 'First asset' },\n  { name: 'Second asset', description: 'Another asset', externalId: 'anotherAsset' },\n  { name: 'Child asset', parentExternalId: 'anotherAsset'},\n];\nconst createdAssets = await client.assets.create(assets);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import Asset\nassets = [Asset(name=\"asset1\"), Asset(name=\"asset2\")]\nres = client.assets.create(assets)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieve an asset by its ID",
        "description": "Retrieve an asset by its ID. If you want to retrieve assets by externalIds, use Retrieve assets instead.",
        "operationId": "getAsset",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response with a single asset.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the asset.",
                          "minLength": 1,
                          "maxLength": 140
                        },
                        "parentId": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "description": {
                          "type": "string",
                          "description": "The description of the asset.",
                          "maxLength": 500
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "source": {
                          "type": "string",
                          "maxLength": 128,
                          "description": "The source of the asset."
                        }
                      },
                      "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "rootId",
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "rootId": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "aggregates": {
                          "description": "Aggregated metrics of the asset",
                          "type": "object",
                          "properties": {
                            "childCount": {
                              "type": "integer",
                              "description": "Number of direct descendants for the asset",
                              "format": "int32",
                              "minimum": 0
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.assets.retrieve(id=1)\nres = client.assets.retrieve(external_id=\"1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/list": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Filter assets",
        "description": "Use advanced filtering options to find assets.",
        "operationId": "listAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "description": "Filter on assets with strict matching.",
                        "title": "Filter",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the asset.",
                            "minLength": 1,
                            "maxLength": 140
                          },
                          "parentIds": {
                            "description": "Return only the direct descendants of the specified assets.",
                            "type": "array",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "rootIds": {
                            "description": "Return all descendants of the specified root assets.",
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "externalId"
                                  ],
                                  "properties": {
                                    "externalId": {
                                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "my.known.id"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "maxLength": 128,
                            "description": "The source of the asset."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "root": {
                            "type": "boolean",
                            "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          }
                        }
                      },
                      "limit": {
                        "description": "Limits the number of results to return.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string",
                        "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "aggregatedProperties": {
                        "description": "Set of aggregated properties to include",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "childCount"
                          ]
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "partition": {
                        "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                        "type": "string",
                        "example": "1/10"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "The cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next or previous page of results."
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.list({ filter: { name: '21PT1019' } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "asset_list = client.assets.list(limit=5)\nfor asset in client.assets:\n    asset # do something with the asset\nfor asset_list in client.assets(chunk_size=2500):\n    asset_list # do something with the assets\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/byids": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieve assets",
        "operationId": "byIdsAssets",
        "description": "Retrieve assets by IDs or external IDs.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "All provided IDs and external IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "items"
                    ],
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        },
                        "maxItems": 1000,
                        "minItems": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "ignoreUnknownIds": {
                        "description": "Ignore IDs and external IDs that are not found",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.assets.retrieve_multiple(ids=[1, 2, 3])\nres = client.assets.retrieve_multiple(external_ids=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/update": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Update assets",
        "description": "Update the attributes of assets.",
        "operationId": "updateAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "All provided IDs and external IDs must be unique. Fields that are not included in the request, are not changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes applied to asset",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "name": {
                                      "title": "set",
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Set a new value for the string.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "parentId": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "description": "A server-generated ID for the object.",
                                          "type": "integer",
                                          "minimum": 1,
                                          "maximum": 9007199254740991,
                                          "format": "int64"
                                        }
                                      },
                                      "description": "Change the ID of the object.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "parentExternalId": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "my.known.id"
                                        }
                                      },
                                      "description": "Change the external ID of the object.",
                                      "required": [
                                        "set"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes applied to asset",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "name": {
                                      "title": "set",
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Set a new value for the string.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "parentId": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "description": "A server-generated ID for the object.",
                                          "type": "integer",
                                          "minimum": 1,
                                          "maximum": 9007199254740991,
                                          "format": "int64"
                                        }
                                      },
                                      "description": "Change the ID of the object.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "parentExternalId": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                                          "type": "string",
                                          "maxLength": 255,
                                          "example": "my.known.id"
                                        }
                                      },
                                      "description": "Change the external ID of the object.",
                                      "required": [
                                        "set"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.update([{id: 123, update: {name: {set: 'New name'}}}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "asset = client.assets.retrieve(id=1)\nasset.description = \"New description\"\nres = client.assets.update(asset)\nfrom cognite.client.data_classes import AssetUpdate\nmy_update = AssetUpdate(id=1).description.set(\"New description\").metadata.add({\"key\": \"value\"})\nres = client.assets.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/search": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Search assets",
        "description": "Fulltext search for assets based on result relevance. Primarily meant\nfor human-centric use-cases, not for programs, since matching and\nordering may change over time. Additional filters can also be\nspecified. This operation does not support pagination.",
        "operationId": "searchAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Search query",
          "content": {
            "application/json": {
              "schema": {
                "description": "Search request with filter capabilities.",
                "example": {
                  "filter": {
                    "parentIds": [
                      1293812938,
                      293823982938
                    ]
                  },
                  "search": {
                    "name": "flow",
                    "description": "upstream"
                  }
                },
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "description": "Filter on assets with strict matching.",
                        "title": "Filter",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the asset.",
                            "minLength": 1,
                            "maxLength": 140
                          },
                          "parentIds": {
                            "description": "Return only the direct descendants of the specified assets.",
                            "type": "array",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "rootIds": {
                            "description": "Return all descendants of the specified root assets.",
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "externalId"
                                  ],
                                  "properties": {
                                    "externalId": {
                                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "my.known.id"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "maxLength": 128,
                            "description": "The source of the asset."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "root": {
                            "type": "boolean",
                            "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          }
                        }
                      },
                      "limit": {
                        "description": "Limits the number of results to return.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "title": "Search",
                        "description": "Fulltext search for assets.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the asset.",
                            "minLength": 1,
                            "maxLength": 140
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the asset.",
                            "maxLength": 500
                          },
                          "query": {
                            "type": "string",
                            "description": "Whitespace-separated terms to search for in assets. Does a best-effort fuzzy search in relevant fields (currently name and description) for variations of any of the search terms, and orders results by relevance. Uses a different search algorithm than the name and description parameters, and will generally give much better results. Matching and ordering is not guaranteed to be stable over time, and the fields being searched may be extended.",
                            "minLength": 1,
                            "maxLength": 140
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the asset.",
                                "minLength": 1,
                                "maxLength": 140
                              },
                              "parentId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of the asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "maxLength": 128,
                                "description": "The source of the asset."
                              }
                            },
                            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "rootId",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "rootId": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "aggregates": {
                                "description": "Aggregated metrics of the asset",
                                "type": "object",
                                "properties": {
                                  "childCount": {
                                    "type": "integer",
                                    "description": "Number of direct descendants for the asset",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assets = await client.assets.search({\n  filter: {\n    parentIds: [1, 2]\n  },\n  search: {\n    name: '21PT1019'\n  }\n});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.assets.search(name=\"some name\")\nres = client.assets.search(filter={\"name\": \"some name\"})\nres = client.assets.search(name=\"xyz\",filter={\"parent_ids\": [123,456],\"source\": \"some source\"})\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/assets/delete": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete assets",
        "description": "Delete assets. To delete all descendants, set recursive to true. The limit of the request does not include the number of descendants that are deleted.",
        "operationId": "deleteAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "items"
                    ],
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        },
                        "maxItems": 1000,
                        "minItems": 1
                      },
                      "recursive": {
                        "description": "Recursively delete all asset subtrees under the specified IDs.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "ignoreUnknownIds": {
                        "description": "Ignore IDs and external IDs that are not found",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "assetsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.assets.delete([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.assets.delete(id=[1,2,3], external_id=\"3\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create events",
        "description": "Creates multiple event objects in the same project. It is possible to post a maximum of 1000 events per request.",
        "operationId": "createEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of events to be posted. It is possible to post a maximum of 1000 events per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "startTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 0,
                          "maxItems": 10000,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = [\n  { description: 'Workorder pump abc', startTime: new Date('22 jan 2019') },\n  { description: 'Broken rule', externalId: 'rule123', startTime: 1557346524667000 },\n];\nconst createdEvents = await client.events.create(events);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import Event\nevents = [Event(start_time=0, end_time=1), Event(start_time=2, end_time=3)]\nres = client.events.create(events)\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Filter events",
        "description": "List events optionally filtered on query parameters",
        "operationId": "listEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "in": "query",
            "name": "minStartTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxStartTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minEndTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxEndTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetIds",
            "description": "Asset IDs of related equipment that this event relates to. Format is list of IDs serialized as JSON array(int64). Takes [ 1 .. 100 ] of unique items.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "rootAssetIds",
            "description": "The IDs of the root assets that the assets should be children of.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of this event."
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "maxLength": 64,
              "type": "string",
              "description": "The event type"
            }
          },
          {
            "in": "query",
            "name": "subtype",
            "schema": {
              "maxLength": 64,
              "type": "string",
              "description": "The event subtype"
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "Filter by this (case-sensitive) prefix for the external ID.",
              "type": "string",
              "maxLength": 255,
              "example": "my.known.prefix"
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "partition",
            "required": false,
            "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
            "schema": {
              "type": "string",
              "example": "1/10"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort by array of selected fields. Syntax: `[\"<fieldname>:asc|desc\"]`. Default sort order is `asc` with short syntax: `[\"<fieldname>\"]`. \nFilter accepts the following field names: startTime, endTime, createdTime, lastUpdatedTime. \nPartitions are done independently of sorting, there is no guarantee on sort order between elements from different partitions.\n",
            "example": [
              "endTime:desc"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.list({ filter: { startTime: { min: new Date('1 jan 2018') }, endTime: { max: new Date('1 jan 2019') } } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "file_list = client.events.list(limit=5, start_time={\"max\": 1500000000})\nfor event in client.events:\n    event # do something with the event\nfor event_list in client.events(chunk_size=2500):\n    event_list # do something with the files\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Receive event by ID",
        "operationId": "getEventByInternalId",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "startTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.events.retrieve(id=1)\nres = client.events.retrieve(external_id=\"1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/list": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Filter all events",
        "description": "Retrieve a list of all events in the same project. This operation supports pagination by cursor. Criteria can be applied to select a subset of events.",
        "operationId": "advancedListEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter request for events. Filters exact field matching or timestamp ranges inclusive min and max.",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "description": "Filter on events filter with exact match",
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "endTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 5000,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipment that this event relates to.",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "rootAssetIds": {
                            "type": "array",
                            "uniqueItems": true,
                            "description": "The IDs of the root assets that the related assets should be children of.",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "externalId"
                                  ],
                                  "properties": {
                                    "externalId": {
                                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "my.known.id"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "type": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The event type"
                          },
                          "subtype": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The event subtype"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      },
                      "sort": {
                        "description": "Sort by array of selected fields. Syntax: `[\"<fieldname>:asc|desc\"]`. Default sort order is `asc` with short syntax: `[\"<fieldname>\"]`. \nFilter accepts the following field names: startTime, endTime, createdTime, lastUpdatedTime. \nPartitions are done independently of sorting, there is no guarantee on sort order between elements from different partitions.\n",
                        "example": [
                          "endTime:desc"
                        ],
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string",
                        "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "partition": {
                        "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                        "type": "string",
                        "example": "1/10"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.list({ filter: { startTime: { min: new Date('1 jan 2018') }, endTime: { max: new Date('1 jan 2019') } } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "file_list = client.events.list(limit=5, start_time={\"max\": 1500000000})\nfor event in client.events:\n    event # do something with the event\nfor event_list in client.events(chunk_size=2500):\n    event_list # do something with the files\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/byids": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "description": "Retrieves information about events in the same project. Events are returned in the same order as the ids listed in the query.\n\nA maximum of 1000 event IDs may be listed per request and all of them must be unique.",
        "operationId": "byIdsEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of events to retrieve. Must be up to a maximum of 1000 IDs, and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "items"
                    ],
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        },
                        "maxItems": 1000,
                        "minItems": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "ignoreUnknownIds": {
                        "description": "Ignore IDs and external IDs that are not found",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.events.retrieve_multiple(ids=[1, 2, 3])\nres = client.events.retrieve_multiple(external_ids=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/update": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Update events",
        "description": "Updates events in the same project. This operation supports partial updates; Fields omitted from queries will remain unchanged on objects.\n\nFor primitive fields (String, Long, Int), use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. assetIds), use 'set': [value1, value2] to update value; use 'add': [v1, v2] to add values to current list of values; use 'remove': [v1, v2] to remove these values from current list of values if exists.\n\nA maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
        "operationId": "updateEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes. A maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "startTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "type": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "subtype": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "startTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "type": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "subtype": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.update([{id: 123, update: {description: {set: 'New description'}}}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "event = client.events.retrieve(id=1)\nevent.description = \"New description\"\nres = client.events.update(event)\nfrom cognite.client.data_classes import EventUpdate\nmy_update = EventUpdate(id=1).description.set(\"New description\").metadata.add({\"key\": \"value\"})\nres = client.events.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/search": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Search within events",
        "operationId": "searchEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on events filter with exact match",
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filter on events filter with exact match",
                    "type": "object",
                    "properties": {
                      "startTime": {
                        "description": "Range between two timestamps.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "endTime": {
                        "description": "Range between two timestamps.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "assetIds": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 5000,
                        "uniqueItems": true,
                        "description": "Asset IDs of related equipment that this event relates to.",
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      },
                      "rootAssetIds": {
                        "type": "array",
                        "uniqueItems": true,
                        "description": "The IDs of the root assets that the related assets should be children of.",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "source": {
                        "maxLength": 128,
                        "type": "string",
                        "description": "The source of this event."
                      },
                      "type": {
                        "maxLength": 64,
                        "type": "string",
                        "description": "The event type"
                      },
                      "subtype": {
                        "maxLength": 64,
                        "type": "string",
                        "description": "The event subtype"
                      },
                      "createdTime": {
                        "description": "Range between two timestamps.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Range between two timestamps.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "externalIdPrefix": {
                        "description": "Filter by this (case-sensitive) prefix for the external ID.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.prefix"
                      }
                    }
                  },
                  "search": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "description": "text to search in description field across events"
                      }
                    }
                  },
                  "limit": {
                    "description": "<- Limits the maximum number of results to be returned by single request. Request may contain less results than request limit.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  },
                                  "startTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "createdTime",
                                  "lastUpdatedTime"
                                ],
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const events = await client.events.search({\n  filter: {\n    assetIds: [1, 2]\n  },\n  search: {\n    description: 'Pump'\n  }\n});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.events.search(description=\"some description\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/events/delete": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Delete multiple events",
        "description": "Deletes events with the given ids. A maximum of 1000 events can be deleted per request.",
        "operationId": "deleteEvents",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "items"
                    ],
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        },
                        "maxItems": 1000,
                        "minItems": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "ignoreUnknownIds": {
                        "description": "Ignore IDs and external IDs that are not found",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "eventsAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.events.delete([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.events.delete(id=[1,2,3], external_id=\"3\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload file",
        "description": "Create metadata information and get upload link for one file.\n\nThe uploadUrl link which is returned in the response is a Google Cloud Storage (GCS) resumable upload URL. \nIt should be used in a separate request to upload the file, as documented in \nhttps://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload. \n\nThe uploadUrl expires after one week. \nAny file info entry that do not have the actual file uploaded within one week will be automatically deleted.\n\nThe 'Origin' header parameter is forwarded as a 'Origin' header to the GCS initiate upload session request.\nAlso, the 'mimeType' query parameter is forwarded as a 'X-Upload-Content-Type' header.",
        "operationId": "initFileUpload",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "in": "header",
            "name": "Origin",
            "description": "The 'Origin' header parameter is required in a resumable upload request if there is a Cross Origin issue.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "overwrite",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If 'overwrite' is set to true, and the POST body content specifies a 'externalId' field, fields for the file found for externalId can be overwritten. The default setting is false. \n\nIf metadata is included in the request body, all of the original metadata will be overwritten.\nThe actual file will be overwritten after a successful upload with the uploadUrl from the response. \nIf there is no successful upload, the current file contents will be kept. \n\nFile-Asset mappings only change if explicitly stated in the assetIds field of the POST json body. \nDo not set assetIds in request body if you want to keep the current file-asset mappings."
          }
        ],
        "requestBody": {
          "description": "Fields to be set for the file.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "externalId": {
                        "description": "The external ID provided by the client. Must be unique for the resource type.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.id"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the file.",
                        "maxLength": 256
                      },
                      "source": {
                        "maxLength": 128,
                        "type": "string",
                        "description": "The source of the file."
                      },
                      "mimeType": {
                        "maxLength": 256,
                        "type": "string",
                        "example": "image/jpeg",
                        "description": "File type. E.g. text/plain, application/pdf, .."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "assetIds": {
                        "type": "array",
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "maxItems": 100,
                        "minItems": 1
                      },
                      "sourceCreatedTime": {
                        "description": "The timestamp for when the file was originally created in the source system.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "sourceModifiedTime": {
                        "description": "The timestamp for when the file was last modified in the source system.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response for a successful files operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the file.",
                              "maxLength": 256
                            },
                            "source": {
                              "maxLength": 128,
                              "type": "string",
                              "description": "The source of the file."
                            },
                            "mimeType": {
                              "maxLength": 256,
                              "type": "string",
                              "example": "image/jpeg",
                              "description": "File type. E.g. text/plain, application/pdf, .."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "assetIds": {
                              "type": "array",
                              "items": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "maxItems": 100,
                              "minItems": 1
                            },
                            "sourceCreatedTime": {
                              "description": "The timestamp for when the file was originally created in the source system.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "sourceModifiedTime": {
                              "description": "The timestamp for when the file was last modified in the source system.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "id",
                            "uploaded",
                            "createdTime",
                            "lastUpdatedTime"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "uploaded": {
                              "type": "boolean",
                              "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                              "example": true
                            },
                            "uploadedTime": {
                              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "createdTime": {
                              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "lastUpdatedTime": {
                              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": [
                        "uploadUrl"
                      ],
                      "properties": {
                        "uploadUrl": {
                          "description": "The URL where the file contents should be uploaded.",
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const fileContent = 'file data here'; // can also be of type ArrayBuffer, Buffer, Blob, File or any\n// automatic upload:\nconst file = await client.files.upload({name: 'examplefile.jpg', mimeType: 'image/jpg'}, fileContent);\n\n// manual with uploadUrl:\nconst file2 = await client.files.upload({name: 'examplefile.jpg', mimeType: 'image/jpg'});\n// then upload using the file.uploadUrl"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.files.upload(\"/path/to/file\", name=\"my_file\")\nres = client.files.upload(\"/path/to/file\")\nres = client.files.upload(\"/path/to/my/directory\")\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List files",
        "description": "The GET /files operation can be used to return information for all files in a project. \n\nOptionally you can add one or more of the following query parameters. \nThe filter query parameters will filter the results to only include files that match all filter parameters.",
        "operationId": "listFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Name of the file.",
              "maxLength": 256
            }
          },
          {
            "in": "query",
            "name": "mimeType",
            "schema": {
              "maxLength": 256,
              "type": "string",
              "example": "image/jpeg",
              "description": "File type. E.g. text/plain, application/pdf, .."
            }
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of the file."
            }
          },
          {
            "in": "query",
            "name": "assetIds",
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 100,
              "uniqueItems": true,
              "description": "Only include files that reference these specific asset IDs.",
              "example": "[363848954441724, 793045462540095, 1261042166839739]",
              "items": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "in": "query",
            "name": "rootAssetIds",
            "description": "The internal IDs of the root assets that the related assets should be a descendant of (or match).",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minUploadedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxUploadedTime",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minSourceCreatedTime",
            "description": "Include files that have sourceCreatedTime set and with minimum this value.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxSourceCreatedTime",
            "description": "Include files that have sourceCreatedTime set and with maximum this value.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minSourceModifiedTime",
            "description": "Include files that have sourceModifiedTime set and with minimum this value.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxSourceModifiedTime",
            "description": "Include files that have sourceModifiedTime set and with maximum this value.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "Filter by this (case-sensitive) prefix for the external ID.",
              "type": "string",
              "maxLength": 255,
              "example": "my.known.prefix"
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "uploaded",
            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response for a successful files/list operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 256
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 256,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "sourceCreatedTime": {
                                "description": "The timestamp for when the file was originally created in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "sourceModifiedTime": {
                                "description": "The timestamp for when the file was last modified in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.list({filter: {mimeType: 'image/png'}});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "file_list = client.files.list(limit=5, external_id_prefix=\"prefix\")\nfor file_metadata in client.files:\n    file_metadata # do something with the file metadata\nfor file_list in client.files(chunk_size=2500):\n    file_list # do something with the files\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/{id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file by id",
        "description": "Returns file info for the file ID",
        "operationId": "getFileByInternalId",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response for a successful GET files/id operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the file.",
                          "maxLength": 256
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of the file."
                        },
                        "mimeType": {
                          "maxLength": 256,
                          "type": "string",
                          "example": "image/jpeg",
                          "description": "File type. E.g. text/plain, application/pdf, .."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "maxItems": 100,
                          "minItems": 1
                        },
                        "sourceCreatedTime": {
                          "description": "The timestamp for when the file was originally created in the source system.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "sourceModifiedTime": {
                          "description": "The timestamp for when the file was last modified in the source system.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "uploaded",
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "uploaded": {
                          "type": "boolean",
                          "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                          "example": true
                        },
                        "uploadedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.files.retrieve(id=1)\nres = client.files.retrieve(external_id=\"1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/list": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Filter files",
        "description": "Retrieves a list of all files in a project. Criteria can be supplied to select a subset of files. This operation supports pagination with cursors.",
        "operationId": "advancedListFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The project name",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 256
                          },
                          "mimeType": {
                            "maxLength": 256,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Only include files that reference these specific asset IDs.",
                            "example": "[363848954441724, 793045462540095, 1261042166839739]",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "rootAssetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Internal or external IDs of the root assets that the related assets should be a descendant of (or match).",
                            "example": [
                              {
                                "id": 123456789
                              },
                              {
                                "externalId": "system 99 external Id 1234"
                              }
                            ],
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "externalId"
                                  ],
                                  "properties": {
                                    "externalId": {
                                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "my.known.id"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "uploadedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "sourceCreatedTime": {
                            "description": "Filter for files where the sourceCreatedTime field has been set and is within the specified range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "sourceModifiedTime": {
                            "description": "Filter for files where the sourceModifiedTime field has been set and is within the specified range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          },
                          "uploaded": {
                            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Maximum number of items that the client want to get back.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string",
                        "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/list operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 256
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 256,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "sourceCreatedTime": {
                                "description": "The timestamp for when the file was originally created in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "sourceModifiedTime": {
                                "description": "The timestamp for when the file was last modified in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.list({filter: {mimeType: 'image/png'}});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "file_list = client.files.list(limit=5, external_id_prefix=\"prefix\")\nfor file_metadata in client.files:\n    file_metadata # do something with the file metadata\nfor file_list in client.files(chunk_size=2500):\n    file_list # do something with the files\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/byids": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve files",
        "description": "Retrieves metadata information about multiple specific files in the same project. \nResults are returned in the same order as in the request. This operation does not return the file contents.",
        "operationId": "byIdsFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to retrieve. Must be up to a maximum of 1000 IDs, and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 256
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 256,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "sourceCreatedTime": {
                                "description": "The timestamp for when the file was originally created in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "sourceModifiedTime": {
                                "description": "The timestamp for when the file was last modified in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.files.retrieve_multiple(ids=[1, 2, 3])\nres = client.files.retrieve_multiple(external_ids=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/search": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Search files",
        "description": "Search for files based on relevance. You can also supply a strict match filter as in Filter files, and search in the results from the filter. Returns first 1000 results based on relevance. This operation supports limited pagination with the offset parameter, but does not support retrieving all files in a project.",
        "operationId": "searchFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on files with exact match",
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 256
                          },
                          "mimeType": {
                            "maxLength": 256,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Only include files that reference these specific asset IDs.",
                            "example": "[363848954441724, 793045462540095, 1261042166839739]",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "rootAssetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Internal or external IDs of the root assets that the related assets should be a descendant of (or match).",
                            "example": [
                              {
                                "id": 123456789
                              },
                              {
                                "externalId": "system 99 external Id 1234"
                              }
                            ],
                            "items": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "id"
                                  ],
                                  "properties": {
                                    "id": {
                                      "description": "A server-generated ID for the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "externalId"
                                  ],
                                  "properties": {
                                    "externalId": {
                                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                                      "type": "string",
                                      "maxLength": 255,
                                      "example": "my.known.id"
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "uploadedTime": {
                            "description": "Range between two timestamps.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "sourceCreatedTime": {
                            "description": "Filter for files where the sourceCreatedTime field has been set and is within the specified range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "sourceModifiedTime": {
                            "description": "Filter for files where the sourceModifiedTime field has been set and is within the specified range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          },
                          "uploaded": {
                            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Maximum number of items that the client want to get back.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 256
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 256
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 256,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "sourceCreatedTime": {
                                "description": "The timestamp for when the file was originally created in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "sourceModifiedTime": {
                                "description": "The timestamp for when the file was last modified in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.search({\n  filter: {\n    mimeType: 'image/jpg',\n  },\n  search: {\n    name: 'Pump'\n  }\n});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.files.search(name=\"some name\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/delete": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Delete files",
        "description": "Deletes the files with the given ids.\n\nA maximum of 1000 files can be deleted per request.",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.files.delete([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.files.delete(id=[1,2,3], external_id=\"3\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/downloadlink": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Download files",
        "description": "Retrieves a list of download URLs for the specified list of file IDs. After getting the download links, the client has to issue a GET request to the returned URLs, which will respond with the contents of the file. The link will expire after 30 seconds.",
        "operationId": "downloadLinks",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of file IDs to retrieve the download URL for.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 100,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/downloadlink operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "downloadUrl": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.files.getDownloadUrls([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.files.download(directory=\"my_directory\", id=[1,2,3], external_id=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/files/update": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Update files",
        "description": "Updates the information for the files specified in the request body.\n\nIf you want to update the file content, uploaded using the uploadUrl, please\nuse the initFileUpload request with the query parameter 'overwrite=true'.\nAlternatively, delete and recreate the file.\n\nFor primitive fields (String, Long, Int), use 'set': 'value' to update\nvalue; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. assetIds): Use either only 'set', or a combination of 'add' and/or 'remove'. \n\n__AssetIds update examples__:\n\nExample request body to overwrite assetIds with a new set, asset ID 1 and 2.\n\n```\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"update\": {\n        \"assetIds\" : {\n          \"set\" : [ 1, 2 ]\n        }\n      }\n    }\n  ]\n}\n```\n\nExample request body to add one asset Id, and remove another asset ID.\n\n```\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"update\": {\n        \"assetIds\" : {\n          \"add\" : [ 3 ],\n          \"remove\": [ 2 ]\n        }\n      }\n    }\n  ]\n}\n```\n\n__Metadata update examples__:\n\nExample request body to overwrite metadata with a new set.\n```\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"update\": {\n        \"metadata\": {\n          \"set\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\nExample request body to add two key-value pairs and remove two other key-value pairs by key for\nthe metadata field.\n```\n{\n  \"items\": [\n    {\n      \"id\": 1,\n      \"update\": {\n        \"metadata\": {\n          \"add\": {\n            \"key3\": \"value3\",\n            \"key4\": \"value4\"\n          },\n          \"remove\": [\n            \"key1\",\n            \"key2\"\n          ]\n        }\n      }\n    }\n  ]\n}\n```",
        "operationId": "updateFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON request body which specifies which files and fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "description": "Changes will be applied to file.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "mimeType": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    },
                                    "sourceCreatedTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "sourceModifiedTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "description": "Changes will be applied to file.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "source": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "mimeType": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    },
                                    "sourceCreatedTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "sourceModifiedTime": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 256
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 256,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "sourceCreatedTime": {
                                "description": "The timestamp for when the file was originally created in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "sourceModifiedTime": {
                                "description": "The timestamp for when the file was last modified in the source system.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "filesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const files = await client.files.update([{\n  id: 123,\n  update: {\n    source: { set: 'new source' }\n  }\n}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "file_metadata = client.files.retrieve(id=1)\nfile_metadata.description = \"New description\"\nres = client.files.update(file_metadata)\nfrom cognite.client.data_classes import FileMetadataUpdate\nmy_update = FileMetadataUpdate(id=1).source.set(\"new source\").metadata.add({\"key\": \"value\"})\nres = client.files.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/files/{threedFileId}": {
      "get": {
        "tags": [
          "3D Files"
        ],
        "summary": "Retrieve a 3D file",
        "description": "Retrieve the contents of a 3D file.\n\nThis endpoint supported tag-based caching.\n\nThis endpoint is only compatible with 3D file IDs from the 3D API, and not compatible with\nfile IDs from the Files API.",
        "operationId": "get3DFile",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "threedFileId",
            "in": "path",
            "description": "The ID of the 3D file to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "description": "The raw contents of the file.",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "The media type of the file."
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.files3D.retrieve(3744350296805509);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.files.retrieve(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models": {
      "get": {
        "tags": [
          "3D Models"
        ],
        "summary": "List 3D models",
        "description": "Retrieves a list of all models in a project. This operation supports pagination. You can filter out all models without a published revision.",
        "operationId": "get3DModels",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Filter based on whether or not it has published revisions.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of models.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "id",
                              "createdTime"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the model.",
                                "example": "My Model"
                              },
                              "id": {
                                "type": "integer",
                                "description": "The ID of the model.",
                                "format": "int64",
                                "example": 1000
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                                "format": "int64",
                                "example": 0
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const models3D = await client.models3D.list({ published: true });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "three_d_model_list = client.three_d.models.list()\nfor three_d_model in client.three_d.models:\n    three_d_model # do something with the 3d model\nfor three_d_model in client.three_d.models(chunk_size=50):\n    three_d_model # do something with the 3d model\n"
          }
        ]
      },
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Create 3D models",
        "operationId": "create3DModels",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The models to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255,
                          "description": "The name of the model.",
                          "example": "My Model"
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of the created models.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "createdTime"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the model.",
                            "example": "My Model"
                          },
                          "id": {
                            "type": "integer",
                            "description": "The ID of the model.",
                            "format": "int64",
                            "example": 1000
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const modelsToCreate = [\n  { name: 'Model 0' },\n  { name: 'Model 2' },\n];\nconst models3D = await client.models3D.create(modelsToCreate);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.models.create(name=\"My Model\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/update": {
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Update 3D models",
        "operationId": "update3DModels",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "update": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "title": "set",
                                      "type": "object",
                                      "required": [
                                        "set"
                                      ],
                                      "properties": {
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "title": "add/remove",
                                      "type": "object",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Remove the key-value pairs with the specified keys.",
                                          "example": [
                                            "value1",
                                            "value2"
                                          ],
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Corresponding models after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "createdTime"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the model.",
                            "example": "My Model"
                          },
                          "id": {
                            "type": "integer",
                            "description": "The ID of the model.",
                            "format": "int64",
                            "example": 1000
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const modelsToUpdate = [\n  { id: 3744350296805509, update: { name: { set: 'Model 0 updated' }}},\n  { id: 8163365893677939, update: { name: { set: 'Model 2 updated' }}},\n];\nconst models3D = await client.models3D.update(modelsToUpdate);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "three_d_model = client.three_d.models.retrieve(id=1)\nthree_d_model.name = \"New Name\"\nres = client.three_d.models.update(three_d_model)\nfrom cognite.client.data_classes import ThreeDModelUpdate\nmy_update = ThreeDModelUpdate(id=1).name.set(\"New Name\")\nres = client.three_d.models.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/delete": {
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Delete 3D models",
        "operationId": "delete3DModels",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of models to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.models3D.delete([{ id: 3744350296805509 }, { id: 8163365893677939 }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.models.delete(id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}": {
      "get": {
        "tags": [
          "3D Models"
        ],
        "summary": "Retrieve a 3D model",
        "operationId": "get3DModel",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A model object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "id",
                    "createdTime"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the model.",
                      "example": "My Model"
                    },
                    "id": {
                      "type": "integer",
                      "description": "The ID of the model.",
                      "format": "int64",
                      "example": 1000
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                      "format": "int64",
                      "example": 0
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.models3D.retrieve(3744350296805509);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.models.retrieve(id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D revisions",
        "description": "Retrieves a list of all revisions of a model. This operation supports pagination. You can also filter revisions if they are marked as published or not by using the query param published.",
        "operationId": "get3DRevisions",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Filter based on published status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of revisions of the model.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "fileId",
                              "published",
                              "status",
                              "assetMappingCount",
                              "createdTime"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the revision.",
                                "format": "int64",
                                "example": 1000
                              },
                              "fileId": {
                                "type": "integer",
                                "description": "The file id.",
                                "format": "int64",
                                "example": 1000
                              },
                              "published": {
                                "type": "boolean",
                                "description": "True if the revision is marked as published.",
                                "default": false
                              },
                              "rotation": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "items": {
                                  "type": "number",
                                  "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                                  "format": "double"
                                }
                              },
                              "camera": {
                                "type": "object",
                                "properties": {
                                  "target": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "description": "Initial camera target.",
                                    "items": {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  },
                                  "position": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "description": "Initial camera position.",
                                    "items": {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "Initial camera position and target."
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Queued",
                                  "Processing",
                                  "Done",
                                  "Failed"
                                ],
                                "description": "The status of the revision.",
                                "example": "Done"
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "thumbnailThreedFileId": {
                                "type": "integer",
                                "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                                "format": "int64",
                                "example": 1000
                              },
                              "thumbnailURL": {
                                "type": "string",
                                "description": "The URL of a thumbnail for the revision.",
                                "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                              },
                              "assetMappingCount": {
                                "type": "integer",
                                "description": "The number of asset mappings for this revision.",
                                "format": "int64",
                                "example": 0
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                                "format": "int64",
                                "example": 0
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const revisions3D = await client.revisions3D.list(324566546546346);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.list(model_id=1, published=True, limit=100)\n"
          }
        ]
      },
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Create 3D revisions",
        "operationId": "create3DRevisions",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The revisions to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "fileId"
                      ],
                      "properties": {
                        "published": {
                          "type": "boolean",
                          "description": "True if the revision is marked as published.",
                          "default": false
                        },
                        "rotation": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                            "format": "double"
                          }
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "camera": {
                          "type": "object",
                          "properties": {
                            "target": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera target.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            },
                            "position": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera position.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            }
                          },
                          "description": "Initial camera position and target."
                        },
                        "fileId": {
                          "type": "integer",
                          "description": "The file id to a file uploaded to Cognite's Files API. Can only be set on revision creation, and can never be updated.",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A list of created revisions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "fileId",
                          "published",
                          "status",
                          "assetMappingCount",
                          "createdTime"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The ID of the revision.",
                            "format": "int64",
                            "example": 1000
                          },
                          "fileId": {
                            "type": "integer",
                            "description": "The file id.",
                            "format": "int64",
                            "example": 1000
                          },
                          "published": {
                            "type": "boolean",
                            "description": "True if the revision is marked as published.",
                            "default": false
                          },
                          "rotation": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                              "format": "double"
                            }
                          },
                          "camera": {
                            "type": "object",
                            "properties": {
                              "target": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera target.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              },
                              "position": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera position.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              }
                            },
                            "description": "Initial camera position and target."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Done",
                              "Failed"
                            ],
                            "description": "The status of the revision.",
                            "example": "Done"
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "thumbnailThreedFileId": {
                            "type": "integer",
                            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                            "format": "int64",
                            "example": 1000
                          },
                          "thumbnailURL": {
                            "type": "string",
                            "description": "The URL of a thumbnail for the revision.",
                            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                          },
                          "assetMappingCount": {
                            "type": "integer",
                            "description": "The number of asset mappings for this revision.",
                            "format": "int64",
                            "example": 0
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const revisions = await client.revisions3D.create(4234325345643654, [{ fileId: 8252999965991682 }, { fileId: 6305529564379596 }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import ThreeDModelRevision\nmy_revision = ThreeDModelRevision(file_id=1)\nres = client.three_d.revisions.create(model_id=1, revision=my_revision)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/update": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Update 3D revisions",
        "operationId": "update3DRevisions",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "update": {
                              "type": "object",
                              "properties": {
                                "published": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "boolean",
                                      "description": "True if the revision is marked as published."
                                    }
                                  }
                                },
                                "rotation": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "maxItems": 3,
                                      "minItems": 3,
                                      "type": "array",
                                      "items": {
                                        "type": "number",
                                        "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                                        "format": "double"
                                      }
                                    }
                                  }
                                },
                                "camera": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "object",
                                      "properties": {
                                        "target": {
                                          "maxItems": 3,
                                          "minItems": 3,
                                          "type": "array",
                                          "description": "Initial camera target.",
                                          "items": {
                                            "type": "number",
                                            "format": "double"
                                          }
                                        },
                                        "position": {
                                          "maxItems": 3,
                                          "minItems": 3,
                                          "type": "array",
                                          "description": "Initial camera position.",
                                          "items": {
                                            "type": "number",
                                            "format": "double"
                                          }
                                        }
                                      },
                                      "description": "Initial camera position and target."
                                    }
                                  }
                                },
                                "metadata": {
                                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "title": "set",
                                      "type": "object",
                                      "required": [
                                        "set"
                                      ],
                                      "properties": {
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "title": "add/remove",
                                      "type": "object",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Remove the key-value pairs with the specified keys.",
                                          "example": [
                                            "value1",
                                            "value2"
                                          ],
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Corresponding revisions after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "fileId",
                          "published",
                          "status",
                          "assetMappingCount",
                          "createdTime"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The ID of the revision.",
                            "format": "int64",
                            "example": 1000
                          },
                          "fileId": {
                            "type": "integer",
                            "description": "The file id.",
                            "format": "int64",
                            "example": 1000
                          },
                          "published": {
                            "type": "boolean",
                            "description": "True if the revision is marked as published.",
                            "default": false
                          },
                          "rotation": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                              "format": "double"
                            }
                          },
                          "camera": {
                            "type": "object",
                            "properties": {
                              "target": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera target.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              },
                              "position": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera position.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              }
                            },
                            "description": "Initial camera position and target."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Done",
                              "Failed"
                            ],
                            "description": "The status of the revision.",
                            "example": "Done"
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "thumbnailThreedFileId": {
                            "type": "integer",
                            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                            "format": "int64",
                            "example": 1000
                          },
                          "thumbnailURL": {
                            "type": "string",
                            "description": "The URL of a thumbnail for the revision.",
                            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                          },
                          "assetMappingCount": {
                            "type": "integer",
                            "description": "The number of asset mappings for this revision.",
                            "format": "int64",
                            "example": 0
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const revisionsToUpdate = [{\n id: 6305529564379596,\n update: {\n   rotation: {\n     set: [1, 2, 3]\n   }\n }\n}];\nconst updated = await client.revisions3D.update(8252999965991682, revisionsToUpdate);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "revision = client.three_d.revisions.retrieve(model_id=1, id=1)\nrevision.status = \"New Status\"\nres = client.three_d.revisions.update(model_id=1, item=revision)\nfrom cognite.client.data_classes import ThreeDModelRevisionUpdate\nmy_update = ThreeDModelRevisionUpdate(id=1).published.set(False).metadata.add({\"key\": \"value\"})\nres = client.three_d.revisions.update(model_id=1, item=my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/delete": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Delete 3D revisions",
        "operationId": "delete3DRevisions",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of revisions ids to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.revisions3D.delete(8252999965991682, [{ id: 4190022127342195 }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.delete(model_id=1, id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Retrieve a 3D revision",
        "operationId": "get3DRevision",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A revision object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "fileId",
                    "published",
                    "status",
                    "assetMappingCount",
                    "createdTime"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The ID of the revision.",
                      "format": "int64",
                      "example": 1000
                    },
                    "fileId": {
                      "type": "integer",
                      "description": "The file id.",
                      "format": "int64",
                      "example": 1000
                    },
                    "published": {
                      "type": "boolean",
                      "description": "True if the revision is marked as published.",
                      "default": false
                    },
                    "rotation": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                        "format": "double"
                      }
                    },
                    "camera": {
                      "type": "object",
                      "properties": {
                        "target": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "description": "Initial camera target.",
                          "items": {
                            "type": "number",
                            "format": "double"
                          }
                        },
                        "position": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "description": "Initial camera position.",
                          "items": {
                            "type": "number",
                            "format": "double"
                          }
                        }
                      },
                      "description": "Initial camera position and target."
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Queued",
                        "Processing",
                        "Done",
                        "Failed"
                      ],
                      "description": "The status of the revision.",
                      "example": "Done"
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "thumbnailThreedFileId": {
                      "type": "integer",
                      "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                      "format": "int64",
                      "example": 1000
                    },
                    "thumbnailURL": {
                      "type": "string",
                      "description": "The URL of a thumbnail for the revision.",
                      "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                    },
                    "assetMappingCount": {
                      "type": "integer",
                      "description": "The number of asset mappings for this revision.",
                      "format": "int64",
                      "example": 0
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                      "format": "int64",
                      "example": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const revisions3D = await client.revisions3D.retrieve(8252999965991682, 4190022127342195)"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.retrieve(model_id=1, id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/thumbnail": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Update 3D revision thumbnail",
        "operationId": "updateThumbnail",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request body containing the file ID of the thumbnail image (from Files API).",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fileId"
                ],
                "properties": {
                  "fileId": {
                    "type": "integer",
                    "description": "File ID of thumbnail file in Files API. _Only JPEG and PNG files are supported_.",
                    "format": "int64"
                  }
                },
                "description": "Request body for the updateModelRevisionThumbnail endpoint."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.revisions3D.updateThumbnail(8252999965991682, 4190022127342195, 3243334242324);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.update_thumbnail(model_id=1, revision_id=1, file_id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/nodes": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D nodes",
        "description": "Retrieves a list of nodes from the hierarchy in the 3D model. You can also request a specific subtree with the 'nodeId' query parameter and limit the depth of the resulting subtree with the 'depth' query parameter. This operation supports pagination.",
        "operationId": "get3DNodes",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Get sub nodes up to this many levels below the specified node. Depth 0 is the root node.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nodeId",
            "in": "query",
            "description": "ID of a node that are the root of the subtree you request (default is the root node).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "properties",
            "in": "query",
            "description": "Example: `{\"category1\":{\"property1\":\"value1\"}}`\n\nFilter for node properties. Only nodes that match all the given properties exactly will be listed.\nThe filter must be a JSON object with the same format as the `properties` field.\n",
            "schema": {
              "type": "string",
              "format": "jsonObject(jsonObject(string))"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes of a revision.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "treeIndex",
                              "depth",
                              "name",
                              "subtreeSize",
                              "boundingBox"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1000
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 3
                              },
                              "parentId": {
                                "type": "integer",
                                "description": "The parent of the node, null if it is the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the node.",
                                "example": "Node name"
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of descendants of the node, plus one (counting itself).",
                                "format": "int64",
                                "example": 4
                              },
                              "properties": {
                                "type": "object",
                                "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
                                "example": {
                                  "category1": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  },
                                  "category2": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  }
                                },
                                "additionalProperties": {
                                  "description": "Property category.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const nodes3d = await client.revisions3D.list3DNodes(8252999965991682, 4190022127342195);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.list_nodes(model_id=1, revision_id=1, limit=10)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/nodes/byids": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Get 3D nodes by ID",
        "description": "Retrieves specific nodes given by a list of IDs.",
        "operationId": "get3DNodesById",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request body containing the IDs of the nodes to retrieve.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The ID of the node.",
                          "format": "int64",
                          "example": 1000
                        }
                      }
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "treeIndex",
                              "depth",
                              "name",
                              "subtreeSize",
                              "boundingBox"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1000
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 3
                              },
                              "parentId": {
                                "type": "integer",
                                "description": "The parent of the node, null if it is the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the node.",
                                "example": "Node name"
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of descendants of the node, plus one (counting itself).",
                                "format": "int64",
                                "example": 4
                              },
                              "properties": {
                                "type": "object",
                                "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
                                "example": {
                                  "category1": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  },
                                  "category2": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  }
                                },
                                "additionalProperties": {
                                  "description": "Property category.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/nodes/{nodeId}/ancestors": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D ancestor nodes",
        "description": "Retrieves a list of ancestor nodes of a given node, including itself, in the hierarchy of the 3D model. This operation supports pagination.",
        "operationId": "get3DNodeAncestors",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to get the ancestors of.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ancestor nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "treeIndex",
                              "depth",
                              "name",
                              "subtreeSize",
                              "boundingBox"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1000
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 3
                              },
                              "parentId": {
                                "type": "integer",
                                "description": "The parent of the node, null if it is the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the node.",
                                "example": "Node name"
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of descendants of the node, plus one (counting itself).",
                                "format": "int64",
                                "example": 4
                              },
                              "properties": {
                                "type": "object",
                                "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
                                "example": {
                                  "category1": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  },
                                  "category2": {
                                    "property1": "value1",
                                    "property2": "value2"
                                  }
                                },
                                "additionalProperties": {
                                  "description": "Property category.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const nodes3d = await client.revisions3D.list3DNodeAncestors(8252999965991682, 4190022127342195, 572413075141081);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.revisions.list_ancestor_nodes(model_id=1, revision_id=1, node_id=5, limit=10)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/mappings": {
      "get": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "List 3D asset mappings",
        "description": "List all asset mappings\n\n\nAsset references obtained from a mapping - through asset ids - may be\ninvalid, simply by the non-transactional nature of HTTP.\nThey are NOT maintained by any means from CDF, meaning they will be stored until the\nreference is removed through the delete endpoint of 3d asset mappings.",
        "operationId": "get3DMappings",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "nodeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "intersectsBoundingBox",
            "in": "query",
            "description": "Example: `{\"min\":[0.0, 0.0, 0.0], \"max\":[1.0, 1.0, 1.0]}`\n\nIf given, only return asset mappings for assets whose bounding box\nintersects the given bounding box.\n\nMust be a JSON object with `min`, `max` arrays of coordinates.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mappings between assets and 3D nodes",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "nodeId",
                              "assetId",
                              "treeIndex",
                              "subtreeSize"
                            ],
                            "properties": {
                              "nodeId": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1003
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "The ID of the associated asset (Cognite's Assets API).",
                                "format": "int64",
                                "example": 3001
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 5
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                                "format": "int64",
                                "example": 7
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const mappings3D = await client.assetMappings3D.list(3244265346345, 32423454353545);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.three_d.asset_mappings.list(model_id=1, revision_id=1)\n"
          }
        ]
      },
      "post": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "Create 3D asset mappings",
        "description": "Create asset mappings\n\n\nAsset references when creating a mapping - through asset ids - are allowed to be\ninvalid.\nThey are NOT maintained by any means from CDF, meaning they will be stored until the\nreference is removed through the delete endpoint of 3d asset mappings.",
        "operationId": "create3DMappings",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The asset mappings to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "nodeId",
                        "assetId"
                      ],
                      "properties": {
                        "nodeId": {
                          "type": "integer",
                          "description": "The ID of the node.",
                          "format": "int64",
                          "example": 1003
                        },
                        "assetId": {
                          "type": "integer",
                          "description": "The ID of the associated asset (Cognite's Assets API).",
                          "format": "int64",
                          "example": 3001
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of created asset mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "nodeId",
                          "assetId",
                          "treeIndex",
                          "subtreeSize"
                        ],
                        "properties": {
                          "nodeId": {
                            "type": "integer",
                            "description": "The ID of the node.",
                            "format": "int64",
                            "example": 1003
                          },
                          "assetId": {
                            "type": "integer",
                            "description": "The ID of the associated asset (Cognite's Assets API).",
                            "format": "int64",
                            "example": 3001
                          },
                          "treeIndex": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                            "format": "int64",
                            "example": 5
                          },
                          "subtreeSize": {
                            "type": "integer",
                            "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                            "format": "int64",
                            "example": 7
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assetMappingsToCreate = [\n {\n   nodeId: 8252999965991682,\n   assetId: 4354399876978078\n },\n {\n   nodeId: 9034285498543958,\n   assetId: 1042345809544395\n }\n];\nconst mappings3D = await client.assetMappings3D.create(\n 25432542356436,\n 33485743958747,\n assetMappingsToCreate\n);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import ThreeDAssetMapping\nmy_mapping = ThreeDAssetMapping(node_id=1, asset_id=1)\nres = client.three_d.asset_mappings.create(model_id=1, revision_id=1, asset_mapping=my_mapping)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/mappings/delete": {
      "post": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "Delete 3D asset mappings",
        "description": "Delete a list of asset mappings",
        "operationId": "delete3DMappings",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The IDs of the asset mappings to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "nodeId",
                        "assetId"
                      ],
                      "properties": {
                        "nodeId": {
                          "type": "integer",
                          "description": "The ID of the node.",
                          "format": "int64",
                          "example": 1003
                        },
                        "assetId": {
                          "type": "integer",
                          "description": "The ID of the associated asset (Cognite's Assets API).",
                          "format": "int64",
                          "example": 3001
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const assetMappingsToDelete = [\n {\n   nodeId: 8252999965991682,\n   assetId: 4354399876978078\n },\n {\n   nodeId: 9034285498543958,\n   assetId: 1042345809544395\n }\n];\nawait client.assetMappings3D.delete(8252999965991682, 4190022127342195, assetMappingsToDelete);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "mapping_to_delete = client.three_d.asset_mappings.list(model_id=1, revision_id=1)[0]\nres = client.three_d.asset_mappings.delete(model_id=1, revision_id=1, asset_mapping=mapping_to_delete)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/mappings/list": {
      "post": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "Filter 3D asset mappings",
        "description": "Lists 3D assets mappings that match the specified filter parameter. Only\none type of filter can be specified for each request, either `assetIds` or `nodeIds`.\n\n\nAsset references obtained from a mapping - through asset ids - may be\ninvalid, simply by the non-transactional nature of HTTP.\nThey are NOT maintained by any means from CDF, meaning they will be stored until the\nreference is removed through the delete endpoint of 3d asset mappings.",
        "operationId": "filter3DAssetMappings",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The filter for asset mappings to get.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "assetIds"
                            ],
                            "properties": {
                              "assetIds": {
                                "type": "array",
                                "minItems": 0,
                                "maxItems": 100,
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "nodeIds"
                            ],
                            "properties": {
                              "nodeIds": {
                                "type": "array",
                                "minItems": 0,
                                "maxItems": 100,
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "limit": {
                        "description": "Limits the number of results to return.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string",
                        "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of matching asset mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "nodeId",
                              "assetId",
                              "treeIndex",
                              "subtreeSize"
                            ],
                            "properties": {
                              "nodeId": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1003
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "The ID of the associated asset (Cognite's Assets API).",
                                "format": "int64",
                                "example": 3001
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 5
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                                "format": "int64",
                                "example": 7
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "threedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries": {
      "get": {
        "tags": [
          "Time series"
        ],
        "summary": "List time series",
        "description": "List time series. Use nextCursor to paginate through the results.",
        "operationId": "getTimeSeries",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of results to return. CDF returns a maximum of 1000 results even if you specify a higher limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "description": "Whether the metadata field should be returned, or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "description": "Get the time series related to the assets. The format is a list of IDs serialized as a JSON array(int64). Takes [ 1 .. 100 ] unique items.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "name": "rootAssetIds",
            "in": "query",
            "description": "The IDs of the root assets that the related assets should be a descendant of (or match).",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "schema": {
              "uniqueItems": true,
              "type": "string",
              "format": "jsonArray(int64)",
              "example": [
                1238712837,
                238712361376,
                23786237623
              ]
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "Filter by this (case-sensitive) prefix for the external ID.",
              "type": "string",
              "maxLength": 255,
              "example": "my.known.prefix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time series in lexicographic order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "The cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of result"
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const timeseries = await client.timeseries.list({ includeMetadata: false, assetIds: [1, 2] });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.time_series.list(limit=5)\nfor ts in client.time_series:\n    ts # do something with the time_series\nfor ts_list in client.time_series(chunk_size=2500):\n    ts_list # do something with the time_series\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Create time series",
        "description": "Create one or more time series.",
        "operationId": "postTimeSeries",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "Externally provided ID for the time series (optional, but recommended.)"
                        },
                        "name": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "Human readable name of the time series. This field is seperate from name field available through API versions 0.3-0.6."
                        },
                        "legacyName": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "Set a value for legacyName to allow applications using API v0.3, v04, v05, and v0.6 to access this time series. The legacy name is the human-readable name for the time series and is mapped to the name field used in API versions 0.3-0.6. The legacyName field value must be unique, and setting this value to an already existing value will return an error. We recommend that you set this field to the same value as externalId."
                        },
                        "isString": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the time series is string valued or not."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "unit": {
                          "maxLength": 32,
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "assetId": {
                          "description": "The asset that this time series belongs to.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "isStep": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the time series is a step series or not."
                        },
                        "description": {
                          "maxLength": 1000,
                          "type": "string",
                          "description": "A description of the time series."
                        },
                        "securityCategories": {
                          "type": "array",
                          "description": "The required security categories to access this time series.",
                          "items": {
                            "type": "integer",
                            "description": "The required security categories to access this time series.",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The time series created.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A time series with the specified externalId already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 409
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "ExternalIds that already exist.",
                            "type": "object",
                            "required": [
                              "externalId"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "ExternalIds duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 422
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "Ids and ExternalIds that are duplicated in the request.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const timeseries = [\n  { name: 'Pressure sensor', assetId: 123 },\n  { name: 'Temprature sensor', description: 'Pump abc', unit: 'C' },\n];\nconst createdTimeseries = await client.timeseries.create(timeseries);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import TimeSeries\nts = client.time_series.create(TimeSeries(name=\"my ts\"))\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/byids": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve time series",
        "description": "Retrieve one or more time series by ID or external ID. The time series are returned in the same order as in the request.",
        "operationId": "getTimeSeriesByIds",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of the IDs of the time series to retrieve.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "QueryWithInternalId",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "QueryWithExternalId",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of time series matching the IDs.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "IDs duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 422
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "Ids and ExternalIds that are duplicated in the request.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const timeseries = await client.timeseries.retrieve([\n  { id: 123 },\n  { externalId: 'abc' }\n]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.time_series.retrieve(id=1)\nres = client.time_series.retrieve(external_id=\"1\")\nres = client.time_series.retrieve_multiple(ids=[1, 2, 3])\nres = client.time_series.retrieve_multiple(external_ids=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/list": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Filter time series",
        "description": "Retrieves a list of time series matching the specified criteria. This operation supports pagination by cursor. Criteria can be applied to select a subset of time series.",
        "operationId": "listTimeSeries",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter request for time series. Filters exact field matching or timestamp ranges inclusive min and max.",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "description": "Filtering parameters",
                        "type": "object",
                        "properties": {
                          "name": {
                            "description": "Filter on name.",
                            "type": "string"
                          },
                          "unit": {
                            "description": "Filter on unit.",
                            "type": "string"
                          },
                          "isString": {
                            "description": "Filter on isString.",
                            "type": "boolean"
                          },
                          "isStep": {
                            "description": "Filter on isStep.",
                            "type": "boolean"
                          },
                          "metadata": {
                            "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). The format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            },
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "description": "Filter out time series that are not linked to any of these assets.",
                            "example": "[363848954441724, 793045462540095, 1261042166839739]",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true
                          },
                          "rootAssetIds": {
                            "type": "array",
                            "description": "The IDs of the root assets that the related assets should be children of.",
                            "example": "[343099548723932, 88483999203217]",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true
                          },
                          "externalIdPrefix": {
                            "description": "Filter by this (case-sensitive) prefix for the external ID.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.prefix"
                          },
                          "createdTime": {
                            "description": "Filter out time series with createdTime outside this range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Filter out time series with lastUpdatedTime outside this range.",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        }
                      },
                      "limit": {
                        "description": "Return up to this many results.",
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32",
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string",
                        "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "partition": {
                        "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                        "type": "string",
                        "example": "1/10"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List for time series.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/search": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Search time series",
        "description": "Fulltext search for time series based on result relevance. Primarily meant\nfor human-centric use-cases, not for programs, since matching and\nordering may change over time. Additional filters can also be\nspecified. This operation does not support pagination.",
        "operationId": "searchTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filtering parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Filter on name.",
                        "type": "string"
                      },
                      "unit": {
                        "description": "Filter on unit.",
                        "type": "string"
                      },
                      "isString": {
                        "description": "Filter on isString.",
                        "type": "boolean"
                      },
                      "isStep": {
                        "description": "Filter on isStep.",
                        "type": "boolean"
                      },
                      "metadata": {
                        "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). The format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        },
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "assetIds": {
                        "type": "array",
                        "description": "Filter out time series that are not linked to any of these assets.",
                        "example": "[363848954441724, 793045462540095, 1261042166839739]",
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "rootAssetIds": {
                        "type": "array",
                        "description": "The IDs of the root assets that the related assets should be children of.",
                        "example": "[343099548723932, 88483999203217]",
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "externalIdPrefix": {
                        "description": "Filter by this (case-sensitive) prefix for the external ID.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.prefix"
                      },
                      "createdTime": {
                        "description": "Filter out time series with createdTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Filter out time series with lastUpdatedTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  },
                  "search": {
                    "description": "Search parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Prefix and fuzzy search on name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Prefix and fuzzy search on description.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Whitespace-separated terms to search for in time series. Does a\nbest-effort fuzzy search in relevant fields (currently name and\ndescription) for variations of any of the search terms, and\norders results by relevance. Uses a different search algorithm\nthan the name and description parameters, and will generally give\nmuch better results. Matching and ordering is not guaranteed to\nbe stable over time, and the fields being searched may be\nextended.",
                        "type": "string",
                        "example": "some other"
                      }
                    }
                  },
                  "limit": {
                    "description": "Return up to this many results.",
                    "maximum": 1000,
                    "minimum": 1,
                    "type": "integer",
                    "format": "int32",
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of search results.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const timeseries = await client.timeseries.search({\n  filter: {\n    isString: false,\n  },\n  search: {\n    name: 'Temperature'\n  }\n});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.time_series.search(name=\"some name\")\nres = client.time_series.search(filter={\"asset_ids\":[123]})\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/update": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Update time series",
        "description": "Updates one or more time series. Fields that are not included in the request, are not changed.\n\nFor primitive fields (String, Long Int), use 'set': 'value' to update the value; use 'setNull': true to set the field to null.\n\nFor JSON Array fields (for example securityCategories), use 'set': [value1, value2] to update the value; use 'add': [v1, v2] to add values; use 'remove': [v1, v2] to remove values.",
        "operationId": "alterTimeSeries",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to time series.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "name": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "unit": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "assetId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "description": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "securityCategories": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to time series.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "name": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "metadata": {
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "unit": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "assetId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "description": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "The change that will be applied to the key."
                                    },
                                    "securityCategories": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to the array."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Corresponding time series after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The generated ID for the time series.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The externally supplied ID for the time series."
                          },
                          "name": {
                            "maxLength": 255,
                            "type": "string",
                            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "unit": {
                            "maxLength": 32,
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "The asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "maxLength": 1000,
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "The required security categories to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Time series with specified externalId already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 409
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "ExternalIds that already exist.",
                            "type": "object",
                            "required": [
                              "externalId"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 422
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "Ids and ExternalIds that are duplicated in the request.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const timeseries = await client.timeseries.update([{\n  id: 3785438579439,\n  update: {\n    name: { set: 'New name' }\n  }\n}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.time_series.retrieve(id=1)\nres.description = \"New description\"\nres = client.time_series.update(res)\nfrom cognite.client.data_classes import TimeSeriesUpdate\nmy_update = TimeSeriesUpdate(id=1).description.set(\"New description\").metadata.add({\"key\": \"value\"})\nres = client.time_series.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Delete time series",
        "description": "Deletes the time series with the specified IDs.",
        "operationId": "deleteTimeSeries",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Specify a list of the time series to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "QueryWithInternalId",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "QueryWithExternalId",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "IDs not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "IDs duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 422
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "Ids and ExternalIds that are duplicated in the request.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.timeseries.delete([\n  { id: 123 },\n  { externalId: 'abc' }\n]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.time_series.delete(id=[1,2,3], external_id=\"3\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Insert data points",
        "description": "Insert datapoints into a time series. You can do this for multiple time series.\nIf you insert a datapoint with a timestamp that already exists, it will be overwritten with the new value.",
        "operationId": "postMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The datapoints to insert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10000,
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "DatapointsWithInternalId",
                          "allOf": [
                            {
                              "required": [
                                "datapoints"
                              ],
                              "properties": {
                                "datapoints": {
                                  "type": "array",
                                  "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "title": "NumericalDatapoint",
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "minimum": 31536000000,
                                            "maximum": 2556144000000,
                                            "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                          },
                                          "value": {
                                            "type": "number",
                                            "minimum": -1e+100,
                                            "maximum": 1e+100,
                                            "description": "The numerical data value of a numerical metric."
                                          }
                                        }
                                      },
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "title": "StringDatapoint",
                                        "properties": {
                                          "timestamp": {
                                            "minimum": 31536000000,
                                            "maximum": 2556140400000,
                                            "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                          },
                                          "value": {
                                            "maxLength": 255,
                                            "type": "string",
                                            "description": "The string data value of a string metric."
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "DatapointsWithExternalId",
                          "allOf": [
                            {
                              "required": [
                                "datapoints"
                              ],
                              "properties": {
                                "datapoints": {
                                  "type": "array",
                                  "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "title": "NumericalDatapoint",
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "minimum": 31536000000,
                                            "maximum": 2556144000000,
                                            "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                          },
                                          "value": {
                                            "type": "number",
                                            "minimum": -1e+100,
                                            "maximum": 1e+100,
                                            "description": "The numerical data value of a numerical metric."
                                          }
                                        }
                                      },
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "title": "StringDatapoint",
                                        "properties": {
                                          "timestamp": {
                                            "minimum": 31536000000,
                                            "maximum": 2556140400000,
                                            "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                          },
                                          "value": {
                                            "maxLength": 255,
                                            "type": "string",
                                            "description": "The string data value of a string metric."
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            "application/protobuf": {
              "schema": {
                "type": "string",
                "format": "binary",
                "description": "Accepts protocol buffer serialised payload, based on following proto definitions: [Data Point Insertion](<https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_point_insertion_request.proto>) and [Data Points](<https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_points.proto>)",
                "example": "Definitions: https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_point_insertion_request.proto https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_points.proto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "IDs or external IDs not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "IDs or external IDs duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message",
                        "duplicated"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 422
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "duplicated": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are duplicated.",
                          "items": {
                            "description": "Ids and ExternalIds that are duplicated in the request.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.datapoints.insert([{ id: 123, datapoints: [{timestamp: 1557320284000, value: -2}] }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "datapoints = []\ndatapoints.append({\"id\": 1, \"datapoints\": [(datetime(2018,1,1), 1000), (datetime(2018,1,2), 2000)]})\ndatapoints.append({\"externalId\": 1, \"datapoints\": [(150000000000, 1000), (160000000000, 2000)]})\nclient.datapoints.insert_multiple(datapoints)\ndatapoints = []\ndatapoints.append({\"externalId\": \"1\", \"datapoints\": [{\"timestamp\": datetime(2018,1,1), \"value\": 1000},\n                    {\"timestamp\": datetime(2018,1,2), \"value\": 2000}]})\ndatapoints.append({\"id\": 1, \"datapoints\": [{\"timestamp\": 150000000000, \"value\": 1000},\n                    {\"timestamp\": 160000000000, \"value\": 2000}]})\nclient.datapoints.insert_multiple(datapoints)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/list": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve data points",
        "description": "Retrieves a list of data points from multiple time series in a project. This operation supports aggregation, but not pagination. You can also use GET for this operation if you supply the post body as a query parameter named postBody.",
        "operationId": "getMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Specify parameters to query for multiple datapoints. If you omit fields in individual datapoint query items, the top-level field values are used. For example, you can specify a default limit for all items by setting the top-level limit field. If you request aggregates, only the aggregates are returned. If you don't request any aggregates, all data points are returned.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Parameters describing a query for datapoints.",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "QueryWithInternalId",
                          "allOf": [
                            {
                              "properties": {
                                "start": {
                                  "oneOf": [
                                    {
                                      "type": "integer",
                                      "default": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                                },
                                "end": {
                                  "oneOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string",
                                      "default": "now"
                                    }
                                  ],
                                  "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "Return up to this number of datapoints.",
                                  "format": "int32"
                                },
                                "aggregates": {
                                  "type": "array",
                                  "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                                  "minItems": 0,
                                  "maxItems": 10,
                                  "uniqueItems": true,
                                  "items": {
                                    "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                                    "type": "string",
                                    "enum": [
                                      "average",
                                      "max",
                                      "min",
                                      "count",
                                      "sum",
                                      "interpolation",
                                      "stepInterpolation",
                                      "totalVariation",
                                      "continuousVariance",
                                      "discreteVariance"
                                    ]
                                  }
                                },
                                "granularity": {
                                  "type": "string",
                                  "description": "The granularity size and granularity of the aggregates.",
                                  "example": "1h"
                                },
                                "includeOutsidePoints": {
                                  "type": "boolean",
                                  "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                                  "default": false
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "QueryWithExternalId",
                          "allOf": [
                            {
                              "properties": {
                                "start": {
                                  "oneOf": [
                                    {
                                      "type": "integer",
                                      "default": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                                },
                                "end": {
                                  "oneOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string",
                                      "default": "now"
                                    }
                                  ],
                                  "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "Return up to this number of datapoints.",
                                  "format": "int32"
                                },
                                "aggregates": {
                                  "type": "array",
                                  "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                                  "minItems": 0,
                                  "maxItems": 10,
                                  "uniqueItems": true,
                                  "items": {
                                    "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                                    "type": "string",
                                    "enum": [
                                      "average",
                                      "max",
                                      "min",
                                      "count",
                                      "sum",
                                      "interpolation",
                                      "stepInterpolation",
                                      "totalVariation",
                                      "continuousVariance",
                                      "discreteVariance"
                                    ]
                                  }
                                },
                                "granularity": {
                                  "type": "string",
                                  "description": "The granularity size and granularity of the aggregates.",
                                  "example": "1h"
                                },
                                "includeOutsidePoints": {
                                  "type": "boolean",
                                  "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                                  "default": false
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "start": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "default": 0
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                  },
                  "end": {
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string",
                        "default": "now"
                      }
                    ],
                    "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints. Maximum is 100000 non-aggregated data points and 10000 aggregated data points.",
                    "format": "int32",
                    "default": 100
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "Specify the aggregates to return, or an empty array if this sub-query should return datapoints without aggregation. This value overrides a top-level default aggregates list.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The time granularity size and unit to aggregate over.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period, and the first one after. This option is useful for interpolating data. It is not available for aggregates.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lists of datapoints for the specified queries.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The list of responses. The order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "The ID of the time series the datapoints belong to.",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "maxLength": 255,
                                    "type": "string",
                                    "description": "The external ID of the time series the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints",
                                  "isString",
                                  "isStep"
                                ],
                                "properties": {
                                  "isString": {
                                    "description": "Whether the time series is string valued or not.",
                                    "type": "boolean"
                                  },
                                  "isStep": {
                                    "description": "Whether the time series is a step series or not.",
                                    "type": "boolean"
                                  },
                                  "unit": {
                                    "maxLength": 32,
                                    "type": "string",
                                    "description": "The physical unit of the time series."
                                  },
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "average": {
                                              "type": "number",
                                              "description": "The integral average value in the aggregate period.",
                                              "format": "double"
                                            },
                                            "max": {
                                              "type": "number",
                                              "description": "The maximum value in the aggregate period.",
                                              "format": "double"
                                            },
                                            "min": {
                                              "type": "number",
                                              "description": "The minimum value in the aggregate period.",
                                              "format": "double"
                                            },
                                            "count": {
                                              "type": "integer",
                                              "description": "The number of datapoints in the aggregate period.",
                                              "format": "int32"
                                            },
                                            "sum": {
                                              "type": "number",
                                              "description": "The sum of the datapoints in the aggregate period.",
                                              "format": "double"
                                            },
                                            "interpolation": {
                                              "type": "number",
                                              "description": "The interpolated value of the series in the beginning of the aggregate.",
                                              "format": "double"
                                            },
                                            "stepInterpolation": {
                                              "type": "number",
                                              "description": "The last value before or at the beginning of the aggregate.",
                                              "format": "double"
                                            },
                                            "continuousVariance": {
                                              "type": "number",
                                              "description": "The variance of the interpolated underlying function.",
                                              "format": "double"
                                            },
                                            "discreteVariance": {
                                              "type": "number",
                                              "description": "The variance of the datapoint values.",
                                              "format": "double"
                                            },
                                            "totalVariation": {
                                              "type": "number",
                                              "description": "The total variation of the interpolated underlying function.",
                                              "format": "double"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "oneOf": [
                              {
                                "allOf": [
                                  {
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the time series the datapoints belong to.",
                                        "format": "int64",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991
                                      },
                                      "externalId": {
                                        "maxLength": 255,
                                        "type": "string",
                                        "description": "The external ID of the time series the datapoints belong to."
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "datapoints",
                                      "isString"
                                    ],
                                    "properties": {
                                      "isString": {
                                        "description": "Whether the time series is string valued or not.",
                                        "type": "boolean"
                                      },
                                      "isStep": {
                                        "description": "Whether the time series is a step series or not.",
                                        "type": "boolean"
                                      },
                                      "unit": {
                                        "maxLength": 32,
                                        "type": "string",
                                        "description": "The physical unit of the time series."
                                      },
                                      "datapoints": {
                                        "type": "array",
                                        "description": "The list of datapoints",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "timestamp"
                                              ],
                                              "properties": {
                                                "timestamp": {
                                                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                                  "type": "integer",
                                                  "minimum": 0,
                                                  "format": "int64"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "required": [
                                                "value"
                                              ],
                                              "properties": {
                                                "value": {
                                                  "type": "number",
                                                  "description": "The data value."
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the time series the datapoints belong to.",
                                        "format": "int64",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991
                                      },
                                      "externalId": {
                                        "maxLength": 255,
                                        "type": "string",
                                        "description": "The external ID of the time series the datapoints belong to."
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "datapoints",
                                      "isString"
                                    ],
                                    "properties": {
                                      "isString": {
                                        "description": "Whether the time series is string valued or not.",
                                        "type": "boolean"
                                      },
                                      "unit": {
                                        "maxLength": 32,
                                        "type": "string",
                                        "description": "The physical unit of the time series."
                                      },
                                      "datapoints": {
                                        "type": "array",
                                        "description": "The list of datapoints.",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "timestamp"
                                              ],
                                              "properties": {
                                                "timestamp": {
                                                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                                  "type": "integer",
                                                  "minimum": 0,
                                                  "format": "int64"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "required": [
                                                "value"
                                              ],
                                              "properties": {
                                                "value": {
                                                  "type": "string",
                                                  "description": "The data value."
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "discriminator": {
                              "propertyName": "isString",
                              "mapping": {
                                "false": "#/components/schemas/DatapointsGetDoubleDatapoint",
                                "true": "#/components/schemas/DatapointsGetStringDatapoint"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "application/protobuf": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Return protocol buffer serialised payload, based on the following proto definitions: [Data Points List](<https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_point_list_response.proto>) and [Data Points](<https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_points.proto>)",
                  "example": "Definitions: https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_point_list_response.proto https://raw.githubusercontent.com/cognitedata/protobuf-files/master/v1/timeseries/data_points.proto"
                }
              }
            }
          },
          "400": {
            "description": "IDs not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const data = await client.datapoints.retrieve({ items: [{ id: 123 }] });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "dps = client.datapoints.retrieve(id=1, start=\"2w-ago\", end=\"now\")\ndps = client.datapoints.retrieve(external_id=[\"abc\", \"def\"],\n                        start=datetime(2018,1,1),\n                        end=datetime(2019,1,1),\n                        aggregates=[\"average\"],\n                        granularity=\"1d\")\ndps = client.datapoints.retrieve(id=[{\"id\": 1, \"aggregates\": [\"average\"]},\n                            {\"id\": 1, \"aggregates\": [\"min\"]}],\n                        external_id={\"externalId\": \"1\", \"aggregates\": [\"max\"]},\n                        start=\"1d-ago\", end=\"now\", granularity=\"1h\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/latest": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve latest data point",
        "description": "Retrieves the latest data point in a time series.",
        "operationId": "getLatest",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The list of the queries to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of latest queries",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                      "type": "object",
                      "description": "Describes the latest query.",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "QueryWithInternalId",
                          "allOf": [
                            {
                              "properties": {
                                "before": {
                                  "type": "string",
                                  "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                                  "default": "now"
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "QueryWithExternalId",
                          "allOf": [
                            {
                              "properties": {
                                "before": {
                                  "type": "string",
                                  "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                                  "default": "now"
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of responses. Each response contains a list with the most recent datapoint, or an empty list if no datapoints are found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The list of responses. The order matches the requests order.",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "The ID of the time series the datapoints belong to.",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "maxLength": 255,
                                    "type": "string",
                                    "description": "The external ID of the time series the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints",
                                  "isString"
                                ],
                                "properties": {
                                  "isString": {
                                    "description": "Whether the time series is string valued or not.",
                                    "type": "boolean"
                                  },
                                  "isStep": {
                                    "description": "Whether the time series is a step series or not.",
                                    "type": "boolean"
                                  },
                                  "unit": {
                                    "maxLength": 32,
                                    "type": "string",
                                    "description": "The physical unit of the time series."
                                  },
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "value"
                                          ],
                                          "properties": {
                                            "value": {
                                              "type": "number",
                                              "description": "The data value."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "The ID of the time series the datapoints belong to.",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "maxLength": 255,
                                    "type": "string",
                                    "description": "The external ID of the time series the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints",
                                  "isString"
                                ],
                                "properties": {
                                  "isString": {
                                    "description": "Whether the time series is string valued or not.",
                                    "type": "boolean"
                                  },
                                  "unit": {
                                    "maxLength": 32,
                                    "type": "string",
                                    "description": "The physical unit of the time series."
                                  },
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints.",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "value"
                                          ],
                                          "properties": {
                                            "value": {
                                              "type": "string",
                                              "description": "The data value."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "discriminator": {
                          "propertyName": "isString",
                          "mapping": {
                            "false": "#/components/schemas/DatapointsGetDoubleDatapoint",
                            "true": "#/components/schemas/DatapointsGetStringDatapoint"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The time series does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const datapoints = await client.datapoints.retrieveLatest([\n  {\n   before: 'now',\n   id: 123\n },\n {\n   externalId: 'abc',\n   before: new Date('21 jan 2018'),\n }\n]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.datapoints.retrieve_latest(id=1)[0]\nres = client.datapoints.retrieve_latest(id=1, before=\"2d-ago\")[0]\nres = client.datapoints.retrieve_latest(external_id=[\"abc\", \"def\"])\nlatest_abc = res[0][0]\nlatest_def = res[1][0]\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Delete datapoints",
        "description": "Delete datapoints from time series.",
        "operationId": "deleteDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of delete requests to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of delete filters",
                    "minItems": 1,
                    "maxItems": 10000,
                    "items": {
                      "type": "object",
                      "description": "Select time series and datapoints to delete.",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "QueryWithInternalId",
                          "allOf": [
                            {
                              "required": [
                                "inclusiveBegin"
                              ],
                              "properties": {
                                "inclusiveBegin": {
                                  "description": "The timestamp of first datapoint to delete.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "exclusiveEnd": {
                                  "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "QueryWithExternalId",
                          "allOf": [
                            {
                              "required": [
                                "inclusiveBegin"
                              ],
                              "properties": {
                                "inclusiveBegin": {
                                  "description": "The timestamp of first datapoint to delete.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "exclusiveEnd": {
                                  "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "IDs not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details.",
                      "required": [
                        "code",
                        "message",
                        "missing"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 400
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message."
                        },
                        "missing": {
                          "uniqueItems": true,
                          "type": "array",
                          "description": "Items that are not found.",
                          "items": {
                            "description": "Ids or ExternalIds that are not found.",
                            "oneOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "A server-generated ID for the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "externalId"
                                ],
                                "properties": {
                                  "externalId": {
                                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "my.known.id"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "timeseriesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.datapoints.delete([{id: 123, inclusiveBegin: new Date('1 jan 2019')}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "ranges = [{\"id\": 1, \"start\": \"2d-ago\", \"end\": \"now\"},\n            {\"externalId\": \"abc\", \"start\": \"2d-ago\", \"end\": \"now\"}]\nclient.datapoints.delete_ranges(ranges)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "List databases",
        "operationId": "getDBs",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of databases to be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 25
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of databases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of a database."
                          }
                        },
                        "description": "A NoSQL database to store customer data."
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const databases = await client.raw.listDatabases();"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "db_list = client.raw.databases.list(limit=5)\nfor db in client.raw.databases:\n    db # do something with the db\nfor db_list in client.raw.databases(chunk_size=2500):\n    db_list # do something with the dbs\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Create databases",
        "description": "Create databases in a project. It is possible to post a maximum of 1000 databases per request.",
        "operationId": "createDBs",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of names of databases to be created.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of a database."
                        }
                      },
                      "description": "A NoSQL database to store customer data."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created databases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of a database."
                          }
                        },
                        "description": "A NoSQL database to store customer data."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const databases = await client.raw.createDatabases([{ name: 'My company' }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.raw.databases.create(\"db1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete databases",
        "description": "It deletes a database, but fails if the database is not empty and recursive is set to false (default).",
        "operationId": "deleteDBs",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of names of the databases to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of a database."
                        }
                      },
                      "description": "A NoSQL database to store customer data."
                    }
                  },
                  "recursive": {
                    "type": "boolean",
                    "description": "When true, tables of this database are deleted with the database.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.deleteDatabases([{ name: 'My company' }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.raw.databases.delete([\"db1\", \"db2\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "List tables in a database",
        "operationId": "getTables",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "The name of a database to retrieve tables from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of tables to be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 25
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tables in the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the table"
                          }
                        },
                        "description": "A NoSQL database table to store customer data"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const tables = await client.raw.listTables('My company');"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "table_list = client.raw.tables.list(\"db1\", limit=5)\nfor table in client.raw.tables(db_name=\"db1\"):\n    table # do something with the table\nfor table_list in client.raw.tables(db_name=\"db1\", chunk_size=2500):\n    table_list # do something with the tables\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Create tables in a database",
        "description": "Create tables in a database. It is possible to post a maximum of 1000 tables per request.",
        "operationId": "createTables",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to create tables in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ensureParent",
            "in": "query",
            "description": "Create database if it doesn't exist already",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of tables to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the table"
                        }
                      },
                      "description": "A NoSQL database table to store customer data"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created tables.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the table"
                          }
                        },
                        "description": "A NoSQL database table to store customer data"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const tables = await client.raw.createTables('My company', [{ name: 'Customers' }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.raw.tables.create(\"db1\", \"table1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete tables in a database",
        "operationId": "deleteTables",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to delete tables in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of tables to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the table"
                        }
                      },
                      "description": "A NoSQL database table to store customer data"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.deleteTables('My company', [{ name: 'Customers' }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.raw.tables.delete(\"db1\", [\"table1\", \"table2\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "Retrieve rows from a table",
        "operationId": "getRows",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10000,
              "default": 25
            }
          },
          {
            "name": "columns",
            "in": "query",
            "description": "Ordered list of column keys, separated by commas. Leave empty for all, use single comma to retrieve only row keys.",
            "schema": {
              "type": "string",
              "example": "column1,column2"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "name": "minLastUpdatedTime",
            "in": "query",
            "description": "It is an exclusive filter, specifed as the number of milliseconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "name": "maxLastUpdatedTime",
            "in": "query",
            "description": "It is an inclusive filter, specifed as the number of milliseconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "schema": {
              "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rows returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "columns",
                          "key",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique row key"
                          },
                          "columns": {
                            "type": "object",
                            "description": "Row data stored as a JSON object."
                          },
                          "lastUpdatedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "columnHeaders": {
                      "type": "array",
                      "description": "Headers for the different columns in the response.",
                      "items": {
                        "type": "string",
                        "description": "Headers for the different columns in the response."
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "Rows of column values, in same order as columnHeaders.",
                      "items": {
                        "type": "array",
                        "description": "Rows of column values, in same order as columnHeaders.",
                        "items": {
                          "type": "object",
                          "description": "Rows of column values, in same order as columnHeaders."
                        }
                      }
                    }
                  },
                  "description": "Raw row result written in CSV format, with column columnHeaders."
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.listRows('My company', 'Employees', { columns: ['last_name'] });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "row_list = client.raw.rows.list(\"db1\", \"t1\", limit=5)\nfor row in client.raw.rows(db_name=\"db1\", table_name=\"t1\"):\n    row # do something with the row\nfor row_list in client.raw.rows(db_name=\"db1\", table_name=\"t1\", chunk_size=2500):\n    row_list # do something with the rows\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Insert rows into a table",
        "description": "Insert rows into a table. It is possible to post a maximum of 10000 rows per request.\nIt will replace the columns of an existing row if the rowKey already exists.\n\nThe rowKey is limited to 1024 characters which also includes Unicode characters.\nThe maximum size of columns are 5 MiB, however the maximum size of one column name and value is 2621440 characters each.\nIf you want to store huge amount of data per row or column we recommend using the Files API to upload blobs, then reference it from the Raw row.\n\nThe columns object is a key value object, where the key corresponds to the column name while the value is the column value.\nIt supports all the valid types of values in JSON, so number, string, array, and even nested JSON structure (see payload example to the right).\n",
        "operationId": "postRows",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ensureParent",
            "in": "query",
            "description": "Create database/table if it doesn't exist already",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of rows to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "columns",
                        "key"
                      ],
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Unique row key"
                        },
                        "columns": {
                          "type": "object",
                          "description": "Row data stored as a JSON object."
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": [
                  {
                    "key": "some rowKey",
                    "columns": {
                      "some int-col": 10,
                      "some string-col": "string example",
                      "some json-col": {
                        "test": {
                          "foo": "nested"
                        }
                      },
                      "some array-col": [
                        0,
                        1,
                        3,
                        4
                      ]
                    }
                  }
                ]
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.insertRows('My company', 'Customers', [{ key: 'customer1', columns: { 'First name': 'Steve', 'Last name': 'Jobs' } }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "rows = {\"r1\": {\"col1\": \"val1\", \"col2\": \"val1\"}, \"r2\": {\"col1\": \"val2\", \"col2\": \"val2\"}}\nres = client.raw.rows.insert(\"db1\", \"table1\", rows)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows/{rowKey}": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "Retrieve row by key",
        "operationId": "getRow",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to retrieve the row from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table to retrieve the row from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowKey",
            "in": "path",
            "description": "Row key of the row to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single row from the raw database table with the specified rowKey.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "columns",
                    "key",
                    "lastUpdatedTime"
                  ],
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Unique row key"
                    },
                    "columns": {
                      "type": "object",
                      "description": "Row data stored as a JSON object."
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.retrieveRow('My company', 'Customers', 'customer1');"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "row = client.raw.rows.retrieve(\"db1\", \"t1\", \"k1\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete rows in a table",
        "operationId": "deleteRows",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database containing the rows.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table containing the rows.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Keys to the rows to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Unique row key"
                        }
                      },
                      "description": "A row key"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "rawAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.raw.deleteRows('My company', 'Customers', [{key: 'customer1'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "keys_to_delete = [\"k1\", \"k2\", \"k3\"]\nclient.raw.rows.delete(\"db1\", \"table1\", keys_to_delete)\n"
          }
        ]
      }
    },
    "/login/status": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Verify login status",
        "description": "Returns the authentication information about the asking entity.",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "Information about the current logged in entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LoginStatusResponse",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "loggedIn",
                        "project",
                        "projectId"
                      ],
                      "properties": {
                        "user": {
                          "type": "string",
                          "description": "The user principal, e.g john.doe@corporation.com.",
                          "example": "tom@example.com"
                        },
                        "loggedIn": {
                          "type": "boolean",
                          "description": "Whether the user is logged in or not.",
                          "example": true
                        },
                        "project": {
                          "type": "string",
                          "description": "Name of project user belongs to",
                          "example": "digitalrevolution"
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "Internal project id of the project",
                          "format": "int64",
                          "example": 137238723719
                        },
                        "apiKeyId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                        }
                      },
                      "description": "Represents the current authentication status of the request"
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const status = await client.login.status();\n// if status === null means you are not logged in"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "login_status = client.login.status()\nproject = login_status.project\n"
          }
        ]
      }
    },
    "/login/redirect": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Login with redirect",
        "description": "Redirects to a login URL. This endpoint is typically used by front-end services acting on behalf of users to log them in.",
        "operationId": "redirectUrl",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "description": "The project to login to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The url to send the user to after the login is successful.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorRedirectUrl",
            "in": "query",
            "description": "The url to send the user to if the login fails or is aborted. If this is not passed in, the value of the redirectUrl will be used.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [],
        "responses": {
          "303": {
            "description": "Redirection to the login url"
          }
        },
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "import { CogniteClient, REDIRECT } from '@cognite/sdk';\n\nconst client = new CogniteClient({ appId: '[YOUR APP NAME]' });\n\nclient.loginWithOAuth({\n  project: '[PROJECT]',\n  onAuthenticate: REDIRECT // optional, REDIRECT is by default\n});\n// after login you can do calls with the client\n(async () => {\n  const createdAsset = await client.assets.create([{ name: 'My first asset' }]);\n})();"
          }
        ]
      }
    },
    "/login/token": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Validate a JSON Web Token",
        "description": "Checks if a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token)) is valid.",
        "operationId": "getTokenStatus",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "A JWT acquired from Cognite",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information on whether the token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "token",
                        "valid",
                        "expired"
                      ],
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "The token that was sent for validation",
                          "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
                        },
                        "valid": {
                          "type": "boolean",
                          "description": "Whether this token is valid"
                        },
                        "expired": {
                          "type": "boolean",
                          "description": "Whether this token has expired"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/login/userinfo": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Obtain user information",
        "operationId": "userinfo",
        "description": "Ask this with any valid credentials to obtain information about the current authenticated entity. The response is a decoded idToken.",
        "responses": {
          "200": {
            "description": "User information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "sub",
                    "project_name",
                    "groups",
                    "signing_key",
                    "exp"
                  ],
                  "properties": {
                    "sub": {
                      "type": "string",
                      "description": "The subject of the token",
                      "example": "tom@example.com"
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Which CDF project the subject is in",
                      "example": "digitalrevolution"
                    },
                    "groups": {
                      "type": "array",
                      "description": "Which groups (by id) the subject is in",
                      "items": {
                        "type": "integer",
                        "description": "Which groups (by id) the subject is in",
                        "format": "int64"
                      },
                      "example": "[123982398, 123981283723, 7283273927]"
                    },
                    "signing_key": {
                      "type": "string",
                      "description": "The signing key id",
                      "example": "a769f8ef-d5e3-4cf7-b914-2a6de189d942"
                    },
                    "exp": {
                      "type": "integer",
                      "description": "The expiration time of the token in seconds (unix)",
                      "format": "int64",
                      "example": 1554897484
                    }
                  },
                  "description": "An ID JWT token"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Logout"
        ],
        "summary": "Logout",
        "description": "Invalidates a session and returns the authentication status of the asking entity.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Information about the current logged in entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LoginStatusResponse",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "loggedIn",
                        "project",
                        "projectId"
                      ],
                      "properties": {
                        "user": {
                          "type": "string",
                          "description": "The user principal, e.g john.doe@corporation.com.",
                          "example": "tom@example.com"
                        },
                        "loggedIn": {
                          "type": "boolean",
                          "description": "Whether the user is logged in or not.",
                          "example": true
                        },
                        "project": {
                          "type": "string",
                          "description": "Name of project user belongs to",
                          "example": "digitalrevolution"
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "Internal project id of the project",
                          "format": "int64",
                          "example": 137238723719
                        },
                        "apiKeyId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                        }
                      },
                      "description": "Represents the current authentication status of the request"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/logout/url": {
      "get": {
        "tags": [
          "Logout"
        ],
        "summary": "Retrieve a logout url",
        "description": "Get logout url of the given project.",
        "operationId": "logoutUrl",
        "parameters": [
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The url to send the user to after the logout is successful. If no url is passed, you will end up at the IDPs log out page.",
            "schema": {
              "type": "string"
            },
            "example": "https://mysite.com/loggedout"
          }
        ],
        "responses": {
          "200": {
            "description": "Logout URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "title": "URL Response",
                      "description": "Object containing the log out URL",
                      "type": "object",
                      "required": [
                        "url"
                      ],
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/logout",
                          "description": "The url to send the user to in order to log out"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "// You can specify the url to send the user to after the logout is successful.\n// If no url is passed, you will end up at the IDPs log out page.\nconst logoutUrl = await client.logout.getUrl({ redirectUrl: '[url to redirect]' });"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/groups": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "description": "Retrieves a list of groups the asking service account is a member of. Service accounts with groups:list capability can optionally ask for all groups in a project.",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Whether to get all groups, only available with the groups:list acl.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "isDeleted"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the group",
                            "example": "Production Engineers"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                          },
                          "capabilities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "groupsAcl",
                                  "properties": {
                                    "groupsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Group:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all groups",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "groups the current principal (service account or user) is in",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Group:Scope"
                                        }
                                      },
                                      "title": "Acl:Group"
                                    }
                                  }
                                },
                                {
                                  "title": "assetsAcl",
                                  "properties": {
                                    "assetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Asset:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Asset:Scope"
                                        }
                                      },
                                      "title": "Acl:Asset"
                                    }
                                  }
                                },
                                {
                                  "title": "eventsAcl",
                                  "properties": {
                                    "eventsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Event:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Event:Scope"
                                        }
                                      },
                                      "title": "Acl:Event"
                                    }
                                  }
                                },
                                {
                                  "title": "filesAcl",
                                  "properties": {
                                    "filesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "File:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "File:Scope"
                                        }
                                      },
                                      "title": "Acl:File"
                                    }
                                  }
                                },
                                {
                                  "title": "usersAcl",
                                  "properties": {
                                    "usersAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "User:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all service accounts",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "the current principal (user or service account) making the request",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "User:Scope"
                                        }
                                      },
                                      "title": "Acl:User"
                                    }
                                  }
                                },
                                {
                                  "title": "projectsAcl",
                                  "properties": {
                                    "projectsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE"
                                            ],
                                            "default": "LIST",
                                            "title": "Project:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Project:Scope"
                                        }
                                      },
                                      "title": "Acl:Project"
                                    }
                                  }
                                },
                                {
                                  "title": "securityCategoriesAcl",
                                  "properties": {
                                    "securityCategoriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "MEMBEROF",
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "MEMBEROF",
                                            "title": "SecurityCategory:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "SecurityCategory:Scope"
                                        }
                                      },
                                      "title": "Acl:SecurityCategory"
                                    }
                                  }
                                },
                                {
                                  "title": "rawAcl",
                                  "properties": {
                                    "rawAcl": {
                                      "type": "object",
                                      "description": "Set access control on RAW",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Raw:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "title": "AllScope",
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "title": "DatabaseAndTableScope",
                                              "properties": {
                                                "tableScope": {
                                                  "type": "object",
                                                  "description": "Scope access to certain tables within a database",
                                                  "example": {
                                                    "dbsToTables": {
                                                      "db1": [
                                                        "table1",
                                                        "table2"
                                                      ],
                                                      "db2": [
                                                        "table1",
                                                        "table2"
                                                      ]
                                                    }
                                                  },
                                                  "title": "tableScope",
                                                  "properties": {
                                                    "dbsToTables": {
                                                      "type": "object",
                                                      "title": "dbtoTableScope",
                                                      "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                                      "additionalProperties": {
                                                        "x-additionalPropertiesName": "databaseName",
                                                        "type": "array",
                                                        "example": [
                                                          "table1",
                                                          "table2"
                                                        ],
                                                        "description": "List of table names within the database",
                                                        "items": {
                                                          "type": "string",
                                                          "example": "table1",
                                                          "description": "Name of the table"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Raw:Scope"
                                        }
                                      },
                                      "title": "Acl:Raw"
                                    }
                                  }
                                },
                                {
                                  "title": "timeSeriesAcl",
                                  "properties": {
                                    "timeSeriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Timeseries:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "idscope": {
                                                  "type": "object",
                                                  "properties": {
                                                    "ids": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "time series ids"
                                                    }
                                                  },
                                                  "title": "Scope:TimeSeriesIdScope"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Timeseries:Scope"
                                        }
                                      },
                                      "title": "Acl:Timeseries"
                                    }
                                  }
                                },
                                {
                                  "title": "apikeysAcl",
                                  "properties": {
                                    "apikeysAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Apikey:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "apikeys owned by the service account making the request",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "idscope": {
                                                  "title": "apikeys owned by the service account with the specified id",
                                                  "type": "object",
                                                  "properties": {
                                                    "ids": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "service account ids"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Apikey:Scope"
                                        }
                                      },
                                      "title": "Acl:Apikey"
                                    }
                                  }
                                },
                                {
                                  "title": "threedAcl",
                                  "properties": {
                                    "threedAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "READ",
                                            "title": "Threed:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Threed:Scope"
                                        }
                                      },
                                      "title": "Acl:Threed"
                                    }
                                  }
                                },
                                {
                                  "title": "sequencesAcl",
                                  "properties": {
                                    "sequencesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Sequences:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Sequences:Scope"
                                        }
                                      },
                                      "title": "Acl:Sequences"
                                    }
                                  }
                                },
                                {
                                  "title": "analyticsAcl",
                                  "properties": {
                                    "analyticsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "EXECUTE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Analytics:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Analytics:Scope"
                                        }
                                      },
                                      "title": "Acl:Analytics"
                                    }
                                  }
                                },
                                {
                                  "title": "digitalTwinAcl",
                                  "properties": {
                                    "digitalTwinAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "DigitalTwin:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "DigitalTwin:Scope"
                                        }
                                      },
                                      "title": "Acl:DigitalTwin"
                                    }
                                  }
                                },
                                {
                                  "title": "relationshipsAcl",
                                  "properties": {
                                    "relationshipsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Relationships:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Relationships:Scope"
                                        }
                                      },
                                      "title": "Acl:Relationships"
                                    }
                                  }
                                },
                                {
                                  "title": "datasetsAcl",
                                  "properties": {
                                    "datasetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Datasets:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Datasets:Scope"
                                        }
                                      },
                                      "title": "Acl:Datasets"
                                    }
                                  }
                                },
                                {
                                  "title": "seismicAcl",
                                  "properties": {
                                    "seismicAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Seismic:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Seismic:Scope"
                                        }
                                      },
                                      "title": "Acl:Seismic"
                                    }
                                  }
                                },
                                {
                                  "title": "typesAcl",
                                  "properties": {
                                    "typesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Types:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Types:Scope"
                                        }
                                      },
                                      "title": "Acl:Types"
                                    }
                                  }
                                }
                              ]
                            },
                            "title": "Capability"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "default": false
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "groupsAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const groups = await client.groups.list({ all: true });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.groups.list()\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create groups",
        "description": "Creates one or more named groups, each with a set of capabilities.",
        "operationId": "createGroups",
        "requestBody": {
          "description": "List of groups to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the group",
                          "example": "Production Engineers"
                        },
                        "sourceId": {
                          "type": "string",
                          "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                          "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                        },
                        "capabilities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "oneOf": [
                              {
                                "title": "groupsAcl",
                                "properties": {
                                  "groupsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "READ",
                                            "CREATE",
                                            "UPDATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "Group:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "title": "all groups",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "groups the current principal (service account or user) is in",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Group:Scope"
                                      }
                                    },
                                    "title": "Acl:Group"
                                  }
                                }
                              },
                              {
                                "title": "assetsAcl",
                                "properties": {
                                  "assetsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Asset:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Asset:Scope"
                                      }
                                    },
                                    "title": "Acl:Asset"
                                  }
                                }
                              },
                              {
                                "title": "eventsAcl",
                                "properties": {
                                  "eventsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Event:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Event:Scope"
                                      }
                                    },
                                    "title": "Acl:Event"
                                  }
                                }
                              },
                              {
                                "title": "filesAcl",
                                "properties": {
                                  "filesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "File:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "File:Scope"
                                      }
                                    },
                                    "title": "Acl:File"
                                  }
                                }
                              },
                              {
                                "title": "usersAcl",
                                "properties": {
                                  "usersAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "User:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "title": "all service accounts",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "the current principal (user or service account) making the request",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "User:Scope"
                                      }
                                    },
                                    "title": "Acl:User"
                                  }
                                }
                              },
                              {
                                "title": "projectsAcl",
                                "properties": {
                                  "projectsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "READ",
                                            "CREATE",
                                            "UPDATE"
                                          ],
                                          "default": "LIST",
                                          "title": "Project:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Project:Scope"
                                      }
                                    },
                                    "title": "Acl:Project"
                                  }
                                }
                              },
                              {
                                "title": "securityCategoriesAcl",
                                "properties": {
                                  "securityCategoriesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "MEMBEROF",
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "MEMBEROF",
                                          "title": "SecurityCategory:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "SecurityCategory:Scope"
                                      }
                                    },
                                    "title": "Acl:SecurityCategory"
                                  }
                                }
                              },
                              {
                                "title": "rawAcl",
                                "properties": {
                                  "rawAcl": {
                                    "type": "object",
                                    "description": "Set access control on RAW",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE",
                                            "LIST"
                                          ],
                                          "default": "READ",
                                          "title": "Raw:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "title": "AllScope",
                                            "properties": {
                                              "all": {
                                                "type": "object",
                                                "title": "Scope:All"
                                              }
                                            }
                                          },
                                          {
                                            "title": "DatabaseAndTableScope",
                                            "properties": {
                                              "tableScope": {
                                                "type": "object",
                                                "description": "Scope access to certain tables within a database",
                                                "example": {
                                                  "dbsToTables": {
                                                    "db1": [
                                                      "table1",
                                                      "table2"
                                                    ],
                                                    "db2": [
                                                      "table1",
                                                      "table2"
                                                    ]
                                                  }
                                                },
                                                "title": "tableScope",
                                                "properties": {
                                                  "dbsToTables": {
                                                    "type": "object",
                                                    "title": "dbtoTableScope",
                                                    "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                                    "additionalProperties": {
                                                      "x-additionalPropertiesName": "databaseName",
                                                      "type": "array",
                                                      "example": [
                                                        "table1",
                                                        "table2"
                                                      ],
                                                      "description": "List of table names within the database",
                                                      "items": {
                                                        "type": "string",
                                                        "example": "table1",
                                                        "description": "Name of the table"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Raw:Scope"
                                      }
                                    },
                                    "title": "Acl:Raw"
                                  }
                                }
                              },
                              {
                                "title": "timeSeriesAcl",
                                "properties": {
                                  "timeSeriesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Timeseries:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "type": "object",
                                                "title": "Scope:All"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "idscope": {
                                                "type": "object",
                                                "properties": {
                                                  "ids": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "format": "uint64"
                                                    },
                                                    "title": "time series ids"
                                                  }
                                                },
                                                "title": "Scope:TimeSeriesIdScope"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Timeseries:Scope"
                                      }
                                    },
                                    "title": "Acl:Timeseries"
                                  }
                                }
                              },
                              {
                                "title": "apikeysAcl",
                                "properties": {
                                  "apikeysAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "Apikey:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "type": "object",
                                                "title": "Scope:All"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "apikeys owned by the service account making the request",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "idscope": {
                                                "title": "apikeys owned by the service account with the specified id",
                                                "type": "object",
                                                "properties": {
                                                  "ids": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "format": "uint64"
                                                    },
                                                    "title": "service account ids"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Apikey:Scope"
                                      }
                                    },
                                    "title": "Acl:Apikey"
                                  }
                                }
                              },
                              {
                                "title": "threedAcl",
                                "properties": {
                                  "threedAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "CREATE",
                                            "UPDATE",
                                            "DELETE"
                                          ],
                                          "default": "READ",
                                          "title": "Threed:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Threed:Scope"
                                      }
                                    },
                                    "title": "Acl:Threed"
                                  }
                                }
                              },
                              {
                                "title": "sequencesAcl",
                                "properties": {
                                  "sequencesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Sequences:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Sequences:Scope"
                                      }
                                    },
                                    "title": "Acl:Sequences"
                                  }
                                }
                              },
                              {
                                "title": "analyticsAcl",
                                "properties": {
                                  "analyticsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "EXECUTE",
                                            "LIST"
                                          ],
                                          "default": "READ",
                                          "title": "Analytics:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Analytics:Scope"
                                      }
                                    },
                                    "title": "Acl:Analytics"
                                  }
                                }
                              },
                              {
                                "title": "digitalTwinAcl",
                                "properties": {
                                  "digitalTwinAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "DigitalTwin:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "DigitalTwin:Scope"
                                      }
                                    },
                                    "title": "Acl:DigitalTwin"
                                  }
                                }
                              },
                              {
                                "title": "relationshipsAcl",
                                "properties": {
                                  "relationshipsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Relationships:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Relationships:Scope"
                                      }
                                    },
                                    "title": "Acl:Relationships"
                                  }
                                }
                              },
                              {
                                "title": "datasetsAcl",
                                "properties": {
                                  "datasetsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Datasets:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Datasets:Scope"
                                      }
                                    },
                                    "title": "Acl:Datasets"
                                  }
                                }
                              },
                              {
                                "title": "seismicAcl",
                                "properties": {
                                  "seismicAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Seismic:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Seismic:Scope"
                                      }
                                    },
                                    "title": "Acl:Seismic"
                                  }
                                }
                              },
                              {
                                "title": "typesAcl",
                                "properties": {
                                  "typesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Types:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Types:Scope"
                                      }
                                    },
                                    "title": "Acl:Types"
                                  }
                                }
                              }
                            ]
                          },
                          "title": "Capability"
                        }
                      },
                      "description": "A specification for creating a new group"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of the created groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "isDeleted"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the group",
                            "example": "Production Engineers"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                          },
                          "capabilities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "groupsAcl",
                                  "properties": {
                                    "groupsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Group:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all groups",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "groups the current principal (service account or user) is in",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Group:Scope"
                                        }
                                      },
                                      "title": "Acl:Group"
                                    }
                                  }
                                },
                                {
                                  "title": "assetsAcl",
                                  "properties": {
                                    "assetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Asset:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Asset:Scope"
                                        }
                                      },
                                      "title": "Acl:Asset"
                                    }
                                  }
                                },
                                {
                                  "title": "eventsAcl",
                                  "properties": {
                                    "eventsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Event:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Event:Scope"
                                        }
                                      },
                                      "title": "Acl:Event"
                                    }
                                  }
                                },
                                {
                                  "title": "filesAcl",
                                  "properties": {
                                    "filesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "File:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "File:Scope"
                                        }
                                      },
                                      "title": "Acl:File"
                                    }
                                  }
                                },
                                {
                                  "title": "usersAcl",
                                  "properties": {
                                    "usersAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "User:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all service accounts",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "the current principal (user or service account) making the request",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "User:Scope"
                                        }
                                      },
                                      "title": "Acl:User"
                                    }
                                  }
                                },
                                {
                                  "title": "projectsAcl",
                                  "properties": {
                                    "projectsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE"
                                            ],
                                            "default": "LIST",
                                            "title": "Project:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Project:Scope"
                                        }
                                      },
                                      "title": "Acl:Project"
                                    }
                                  }
                                },
                                {
                                  "title": "securityCategoriesAcl",
                                  "properties": {
                                    "securityCategoriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "MEMBEROF",
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "MEMBEROF",
                                            "title": "SecurityCategory:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "SecurityCategory:Scope"
                                        }
                                      },
                                      "title": "Acl:SecurityCategory"
                                    }
                                  }
                                },
                                {
                                  "title": "rawAcl",
                                  "properties": {
                                    "rawAcl": {
                                      "type": "object",
                                      "description": "Set access control on RAW",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Raw:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "title": "AllScope",
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "title": "DatabaseAndTableScope",
                                              "properties": {
                                                "tableScope": {
                                                  "type": "object",
                                                  "description": "Scope access to certain tables within a database",
                                                  "example": {
                                                    "dbsToTables": {
                                                      "db1": [
                                                        "table1",
                                                        "table2"
                                                      ],
                                                      "db2": [
                                                        "table1",
                                                        "table2"
                                                      ]
                                                    }
                                                  },
                                                  "title": "tableScope",
                                                  "properties": {
                                                    "dbsToTables": {
                                                      "type": "object",
                                                      "title": "dbtoTableScope",
                                                      "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                                      "additionalProperties": {
                                                        "x-additionalPropertiesName": "databaseName",
                                                        "type": "array",
                                                        "example": [
                                                          "table1",
                                                          "table2"
                                                        ],
                                                        "description": "List of table names within the database",
                                                        "items": {
                                                          "type": "string",
                                                          "example": "table1",
                                                          "description": "Name of the table"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Raw:Scope"
                                        }
                                      },
                                      "title": "Acl:Raw"
                                    }
                                  }
                                },
                                {
                                  "title": "timeSeriesAcl",
                                  "properties": {
                                    "timeSeriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Timeseries:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "idscope": {
                                                  "type": "object",
                                                  "properties": {
                                                    "ids": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "time series ids"
                                                    }
                                                  },
                                                  "title": "Scope:TimeSeriesIdScope"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Timeseries:Scope"
                                        }
                                      },
                                      "title": "Acl:Timeseries"
                                    }
                                  }
                                },
                                {
                                  "title": "apikeysAcl",
                                  "properties": {
                                    "apikeysAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Apikey:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "apikeys owned by the service account making the request",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "idscope": {
                                                  "title": "apikeys owned by the service account with the specified id",
                                                  "type": "object",
                                                  "properties": {
                                                    "ids": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "service account ids"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Apikey:Scope"
                                        }
                                      },
                                      "title": "Acl:Apikey"
                                    }
                                  }
                                },
                                {
                                  "title": "threedAcl",
                                  "properties": {
                                    "threedAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "READ",
                                            "title": "Threed:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Threed:Scope"
                                        }
                                      },
                                      "title": "Acl:Threed"
                                    }
                                  }
                                },
                                {
                                  "title": "sequencesAcl",
                                  "properties": {
                                    "sequencesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Sequences:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Sequences:Scope"
                                        }
                                      },
                                      "title": "Acl:Sequences"
                                    }
                                  }
                                },
                                {
                                  "title": "analyticsAcl",
                                  "properties": {
                                    "analyticsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "EXECUTE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Analytics:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Analytics:Scope"
                                        }
                                      },
                                      "title": "Acl:Analytics"
                                    }
                                  }
                                },
                                {
                                  "title": "digitalTwinAcl",
                                  "properties": {
                                    "digitalTwinAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "DigitalTwin:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "DigitalTwin:Scope"
                                        }
                                      },
                                      "title": "Acl:DigitalTwin"
                                    }
                                  }
                                },
                                {
                                  "title": "relationshipsAcl",
                                  "properties": {
                                    "relationshipsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Relationships:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Relationships:Scope"
                                        }
                                      },
                                      "title": "Acl:Relationships"
                                    }
                                  }
                                },
                                {
                                  "title": "datasetsAcl",
                                  "properties": {
                                    "datasetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Datasets:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Datasets:Scope"
                                        }
                                      },
                                      "title": "Acl:Datasets"
                                    }
                                  }
                                },
                                {
                                  "title": "seismicAcl",
                                  "properties": {
                                    "seismicAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Seismic:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Seismic:Scope"
                                        }
                                      },
                                      "title": "Acl:Seismic"
                                    }
                                  }
                                },
                                {
                                  "title": "typesAcl",
                                  "properties": {
                                    "typesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Types:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Types:Scope"
                                        }
                                      },
                                      "title": "Acl:Types"
                                    }
                                  }
                                }
                              ]
                            },
                            "title": "Capability"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "default": false
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "groupsAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const createdGroups = await client.groups.create([{\n  name: 'Developers',\n  capabilities: [{\n    assetsAcl: {\n      actions: ['READ'],\n      scope: { all: {}}\n    }\n  }],\n}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import Group\nmy_capabilities = [{\"groupsAcl\": {\"actions\": [\"LIST\"],\"scope\": {\"all\": { }}}}]\nmy_group = Group(name=\"My Group\", capabilities=my_capabilities)\nres = client.iam.groups.create(my_group)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/groups/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete groups",
        "description": "Deletes the groups with the given IDs.",
        "operationId": "deleteGroups",
        "requestBody": {
          "description": "List of group ids to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "groupsAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.groups.delete([921923342342323, 871621872721323]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.iam.groups.delete(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/groups/{groupId}/serviceaccounts": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List service accounts in a group",
        "description": "Retrieve a list of service accounts that are members of the group with the given ID.",
        "operationId": "getMembersOfGroups",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "id of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@example.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": "[238712387, 1283712837, 1238712387]"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "groupsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const serviceAccounts = await client.groups.listServiceAccounts(921923342342323);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.groups.list_service_accounts(1)\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add service accounts to a group",
        "description": "Grant the service accounts with the given IDs membership in a group. This operation is not idempotent; If any of the given service accounts is already a member of the group, the operation will fail.",
        "operationId": "addServiceAccountsToGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "id of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "ids of service accounts to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response."
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "groupsAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.groups.addServiceAccounts(921923342342323, [123312763989213, 23232789217132]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.groups.add_service_account(id=1, service_account_id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/groups/{groupId}/serviceaccounts/remove": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove service accounts from a group",
        "description": "Revoke membership in a group from the given service accounts.",
        "operationId": "removeServiceAccountsFromGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "description": "id of the group",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of service account ids to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response."
          }
        },
        "x-capability": [
          "groupsAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.groups.removeServiceAccounts(921923342342323, [123312763989213, 23232789217132]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.groups.remove_service_account(id=1, service_account_id=1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve a project",
        "description": "Retrieves information about a project given the project name.",
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "Information about the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "urlName"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The display name of the project.",
                      "example": "Open Industrial Data"
                    },
                    "urlName": {
                      "type": "string",
                      "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                      "example": "publicdata"
                    },
                    "defaultGroupId": {
                      "type": "integer",
                      "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                      "format": "int64",
                      "example": 123871937
                    },
                    "authentication": {
                      "type": "object",
                      "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                      "properties": {
                        "validDomains": {
                          "type": "array",
                          "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                          "example": [
                            "example.com",
                            "google.com"
                          ],
                          "items": {
                            "type": "string",
                            "example": "example.com",
                            "description": "Domain name that can successfully log into your tenant"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "projectsAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const projectInfo = await client.projects.retrieve('publicdata');"
          }
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project",
        "description": "Updates the full project. Be careful with this operation, as it will also override any previously set field. This means every call to this endpoint needs to also include the oauth credentials, otherwise they get unset. The urlName property can not be changed.\n",
        "operationId": "putProject",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of projects to update, with new values. Currently only supports one project.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Project object",
                "title": "ProjectObject",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The display name of the project.",
                    "example": "Open Industrial Data"
                  },
                  "defaultGroupId": {
                    "type": "integer",
                    "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                    "format": "int64",
                    "example": 123871937
                  },
                  "authentication": {
                    "type": "object",
                    "description": "Data about how to authenticate and authorize users",
                    "properties": {
                      "azureADConfiguration": {
                        "type": "object",
                        "properties": {
                          "appId": {
                            "type": "string",
                            "description": "Azure application ID. You get this when creating the Azure app."
                          },
                          "appSecret": {
                            "type": "string",
                            "description": "Azure application secret. You get this when creating the Azure app."
                          },
                          "tenantId": {
                            "type": "string",
                            "description": "Azure tenant ID."
                          },
                          "appResourceId": {
                            "type": "string",
                            "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
                          }
                        },
                        "description": "Data specific to Azure AD authentication"
                      },
                      "validDomains": {
                        "type": "array",
                        "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                        "example": [
                          "example.com",
                          "google.com"
                        ],
                        "items": {
                          "type": "string",
                          "example": "example.com",
                          "description": "Domain name that can successfully log into your tenant"
                        }
                      },
                      "oAuth2Configuration": {
                        "type": "object",
                        "properties": {
                          "loginUrl": {
                            "type": "string",
                            "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
                          },
                          "logoutUrl": {
                            "type": "string",
                            "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
                          },
                          "tokenUrl": {
                            "type": "string",
                            "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
                          },
                          "clientId": {
                            "type": "string",
                            "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
                          },
                          "clientSecret": {
                            "type": "string",
                            "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
                          }
                        },
                        "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "urlName"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The display name of the project.",
                      "example": "Open Industrial Data"
                    },
                    "urlName": {
                      "type": "string",
                      "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                      "example": "publicdata"
                    },
                    "defaultGroupId": {
                      "type": "integer",
                      "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                      "format": "int64",
                      "example": 123871937
                    },
                    "authentication": {
                      "type": "object",
                      "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                      "properties": {
                        "validDomains": {
                          "type": "array",
                          "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                          "example": [
                            "example.com",
                            "google.com"
                          ],
                          "items": {
                            "type": "string",
                            "example": "example.com",
                            "description": "Domain name that can successfully log into your tenant"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "projectsAcl:UPDATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.projects.update('new-project-name', {\n  name: 'New project display name',\n  defaultGroupId: 123,\n});"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/serviceaccounts": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Service accounts"
        ],
        "summary": "List service accounts",
        "operationId": "getServiceAccounts",
        "responses": {
          "200": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@example.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": "[238712387, 1283712837, 1238712387]"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "usersAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const serviceaccounts = await client.serviceAccounts.list();"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.service_accounts.list()\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Service accounts"
        ],
        "summary": "Create service accounts",
        "operationId": "createServiceAccounts",
        "requestBody": {
          "description": "List of service accounts to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the service account",
                          "example": "some-internal-service@example.com",
                          "title": "name"
                        },
                        "groups": {
                          "type": "array",
                          "description": "List of group ids",
                          "items": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "example": "[238712387, 1283712837, 1238712387]"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@example.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": "[238712387, 1283712837, 1238712387]"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "usersAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const serviceAccounts = [\n  { name: 'Data extractor' },\n  { name: 'Monitor', groups: [123, 456] },\n];\nconst createdServiceAccounts = await client.serviceAccounts.create(serviceAccounts);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import ServiceAccount\nmy_account = ServiceAccount(name=\"my@service.com\", groups=[1, 2, 3])\nres = client.iam.service_accounts.create(my_account)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/serviceaccounts/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Service accounts"
        ],
        "summary": "Delete service accounts",
        "operationId": "deleteServiceAccounts",
        "requestBody": {
          "description": "List of service account ids to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "usersAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.serviceAccounts.delete([123, 456]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.iam.service_accounts.delete(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/apikeys": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "API keys"
        ],
        "summary": "List API keys",
        "description": "Retrieves a list of all API keys connected to the current service account. Administrators can optionally list keys for all or individual service accounts that are not their own.",
        "operationId": "getApiKeys",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Only available with users:list ACL, returns all API keys for the project.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "serviceAccountId",
            "in": "query",
            "description": "Get API keys for a specific service account, only available to admin users.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Whether to include deleted API keys, or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of API keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ApiKeyResponse",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ApiKeyObject",
                        "required": [
                          "id",
                          "serviceAccountId",
                          "createdTime",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": 91723917823,
                            "description": "The ID of the API key."
                          },
                          "serviceAccountId": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1283712837,
                            "description": "The ID of the service account."
                          },
                          "createdTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The time of creation in Unix milliseconds.",
                            "example": 1554897980221
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "DELETED"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "apikeysAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const apiKeys = await client.apiKeys.list({ all: true });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.api_keys.list()\n"
          }
        ]
      },
      "post": {
        "tags": [
          "API keys"
        ],
        "summary": "Create API keys",
        "description": "Creates one API key for each service account.",
        "operationId": "createApiKeys",
        "requestBody": {
          "description": "List of the service accounts to create API keys for.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "serviceAccountId"
                      ],
                      "type": "object",
                      "properties": {
                        "serviceAccountId": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of the created API keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "serviceAccountId",
                          "createdTime",
                          "status",
                          "value"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The internal ID for the API key."
                          },
                          "serviceAccountId": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The ID of the service account."
                          },
                          "createdTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The time of creation in Unix milliseconds."
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the API key.",
                            "enum": [
                              "ACTIVE",
                              "DELETED"
                            ],
                            "default": "ACTIVE"
                          },
                          "value": {
                            "type": "string",
                            "description": "The API key to be used against the API.",
                            "example": "MQ23y87QSDKIJSd87287sdJkjsd"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing.",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "apikeysAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const createdApiKeys = await client.apiKeys.create([{ serviceAccountId: 123 }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.api_keys.create(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/apikeys/delete": {
      "post": {
        "tags": [
          "API keys"
        ],
        "summary": "Delete API keys",
        "description": "Deletes one or more API keys with the specified API key IDs. The API key IDs were returned when the keys were created, or can be obtained by listing all API keys.",
        "operationId": "deleteApiKeys",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of the IDs of the API keys to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "apikeysAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.apiKeys.delete([123, 456]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.iam.api_keys.delete(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/securitycategories": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Security categories"
        ],
        "summary": "List security categories",
        "operationId": "getSecurityCategories",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort descending or ascending.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to use for paging through results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Return up to this many results. Maximum is 1000. Default is 25.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of security categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the security category",
                            "example": "Guarded by vendor x"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Id of the security category",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "securitycategoriesAcl:LIST"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const securityCategories = await client.securityCategories.list({ sort: 'ASC' });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.iam.security_categories.list()\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Security categories"
        ],
        "summary": "Create security categories",
        "operationId": "createSecurityCategories",
        "requestBody": {
          "description": "List of categories to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minLength": 1,
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the security category",
                          "example": "Guarded by vendor x"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of security categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the security category",
                            "example": "Guarded by vendor x"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Id of the security category",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "securitycategoriesAcl:CREATE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const securityCategories = [\n  { name: 'Admins' },\n  { name: 'Developers' },\n];\nconst createdSecurityCategories = await client.securityCategories.create(securityCategories);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import SecurityCategory\nmy_category = SecurityCategory(name=\"My Category\")\nres = client.iam.security_categories.create(my_category)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/securitycategories/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "The project name.",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Security categories"
        ],
        "summary": "Delete security categories",
        "operationId": "deleteSecurityCategories",
        "requestBody": {
          "description": "List of security category IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "securitycategoriesAcl:DELETE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.securityCategories.delete([123, 456]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.iam.security_categories.delete(1)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "List sequences",
        "operationId": "listSequences",
        "description": "List sequences. Use nextCursor to paginate through the results.",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with list of sequences.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "The cursor to get the next page of results (if available). Learn more [here](/dev/concepts/pagination/)."
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const sequences = await client.sequences.list({ filter: { name: 'sequence_name' } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.list(limit=5)\nfor seq in client.sequences:\n    seq # do something with the sequences\nfor seq_list in client.sequences(chunk_size=2500):\n    seq_list # do something with the sequences\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Create sequences",
        "description": "Create one or more sequences.",
        "operationId": "createSequence",
        "requestBody": {
          "description": "Sequence to be stored",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "columns"
                      ],
                      "type": "object",
                      "description": "Describes a new sequence",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "Any relevant name",
                          "description": "Name of the sequence"
                        },
                        "description": {
                          "type": "string",
                          "example": "Optional description",
                          "description": "Description of the sequence"
                        },
                        "assetId": {
                          "type": "integer",
                          "example": 1221123111,
                          "description": "Optional asset this sequence is associated with",
                          "format": "int64"
                        },
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "metadata": {
                          "type": "object",
                          "example": {
                            "extracted-by": "cognite"
                          },
                          "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "columns": {
                          "type": "array",
                          "description": "List of column definitions",
                          "items": {
                            "type": "object",
                            "description": "Describes a new column",
                            "required": [
                              "externalId"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "depth",
                                "description": "Human readable name of the sequence"
                              },
                              "externalId": {
                                "type": "string",
                                "example": "DPS1",
                                "maxLength": 255,
                                "description": "User provided column identifier (Unique for a given sequence)"
                              },
                              "description": {
                                "type": "string",
                                "example": "Optional description",
                                "description": "Description of the column"
                              },
                              "valueType": {
                                "type": "string",
                                "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                "default": "DOUBLE",
                                "enum": [
                                  "STRING",
                                  "DOUBLE",
                                  "LONG"
                                ]
                              },
                              "metadata": {
                                "type": "object",
                                "example": {
                                  "extracted-by": "cognite"
                                },
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "minItems": 1,
                          "maxItems": 200
                        }
                      }
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "example": "TRAJ/W1234/WB8821/123123AB",
                            "description": "Projectwide unique identifier for the sequence"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "externalId",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error.",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code.",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message.",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that do not match any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that are not unique.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const sequences = [\n {\n  externalId: 'sequence_name',\n  columns: [\n   {\n     externalId: 'one',\n     valueType: SequenceValueType.LONG,\n   },\n   {\n     externalId: 'two',\n   },\n   {\n     externalId: 'three',\n     valueType: SequenceValueType.STRING,\n   }\n  ]\n }\n];\nconst [sequence] = await client.sequences.create(sequences);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "from cognite.client.data_classes import Sequence\nclient.lumn_def = [{\"valueType\":\"STRING\",\"externalId\":\"user\",\"description\":\"some description\"}, {\"valueType\":\"DOUBLE\",\"externalId\":\"amount\"}]\nseq = client.sequences.create(Sequence(external_id=\"my_sequence\", columns=column_def))\nseq2 = client.sequences.create(Sequence(external_id=\"my_copied_sequence\", columns=seq.columns))\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/list": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Filter sequences",
        "description": "Retrieves a list of sequences matching the given criteria.",
        "operationId": "advancedListSequences",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Retrieves a list of sequences matching the given criteria.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filtering parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Return only sequences with this *exact* name."
                      },
                      "externalIdPrefix": {
                        "description": "Filter by this (case-sensitive) prefix for the external ID.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.prefix"
                      },
                      "metadata": {
                        "description": "Filter the sequences by metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        },
                        "type": "object"
                      },
                      "assetIds": {
                        "type": "array",
                        "description": "Return only sequences linked to one of the specified assets.",
                        "example": [
                          363848954441724,
                          793045462540095,
                          1261042166839739
                        ],
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "rootAssetIds": {
                        "type": "array",
                        "description": "Return only sequences linked to assets with one of these assets as the root asset.",
                        "example": [
                          363848954441724,
                          793045462540095,
                          1261042166839739
                        ],
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "createdTime": {
                        "description": "Filter out sequences with createdTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Filter out sequences with lastUpdatedTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  },
                  "limit": {
                    "description": "Return up to this many results per page.",
                    "maximum": 1000,
                    "minimum": 1,
                    "type": "integer",
                    "format": "int32",
                    "default": 100
                  },
                  "cursor": {
                    "type": "string",
                    "description": "Cursor for paging trough results. Still keep the filter in subsequent requests."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listing sequences.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "The cursor to get the next page of results (if available). Learn more [here](/dev/concepts/pagination/)."
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const sequences = await client.sequences.list({ filter: { name: 'sequence_name' } });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.list(limit=5)\nfor seq in client.sequences:\n    seq # do something with the sequences\nfor seq_list in client.sequences(chunk_size=2500):\n    seq_list # do something with the sequences\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/byids": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Retrieve sequences",
        "description": "Retrieve one or more sequences by ID or external ID. The sequences are returned in the same order as in the request.",
        "operationId": "getSequenceById",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Ids of the sequences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Select by Id",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Select by ExternalId",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const [sequence1, sequence2] = await client.sequences.retrieve([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.retrieve(id=1)\nres = client.sequences.retrieve(external_id=\"1\")\nres = client.sequences.retrieve_multiple(ids=[1, 2, 3])\nres = client.sequences.retrieve_multiple(external_ids=[\"abc\", \"def\"])\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/search": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Search sequences",
        "description": "Retrieves a list of sequences matching the given criteria. This operation does not support pagination.",
        "operationId": "searchSequences",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Retrieves a list of sequences matching the given criteria. This operation does not support pagination.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filtering parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Return only sequences with this *exact* name."
                      },
                      "externalIdPrefix": {
                        "description": "Filter by this (case-sensitive) prefix for the external ID.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.prefix"
                      },
                      "metadata": {
                        "description": "Filter the sequences by metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        },
                        "type": "object"
                      },
                      "assetIds": {
                        "type": "array",
                        "description": "Return only sequences linked to one of the specified assets.",
                        "example": [
                          363848954441724,
                          793045462540095,
                          1261042166839739
                        ],
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "rootAssetIds": {
                        "type": "array",
                        "description": "Return only sequences linked to assets with one of these assets as the root asset.",
                        "example": [
                          363848954441724,
                          793045462540095,
                          1261042166839739
                        ],
                        "items": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "createdTime": {
                        "description": "Filter out sequences with createdTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Filter out sequences with lastUpdatedTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  },
                  "search": {
                    "description": "Search parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Prefix and fuzzy search on name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Prefix and fuzzy search on description.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                        "type": "string"
                      }
                    }
                  },
                  "limit": {
                    "description": "Return up to this many results.",
                    "maximum": 1000,
                    "minimum": 1,
                    "type": "integer",
                    "format": "int32",
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search on sequences.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const sequences = await client.sequences.search({\n  filter: {\n    assetIds: [1, 2]\n  },\n  search: {\n    query: 'n*m* desc*ion'\n  }\n});"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.search(name=\"some name\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/update": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Update sequences",
        "description": "Update one or more sequences. Fields that are not included in the request, are not changed.",
        "operationId": "updateSequences",
        "requestBody": {
          "description": "Patch definition",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "title": "Select by Id",
                          "allOf": [
                            {
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "description": "A description of changes that should be done to the sequence",
                                  "properties": {
                                    "name": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "assetId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "title": "Select by ExternalId",
                          "allOf": [
                            {
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "description": "A description of changes that should be done to the sequence",
                                  "properties": {
                                    "name": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "description": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "assetId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "externalId": {
                                      "title": "set",
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "title": "set",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "remove",
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "example": true
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Set a new value for the string, or remove the value."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                      "oneOf": [
                                        {
                                          "title": "set",
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "title": "add/remove",
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with the specified keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The modified sequences",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "columns",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "description": "Information about the sequence stored in the database",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique cognite-provided identifier for the sequence",
                            "example": 1,
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "type": "string",
                            "example": "Any relevant name",
                            "description": "Name of the sequence"
                          },
                          "description": {
                            "type": "string",
                            "example": "Optional description",
                            "description": "Description of the sequence"
                          },
                          "assetId": {
                            "type": "integer",
                            "example": 1221123111,
                            "description": "Optional asset this sequence is associated with",
                            "format": "int64"
                          },
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "metadata": {
                            "type": "object",
                            "example": {
                              "extracted-by": "cognite"
                            },
                            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "columns": {
                            "type": "array",
                            "description": "List of column definitions",
                            "items": {
                              "type": "object",
                              "required": [
                                "id",
                                "valueType",
                                "createdTime",
                                "lastUpdatedTime"
                              ],
                              "description": "Information about a column stored in the database",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "example": "depth",
                                  "description": "Human readable name of the column"
                                },
                                "externalId": {
                                  "type": "string",
                                  "example": "DPS1",
                                  "description": "User provided column identifier (Unique for a given sequence)"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Optional description",
                                  "description": "Description of the column"
                                },
                                "valueType": {
                                  "type": "string",
                                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                                  "default": "DOUBLE",
                                  "enum": [
                                    "STRING",
                                    "DOUBLE",
                                    "LONG"
                                  ]
                                },
                                "metadata": {
                                  "type": "object",
                                  "example": {
                                    "extracted-by": "cognite"
                                  },
                                  "description": "Custom, application specific metadata. String key -> String value",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "createdTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "lastUpdatedTime": {
                                  "type": "integer",
                                  "example": 100000000000,
                                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                                  "format": "int64",
                                  "readOnly": true
                                }
                              }
                            }
                          },
                          "createdTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          },
                          "lastUpdatedTime": {
                            "type": "integer",
                            "example": 100000000000,
                            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                            "format": "int64",
                            "readOnly": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const [updatedSequence] = await client.sequences.update([{id: 123, update: {name: {set: 'New name'}}}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.retrieve(id=1)\nres.description = \"New description\"\nres = client.sequences.update(res)\nfrom cognite.client.data_classes import SequenceUpdate\nmy_update = SequenceUpdate(id=1).description.set(\"New description\").metadata.add({\"key\": \"value\"})\nres = client.sequences.update(my_update)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/delete": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Deletes sequences",
        "description": "Deletes the sequences with the specified IDs.",
        "operationId": "deleteSequences",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Ids of the sequences to delete",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "Select by Id",
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Select by ExternalId",
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.sequences.delete([{id: 123}, {externalId: 'abc'}]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.sequences.delete(id=[1,2,3], external_id=\"3\")\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/data": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Insert rows",
        "description": "Inserts rows into a sequence. This overwrites data in rows and columns that exist.",
        "operationId": "postSequenceData",
        "requestBody": {
          "description": "Data posted",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "Select by Id",
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "columns",
                                "rows"
                              ],
                              "description": "Data from a sequence",
                              "properties": {
                                "columns": {
                                  "type": "array",
                                  "description": "Column external ids in the same order as the values for each row",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "maxItems": 200
                                },
                                "rows": {
                                  "type": "array",
                                  "description": "List of row information",
                                  "items": {
                                    "type": "object",
                                    "description": "A single row of datapoints",
                                    "required": [
                                      "rowNumber",
                                      "values"
                                    ],
                                    "properties": {
                                      "rowNumber": {
                                        "type": "integer",
                                        "description": "The row number for this row",
                                        "example": 1,
                                        "minimum": 1,
                                        "format": "int64"
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                                        "items": {
                                          "type": "object",
                                          "description": "Json element of type corresponding to the column type. May include NULL!",
                                          "example": 1000123
                                        },
                                        "minItems": 1,
                                        "maxItems": 200
                                      }
                                    }
                                  },
                                  "minItems": 1,
                                  "maxItems": 10000
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "Select by ExternalId",
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "columns",
                                "rows"
                              ],
                              "description": "Data from a sequence",
                              "properties": {
                                "columns": {
                                  "type": "array",
                                  "description": "Column external ids in the same order as the values for each row",
                                  "items": {
                                    "type": "string"
                                  },
                                  "minItems": 1,
                                  "maxItems": 200
                                },
                                "rows": {
                                  "type": "array",
                                  "description": "List of row information",
                                  "items": {
                                    "type": "object",
                                    "description": "A single row of datapoints",
                                    "required": [
                                      "rowNumber",
                                      "values"
                                    ],
                                    "properties": {
                                      "rowNumber": {
                                        "type": "integer",
                                        "description": "The row number for this row",
                                        "example": 1,
                                        "minimum": 1,
                                        "format": "int64"
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                                        "items": {
                                          "type": "object",
                                          "description": "Json element of type corresponding to the column type. May include NULL!",
                                          "example": 1000123
                                        },
                                        "minItems": 1,
                                        "maxItems": 200
                                      }
                                    }
                                  },
                                  "minItems": 1,
                                  "maxItems": 10000
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "example": {
                        "externalId": "DL/DRILL412/20190103/T3",
                        "columns": [
                          "Depth",
                          "DepthSource",
                          "PowerSetting"
                        ],
                        "rows": [
                          {
                            "rowNumber": 1,
                            "values": [
                              23331.3,
                              "s2",
                              61
                            ]
                          }
                        ]
                      }
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                },
                "example": {
                  "items": [
                    {
                      "externalId": "DL/DRILL412/20190103/T3",
                      "columns": [
                        "Depth",
                        "DepthSource",
                        "PowerSetting"
                      ],
                      "rows": [
                        {
                          "rowNumber": 1,
                          "values": [
                            23331.3,
                            "s2",
                            61
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const rows = [\n { rowNumber: 0, values: [1, 2.2, 'three'] },\n { rowNumber: 1, values: [4, 5, 'six'] }\n];\nawait client.sequences.insertRows([{ id: 123, rows, columns: ['one', 'two', 'three'] }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "seq = client.sequences.create(Sequence(columns=[{\"valueType\": \"STRING\", \"externalId\":\"col_a\"},{\"valueType\": \"DOUBLE\", \"externalId\":\"col_b\"}]))\ndata = [(1, ['pi',3.14]), (2, ['e',2.72]) ]\nclient.sequences.data.insert(column_external_ids=[\"col_a\",\"col_b\"], rows=data, id=1)\ndata = [{\"rowNumber\": 123, \"values\": ['str',3]}, {\"rowNUmber\": 456, \"values\": [\"bar\",42]} ]\nclient.sequences.data.insert(data, id=1, column_external_ids=[\"col_a\",\"col_b\"]) # implicit columns are retrieved from metadata\ndata = {123 : ['str',3], 456 : ['bar',42] }\nclient.sequences.data.insert(column_external_ids=['stringColumn','intColumn'], rows=data, id=1)\ndata = client.sequences.data.retrieve(id=2,start=0,end=10)\nclient.sequences.data.insert(rows=data, id=1,column_external_ids=None)\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/data/list": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Retrieve rows",
        "description": "Processes data requests, and returns the result. NB - This operation uses a dynamic limit on the number of rows returned based on the number and type of columns, use the provided cursor to paginate and retrieve all data.",
        "operationId": "getSequenceData",
        "requestBody": {
          "description": "Description of data requested",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Parameters describing a query for datapoints.",
                "oneOf": [
                  {
                    "required": [
                      "id"
                    ],
                    "title": "Select by Id",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "A request for datapoints stored",
                        "properties": {
                          "start": {
                            "type": "integer",
                            "description": "Lowest row number included.",
                            "default": 0,
                            "format": "int64"
                          },
                          "end": {
                            "type": "integer",
                            "description": "Get rows up to, but excluding, this row number. Default - No limit",
                            "example": 1,
                            "format": "int64"
                          },
                          "limit": {
                            "type": "integer",
                            "description": "Maximum number of rows returned in one request. Api might return less even if there is more data, but it will then provide a cursor for continuation. If there is more data beyond this limit, a cursor will be returned to simplify further fetching of data.",
                            "minimum": 1,
                            "maximum": 10000,
                            "default": 100,
                            "example": 1,
                            "format": "int32"
                          },
                          "cursor": {
                            "type": "string",
                            "description": "Cursor for pagination returned from a previous request. Apart from this cursor, the rest of the request object have be the same as for the original request."
                          },
                          "columns": {
                            "type": "array",
                            "description": "Columns to be included. Specified as list of column externalIds. In case this filter is not set, all available columns will be returned.",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 200
                          }
                        }
                      },
                      {
                        "properties": {
                          "id": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        }
                      }
                    ]
                  },
                  {
                    "required": [
                      "externalId"
                    ],
                    "title": "Select by ExternalId",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "A request for datapoints stored",
                        "properties": {
                          "start": {
                            "type": "integer",
                            "description": "Lowest row number included.",
                            "default": 0,
                            "format": "int64"
                          },
                          "end": {
                            "type": "integer",
                            "description": "Get rows up to, but excluding, this row number. Default - No limit",
                            "example": 1,
                            "format": "int64"
                          },
                          "limit": {
                            "type": "integer",
                            "description": "Maximum number of rows returned in one request. Api might return less even if there is more data, but it will then provide a cursor for continuation. If there is more data beyond this limit, a cursor will be returned to simplify further fetching of data.",
                            "minimum": 1,
                            "maximum": 10000,
                            "default": 100,
                            "example": 1,
                            "format": "int32"
                          },
                          "cursor": {
                            "type": "string",
                            "description": "Cursor for pagination returned from a previous request. Apart from this cursor, the rest of the request object have be the same as for the original request."
                          },
                          "columns": {
                            "type": "array",
                            "description": "Columns to be included. Specified as list of column externalIds. In case this filter is not set, all available columns will be returned.",
                            "items": {
                              "type": "string"
                            },
                            "minItems": 1,
                            "maxItems": 200
                          }
                        }
                      },
                      {
                        "properties": {
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sequence data found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "columns",
                    "rows"
                  ],
                  "description": "Data from a sequence",
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "columns": {
                      "type": "array",
                      "description": "Column information in order given by data",
                      "items": {
                        "type": "object",
                        "description": "Column information returned on data requests",
                        "properties": {
                          "externalId": {
                            "type": "string",
                            "example": "DPS1",
                            "description": "User provided column identifier (Unique for a given sequence)"
                          },
                          "name": {
                            "type": "string",
                            "example": "Depth sensor 1",
                            "description": "Human readable name of the column"
                          },
                          "valueType": {
                            "type": "string",
                            "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                            "default": "DOUBLE",
                            "enum": [
                              "STRING",
                              "DOUBLE",
                              "LONG"
                            ]
                          }
                        }
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "List of row information",
                      "items": {
                        "type": "object",
                        "description": "A single row of datapoints",
                        "required": [
                          "rowNumber",
                          "values"
                        ],
                        "properties": {
                          "rowNumber": {
                            "type": "integer",
                            "description": "The row number for this row",
                            "example": 1,
                            "minimum": 1,
                            "format": "int64"
                          },
                          "values": {
                            "type": "array",
                            "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                            "items": {
                              "type": "object",
                              "description": "Json element of type corresponding to the column type. May include NULL!",
                              "example": 1000123
                            },
                            "minItems": 1,
                            "maxItems": 200
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "example": {
                    "id": 1112,
                    "externalId": "DL/DRILL412/20190103/T3",
                    "columns": [
                      {
                        "externalId": "Depth"
                      },
                      {
                        "externalId": "DepthSource"
                      },
                      {
                        "externalId": "PowerSetting"
                      }
                    ],
                    "rows": [
                      {
                        "rowNumber": 1,
                        "values": [
                          23331.3,
                          "s2",
                          61
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:READ"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "const rows = await client.sequences.retrieveRows({ externalId: 'sequence1' }).autoPagingToArray({ limit: 100 });"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "res = client.sequences.data.retrieve(id=0, start=0, end=None)\ntuples = [(r,v) for r,v in res.items()] # You can use this iterator in for loops and list comprehensions,\nsingle_value = res[23] # ... get the values at a single row number,\nclient.l = res.get_column(external_id='columnExtId') # ... get the array of values for a specific column,\ndf = res.to_pandas() # ... or convert the result to a dataframe\n"
          }
        ]
      }
    },
    "/api/v1/projects/{project}/sequences/data/delete": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "Delete rows",
        "description": "Deletes the given rows of the sequence. All columns are affected.",
        "operationId": "deleteSequenceData",
        "requestBody": {
          "description": "Indicate the sequences and the rows where data should be deleted",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Parameters describing datapoints to be deleted",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "title": "Select by Id",
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "rows"
                              ],
                              "description": "rows to delete from a sequence",
                              "properties": {
                                "rows": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "example": 1,
                                    "format": "int64"
                                  },
                                  "minItems": 1,
                                  "maxItems": 10000
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "title": "Select by ExternalId",
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "rows"
                              ],
                              "description": "rows to delete from a sequence",
                              "properties": {
                                "rows": {
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "example": 1,
                                    "format": "int64"
                                  },
                                  "minItems": 1,
                                  "maxItems": 10000
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "The project name.",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "sequencesAcl:WRITE"
        ],
        "x-code-samples": [
          {
            "lang": "JavaScript",
            "label": "JavaScript SDK",
            "source": "await client.sequences.deleteRows([{ id: 32423849, rows: [1,2,3] }]);"
          },
          {
            "lang": "Python",
            "label": "Python SDK",
            "source": "client.sequences.data.delete(id=0, rows=[1,2,42])\n"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "description": "An admin can create API keys in the Cognite console.",
        "name": "api-key",
        "in": "header"
      },
      "token": {
        "type": "http",
        "description": "Human users log in via an OpenId/OAuth flow. Use the /login/redirect flow to obtain a bearer access token. Use a header key of 'Authorization' with a value of 'Bearer $accesstoken'",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "IgnoreUnknownIdsField": {
        "type": "object",
        "properties": {
          "ignoreUnknownIds": {
            "description": "Ignore IDs and external IDs that are not found",
            "type": "boolean",
            "default": false
          }
        }
      },
      "DataLong": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "example": [
              23872937137,
              1238712837,
              128371973
            ],
            "minItems": 1,
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "description": "Cognite API error.",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code.",
            "format": "int32",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message.",
            "example": "Could not authenticate."
          },
          "missing": {
            "type": "array",
            "description": "List of lookup objects that do not match any results.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "duplicated": {
            "type": "array",
            "description": "List of objects that are not unique.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "ObjectPatch": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "oneOf": [
          {
            "title": "set",
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "uniqueItems": true,
                "type": "object",
                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              }
            }
          },
          {
            "title": "add/remove",
            "type": "object",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "object",
                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "description": "Remove the key-value pairs with the specified keys.",
                "example": [
                  "value1",
                  "value2"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ObjectPatchSet": {
        "title": "set",
        "type": "object",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "uniqueItems": true,
            "type": "object",
            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          }
        }
      },
      "ObjectPatchAddRemove": {
        "title": "add/remove",
        "type": "object",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "object",
            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "description": "Remove the key-value pairs with the specified keys.",
            "example": [
              "value1",
              "value2"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArrayPatchLongSet": {
        "title": "set",
        "type": "object",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ArrayPatchLongAddOrRemove": {
        "title": "add/remove",
        "type": "object",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ArrayPatchLong": {
        "type": "object",
        "oneOf": [
          {
            "title": "set",
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          {
            "title": "add/remove",
            "type": "object",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        ],
        "description": "Change that will be applied to the array."
      },
      "JsonArrayInt64": {
        "type": "string",
        "format": "jsonArray(int64)",
        "example": [
          1238712837,
          238712361376,
          23786237623
        ]
      },
      "EpochTimestamp": {
        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
        "type": "integer",
        "minimum": 0,
        "format": "int64"
      },
      "EpochTimestampRange": {
        "description": "Range between two timestamps.",
        "type": "object",
        "properties": {
          "max": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "min": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "Partition": {
        "type": "object",
        "properties": {
          "partition": {
            "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
            "type": "string",
            "example": "1/10"
          }
        }
      },
      "Cursor": {
        "description": "Cursor for paging through results",
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string",
            "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
          }
        }
      },
      "SetLongField": {
        "type": "object",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetStringField": {
        "type": "object",
        "title": "set",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "type": "string"
          }
        }
      },
      "RemoveField": {
        "title": "remove",
        "type": "object",
        "required": [
          "setNull"
        ],
        "properties": {
          "setNull": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "SinglePatchLong": {
        "title": "set",
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "title": "remove",
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "SinglePatchString": {
        "title": "set",
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "title": "set",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "string"
              }
            }
          },
          {
            "title": "remove",
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ],
        "description": "Set a new value for the string, or remove the value."
      },
      "SinglePatchRequiredString": {
        "title": "set",
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        },
        "description": "Set a new value for the string.",
        "required": [
          "set"
        ]
      },
      "CogniteInternalId": {
        "description": "A server-generated ID for the object.",
        "type": "integer",
        "minimum": 1,
        "maximum": 9007199254740991,
        "format": "int64"
      },
      "CogniteExternalId": {
        "description": "The external ID provided by the client. Must be unique for the resource type.",
        "type": "string",
        "maxLength": 255,
        "example": "my.known.id"
      },
      "CogniteExternalIdPrefix": {
        "description": "Filter by this (case-sensitive) prefix for the external ID.",
        "type": "string",
        "maxLength": 255,
        "example": "my.known.prefix"
      },
      "AssetName": {
        "type": "string",
        "description": "The name of the asset.",
        "minLength": 1,
        "maxLength": 140
      },
      "AssetDescription": {
        "type": "string",
        "description": "The description of the asset.",
        "maxLength": 500
      },
      "AssetQuery": {
        "type": "string",
        "description": "Whitespace-separated terms to search for in assets. Does a best-effort fuzzy search in relevant fields (currently name and description) for variations of any of the search terms, and orders results by relevance. Uses a different search algorithm than the name and description parameters, and will generally give much better results. Matching and ordering is not guaranteed to be stable over time, and the fields being searched may be extended.",
        "minLength": 1,
        "maxLength": 140
      },
      "AssetMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "AssetSource": {
        "type": "string",
        "maxLength": 128,
        "description": "The source of the asset."
      },
      "AssetInternalId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "AssetExternalId": {
        "type": "object",
        "required": [
          "externalId"
        ],
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          }
        }
      },
      "AssetIdEither": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "DeleteRequest": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                },
                "maxItems": 1000,
                "minItems": 1
              },
              "recursive": {
                "description": "Recursively delete all asset subtrees under the specified IDs.",
                "type": "boolean",
                "default": false
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "ignoreUnknownIds": {
                "description": "Ignore IDs and external IDs that are not found",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "AssetDataIds": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                },
                "maxItems": 1000,
                "minItems": 1
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "ignoreUnknownIds": {
                "description": "Ignore IDs and external IDs that are not found",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "ExternalAsset": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "name": {
            "type": "string",
            "description": "The name of the asset.",
            "minLength": 1,
            "maxLength": 140
          },
          "parentId": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "The description of the asset.",
            "maxLength": 500
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "maxLength": 128,
            "description": "The source of the asset."
          }
        },
        "description": "A representation of a physical asset, for example a factory or a piece of equipment."
      },
      "Asset": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              },
              "name": {
                "type": "string",
                "description": "The name of the asset.",
                "minLength": 1,
                "maxLength": 140
              },
              "parentId": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "The description of the asset.",
                "maxLength": 500
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "maxLength": 128,
                "description": "The source of the asset."
              }
            },
            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "rootId",
              "createdTime",
              "lastUpdatedTime"
            ],
            "properties": {
              "createdTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "lastUpdatedTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "rootId": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "aggregates": {
                "description": "Aggregated metrics of the asset",
                "type": "object",
                "properties": {
                  "childCount": {
                    "type": "integer",
                    "description": "Number of direct descendants for the asset",
                    "format": "int32",
                    "minimum": 0
                  }
                }
              }
            }
          }
        ]
      },
      "AggregateResultItem": {
        "description": "Aggregated metrics of the asset",
        "type": "object",
        "properties": {
          "childCount": {
            "type": "integer",
            "description": "Number of direct descendants for the asset",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "DataAsset": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the asset.",
                      "minLength": 1,
                      "maxLength": 140
                    },
                    "parentId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "maxLength": 128,
                      "description": "The source of the asset."
                    }
                  },
                  "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "rootId",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "rootId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "aggregates": {
                      "description": "Aggregated metrics of the asset",
                      "type": "object",
                      "properties": {
                        "childCount": {
                          "type": "integer",
                          "description": "Number of direct descendants for the asset",
                          "format": "int32",
                          "minimum": 0
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataAssetChange": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes applied to asset",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "name": {
                              "title": "set",
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Set a new value for the string.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "parentId": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "description": "Change the ID of the object.",
                              "required": [
                                "set"
                              ]
                            },
                            "parentExternalId": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              },
                              "description": "Change the external ID of the object.",
                              "required": [
                                "set"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes applied to asset",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "name": {
                              "title": "set",
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Set a new value for the string.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "parentId": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "description": "Change the ID of the object.",
                              "required": [
                                "set"
                              ]
                            },
                            "parentExternalId": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                                  "type": "string",
                                  "maxLength": 255,
                                  "example": "my.known.id"
                                }
                              },
                              "description": "Change the external ID of the object.",
                              "required": [
                                "set"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataExternalAssetItem": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              },
              "name": {
                "type": "string",
                "description": "The name of the asset.",
                "minLength": 1,
                "maxLength": 140
              },
              "parentId": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "The description of the asset.",
                "maxLength": 500
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "maxLength": 128,
                "description": "The source of the asset."
              }
            },
            "description": "A representation of a physical asset, for example a factory or a piece of equipment."
          },
          {
            "type": "object",
            "properties": {
              "parentExternalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "DataExternalAsset": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the asset.",
                      "minLength": 1,
                      "maxLength": 140
                    },
                    "parentId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "maxLength": 128,
                      "description": "The source of the asset."
                    }
                  },
                  "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                },
                {
                  "type": "object",
                  "properties": {
                    "parentExternalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataWithCursorAsset": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the asset.",
                      "minLength": 1,
                      "maxLength": 140
                    },
                    "parentId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "maxLength": 128,
                      "description": "The source of the asset."
                    }
                  },
                  "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "rootId",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "rootId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "aggregates": {
                      "description": "Aggregated metrics of the asset",
                      "type": "object",
                      "properties": {
                        "childCount": {
                          "type": "integer",
                          "description": "Number of direct descendants for the asset",
                          "format": "int32",
                          "minimum": 0
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "The cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next or previous page of results."
      },
      "AggregatedProperty": {
        "type": "string",
        "enum": [
          "childCount"
        ]
      },
      "AggregatedProperties": {
        "type": "object",
        "properties": {
          "aggregatedProperties": {
            "description": "Set of aggregated properties to include",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childCount"
              ]
            }
          }
        }
      },
      "AssetFilter": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "description": "Filter on assets with strict matching.",
            "title": "Filter",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the asset.",
                "minLength": 1,
                "maxLength": 140
              },
              "parentIds": {
                "description": "Return only the direct descendants of the specified assets.",
                "type": "array",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "rootIds": {
                "description": "Return all descendants of the specified root assets.",
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "maxLength": 128,
                "description": "The source of the asset."
              },
              "createdTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "root": {
                "type": "boolean",
                "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              }
            }
          },
          "limit": {
            "description": "Limits the number of results to return.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetListScope": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "description": "Filter on assets with strict matching.",
                "title": "Filter",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the asset.",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "parentIds": {
                    "description": "Return only the direct descendants of the specified assets.",
                    "type": "array",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "rootIds": {
                    "description": "Return all descendants of the specified root assets.",
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "externalId"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The source of the asset."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "root": {
                    "type": "boolean",
                    "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
                  },
                  "externalIdPrefix": {
                    "description": "Filter by this (case-sensitive) prefix for the external ID.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.prefix"
                  }
                }
              },
              "limit": {
                "description": "Limits the number of results to return.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "description": "Cursor for paging through results",
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "aggregatedProperties": {
                "description": "Set of aggregated properties to include",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "childCount"
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partition": {
                "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                "type": "string",
                "example": "1/10"
              }
            }
          }
        ]
      },
      "AssetSearchFilter": {
        "description": "Search request with filter capabilities.",
        "example": {
          "filter": {
            "parentIds": [
              1293812938,
              293823982938
            ]
          },
          "search": {
            "name": "flow",
            "description": "upstream"
          }
        },
        "allOf": [
          {
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "description": "Filter on assets with strict matching.",
                "title": "Filter",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the asset.",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "parentIds": {
                    "description": "Return only the direct descendants of the specified assets.",
                    "type": "array",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "rootIds": {
                    "description": "Return all descendants of the specified root assets.",
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "externalId"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The source of the asset."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "root": {
                    "type": "boolean",
                    "description": "Whether the filtered assets are root assets, or not. Set to True to only list root assets."
                  },
                  "externalIdPrefix": {
                    "description": "Filter by this (case-sensitive) prefix for the external ID.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.prefix"
                  }
                }
              },
              "limit": {
                "description": "Limits the number of results to return.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "title": "Search",
                "description": "Fulltext search for assets.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the asset.",
                    "minLength": 1,
                    "maxLength": 140
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the asset.",
                    "maxLength": 500
                  },
                  "query": {
                    "type": "string",
                    "description": "Whitespace-separated terms to search for in assets. Does a best-effort fuzzy search in relevant fields (currently name and description) for variations of any of the search terms, and orders results by relevance. Uses a different search algorithm than the name and description parameters, and will generally give much better results. Matching and ordering is not guaranteed to be stable over time, and the fields being searched may be extended.",
                    "minLength": 1,
                    "maxLength": 140
                  }
                }
              }
            }
          }
        ]
      },
      "AssetSearch": {
        "type": "object",
        "properties": {
          "search": {
            "type": "object",
            "title": "Search",
            "description": "Fulltext search for assets.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the asset.",
                "minLength": 1,
                "maxLength": 140
              },
              "description": {
                "type": "string",
                "description": "The description of the asset.",
                "maxLength": 500
              },
              "query": {
                "type": "string",
                "description": "Whitespace-separated terms to search for in assets. Does a best-effort fuzzy search in relevant fields (currently name and description) for variations of any of the search terms, and orders results by relevance. Uses a different search algorithm than the name and description parameters, and will generally give much better results. Matching and ordering is not guaranteed to be stable over time, and the fields being searched may be extended.",
                "minLength": 1,
                "maxLength": 140
              }
            }
          }
        }
      },
      "AssetChange": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes applied to asset",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "name": {
                        "title": "set",
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Set a new value for the string.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "parentId": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "description": "Change the ID of the object.",
                        "required": [
                          "set"
                        ]
                      },
                      "parentExternalId": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          }
                        },
                        "description": "Change the external ID of the object.",
                        "required": [
                          "set"
                        ]
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes applied to asset",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "name": {
                        "title": "set",
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Set a new value for the string.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "parentId": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "description": "Change the ID of the object.",
                        "required": [
                          "set"
                        ]
                      },
                      "parentExternalId": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          }
                        },
                        "description": "Change the external ID of the object.",
                        "required": [
                          "set"
                        ]
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "AssetChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes applied to asset",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "name": {
                    "title": "set",
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Set a new value for the string.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "parentId": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "description": "Change the ID of the object.",
                    "required": [
                      "set"
                    ]
                  },
                  "parentExternalId": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "description": "The external ID provided by the client. Must be unique for the resource type.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.id"
                      }
                    },
                    "description": "Change the external ID of the object.",
                    "required": [
                      "set"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "AssetChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes applied to asset",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "name": {
                    "title": "set",
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Set a new value for the string.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "parentId": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "description": "Change the ID of the object.",
                    "required": [
                      "set"
                    ]
                  },
                  "parentExternalId": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "description": "The external ID provided by the client. Must be unique for the resource type.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "my.known.id"
                      }
                    },
                    "description": "Change the external ID of the object.",
                    "required": [
                      "set"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "AssetPatch": {
        "type": "object",
        "description": "Changes applied to asset",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "name": {
                "title": "set",
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                },
                "description": "Set a new value for the string.",
                "required": [
                  "set"
                ]
              },
              "description": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "metadata": {
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with the specified keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "source": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "parentId": {
                "type": "object",
                "properties": {
                  "set": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                },
                "description": "Change the ID of the object.",
                "required": [
                  "set"
                ]
              },
              "parentExternalId": {
                "type": "object",
                "properties": {
                  "set": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                },
                "description": "Change the external ID of the object.",
                "required": [
                  "set"
                ]
              }
            }
          }
        }
      },
      "SinglePatchRequiredInternalId": {
        "type": "object",
        "properties": {
          "set": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        },
        "description": "Change the ID of the object.",
        "required": [
          "set"
        ]
      },
      "SinglePatchRequiredExternalId": {
        "type": "object",
        "properties": {
          "set": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          }
        },
        "description": "Change the external ID of the object.",
        "required": [
          "set"
        ]
      },
      "InternalId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "ExternalId": {
        "type": "object",
        "required": [
          "externalId"
        ],
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          }
        }
      },
      "DataEvent": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "startTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataExternalEvent": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                },
                "startTime": {
                  "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "endTime": {
                  "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "type": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "Type of the event, e.g 'failure'."
                },
                "subtype": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "Subtype of the event, e.g 'electrical'."
                },
                "description": {
                  "maxLength": 500,
                  "type": "string",
                  "description": "Textual description of the event."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "assetIds": {
                  "type": "array",
                  "minItems": 0,
                  "maxItems": 10000,
                  "uniqueItems": true,
                  "description": "Asset IDs of related equipment that this event relates to.",
                  "items": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of this event."
                }
              },
              "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataEventChange": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "startTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "type": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "subtype": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "startTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "type": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "subtype": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "EitherId": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "EventDataIds": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                },
                "maxItems": 1000,
                "minItems": 1
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "ignoreUnknownIds": {
                "description": "Ignore IDs and external IDs that are not found",
                "type": "boolean",
                "default": false
              }
            }
          }
        ]
      },
      "DataWithCursorEvent": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "startTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "EventMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Event": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              },
              "startTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "endTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "type": {
                "maxLength": 64,
                "type": "string",
                "description": "Type of the event, e.g 'failure'."
              },
              "subtype": {
                "maxLength": 64,
                "type": "string",
                "description": "Subtype of the event, e.g 'electrical'."
              },
              "description": {
                "maxLength": 500,
                "type": "string",
                "description": "Textual description of the event."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "uniqueItems": true,
                "description": "Asset IDs of related equipment that this event relates to.",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              }
            },
            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "createdTime",
              "lastUpdatedTime"
            ],
            "properties": {
              "lastUpdatedTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "createdTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "InternalEvent": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "startTime": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "endTime": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "type": {
            "maxLength": 64,
            "type": "string",
            "description": "Type of the event, e.g 'failure'."
          },
          "subtype": {
            "maxLength": 64,
            "type": "string",
            "description": "Subtype of the event, e.g 'electrical'."
          },
          "description": {
            "maxLength": 500,
            "type": "string",
            "description": "Textual description of the event."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "uniqueItems": true,
            "description": "Asset IDs of related equipment that this event relates to.",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          }
        },
        "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
      },
      "ExternalEvent": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "startTime": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "endTime": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "type": {
            "maxLength": 64,
            "type": "string",
            "description": "Type of the event, e.g 'failure'."
          },
          "subtype": {
            "maxLength": 64,
            "type": "string",
            "description": "Subtype of the event, e.g 'electrical'."
          },
          "description": {
            "maxLength": 500,
            "type": "string",
            "description": "Textual description of the event."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "minItems": 0,
            "maxItems": 10000,
            "uniqueItems": true,
            "description": "Asset IDs of related equipment that this event relates to.",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          }
        },
        "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
      },
      "EventFilterRequest": {
        "description": "Filter request for events. Filters exact field matching or timestamp ranges inclusive min and max.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "filter": {
                "description": "Filter on events filter with exact match",
                "type": "object",
                "properties": {
                  "startTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "endTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 5000,
                    "uniqueItems": true,
                    "description": "Asset IDs of related equipment that this event relates to.",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "rootAssetIds": {
                    "type": "array",
                    "uniqueItems": true,
                    "description": "The IDs of the root assets that the related assets should be children of.",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "externalId"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "type": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The event type"
                  },
                  "subtype": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The event subtype"
                  },
                  "createdTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "Filter by this (case-sensitive) prefix for the external ID.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.prefix"
                  }
                }
              },
              "limit": {
                "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              },
              "sort": {
                "description": "Sort by array of selected fields. Syntax: `[\"<fieldname>:asc|desc\"]`. Default sort order is `asc` with short syntax: `[\"<fieldname>\"]`. \nFilter accepts the following field names: startTime, endTime, createdTime, lastUpdatedTime. \nPartitions are done independently of sorting, there is no guarantee on sort order between elements from different partitions.\n",
                "example": [
                  "endTime:desc"
                ],
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Cursor for paging through results",
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partition": {
                "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                "type": "string",
                "example": "1/10"
              }
            }
          }
        ]
      },
      "EventChange": {
        "type": "object",
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "startTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "type": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "subtype": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "startTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "type": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "subtype": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "EventChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "startTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "type": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "subtype": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "EventChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "startTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "type": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "subtype": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "EventPatch": {
        "type": "object",
        "description": "Changes will be applied to event.",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "startTime": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              },
              "endTime": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              },
              "description": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "metadata": {
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with the specified keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "assetIds": {
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to the array."
              },
              "source": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "type": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "subtype": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              }
            }
          }
        }
      },
      "EventFilter": {
        "description": "Filter on events filter with exact match",
        "type": "object",
        "properties": {
          "startTime": {
            "description": "Range between two timestamps.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "endTime": {
            "description": "Range between two timestamps.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 5000,
            "uniqueItems": true,
            "description": "Asset IDs of related equipment that this event relates to.",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "rootAssetIds": {
            "type": "array",
            "uniqueItems": true,
            "description": "The IDs of the root assets that the related assets should be children of.",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "externalId"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          },
          "type": {
            "maxLength": 64,
            "type": "string",
            "description": "The event type"
          },
          "subtype": {
            "maxLength": 64,
            "type": "string",
            "description": "The event subtype"
          },
          "createdTime": {
            "description": "Range between two timestamps.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Range between two timestamps.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "externalIdPrefix": {
            "description": "Filter by this (case-sensitive) prefix for the external ID.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.prefix"
          }
        }
      },
      "EventSearch": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "text to search in description field across events"
          }
        }
      },
      "EventSearchRequest": {
        "description": "Filter on events filter with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filter on events filter with exact match",
            "type": "object",
            "properties": {
              "startTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "endTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 5000,
                "uniqueItems": true,
                "description": "Asset IDs of related equipment that this event relates to.",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "rootAssetIds": {
                "type": "array",
                "uniqueItems": true,
                "description": "The IDs of the root assets that the related assets should be children of.",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "type": {
                "maxLength": 64,
                "type": "string",
                "description": "The event type"
              },
              "subtype": {
                "maxLength": 64,
                "type": "string",
                "description": "The event subtype"
              },
              "createdTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              }
            }
          },
          "search": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "maxLength": 500,
                "description": "text to search in description field across events"
              }
            }
          },
          "limit": {
            "description": "<- Limits the maximum number of results to be returned by single request. Request may contain less results than request limit.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "startTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "EventWithCursorResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "required": [
              "items"
            ],
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "startTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              },
              "nextCursor": {
                "type": "string",
                "description": "Cursor to get the next page of results (if available)."
              }
            },
            "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
          }
        ]
      },
      "FileInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "FileExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          }
        }
      },
      "FileIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "FileName": {
        "type": "string",
        "description": "Name of the file.",
        "maxLength": 256
      },
      "MimeType": {
        "maxLength": 256,
        "type": "string",
        "example": "image/jpeg",
        "description": "File type. E.g. text/plain, application/pdf, .."
      },
      "FileSource": {
        "maxLength": 128,
        "type": "string",
        "description": "The source of the file."
      },
      "ExternalFilesMetadata": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "name": {
            "type": "string",
            "description": "Name of the file.",
            "maxLength": 256
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of the file."
          },
          "mimeType": {
            "maxLength": 256,
            "type": "string",
            "example": "image/jpeg",
            "description": "File type. E.g. text/plain, application/pdf, .."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "maxItems": 100,
            "minItems": 1
          },
          "sourceCreatedTime": {
            "description": "The timestamp for when the file was originally created in the source system.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "sourceModifiedTime": {
            "description": "The timestamp for when the file was last modified in the source system.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "FilesMetadata": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              },
              "name": {
                "type": "string",
                "description": "Name of the file.",
                "maxLength": 256
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of the file."
              },
              "mimeType": {
                "maxLength": 256,
                "type": "string",
                "example": "image/jpeg",
                "description": "File type. E.g. text/plain, application/pdf, .."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "maxItems": 100,
                "minItems": 1
              },
              "sourceCreatedTime": {
                "description": "The timestamp for when the file was originally created in the source system.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "sourceModifiedTime": {
                "description": "The timestamp for when the file was last modified in the source system.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "uploaded",
              "createdTime",
              "lastUpdatedTime"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "uploaded": {
                "type": "boolean",
                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                "example": true
              },
              "uploadedTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "createdTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "lastUpdatedTime": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "FilesSearchFilter": {
        "description": "Filter on files with exact match",
        "allOf": [
          {
            "description": "Filter on files with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the file.",
                    "maxLength": 256
                  },
                  "mimeType": {
                    "maxLength": 256,
                    "type": "string",
                    "example": "image/jpeg",
                    "description": "File type. E.g. text/plain, application/pdf, .."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Only include files that reference these specific asset IDs.",
                    "example": "[363848954441724, 793045462540095, 1261042166839739]",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "rootAssetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Internal or external IDs of the root assets that the related assets should be a descendant of (or match).",
                    "example": [
                      {
                        "id": 123456789
                      },
                      {
                        "externalId": "system 99 external Id 1234"
                      }
                    ],
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "externalId"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "The external ID provided by the client. Must be unique for the resource type.",
                              "type": "string",
                              "maxLength": 255,
                              "example": "my.known.id"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "uploadedTime": {
                    "description": "Range between two timestamps.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "sourceCreatedTime": {
                    "description": "Filter for files where the sourceCreatedTime field has been set and is within the specified range.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "sourceModifiedTime": {
                    "description": "Filter for files where the sourceModifiedTime field has been set and is within the specified range.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "Filter by this (case-sensitive) prefix for the external ID.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.prefix"
                  },
                  "uploaded": {
                    "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "limit": {
                "description": "<- Maximum number of items that the client want to get back.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the file.",
                    "maxLength": 256
                  }
                }
              }
            }
          }
        ]
      },
      "DataFileChange": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Changes will be applied to file.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "mimeType": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            },
                            "sourceCreatedTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "sourceModifiedTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Changes will be applied to file.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "source": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "mimeType": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            },
                            "sourceCreatedTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "sourceModifiedTime": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "FileChangeUpdate": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              },
              {
                "type": "object",
                "description": "Changes will be applied to file.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "mimeType": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      },
                      "sourceCreatedTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "sourceModifiedTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              },
              {
                "type": "object",
                "description": "Changes will be applied to file.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "source": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "mimeType": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      },
                      "sourceCreatedTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "sourceModifiedTime": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "FileChangeUpdateById": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "description": "Changes will be applied to file.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "mimeType": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  },
                  "sourceCreatedTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "sourceModifiedTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "FileChangeUpdateByExternalId": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          },
          {
            "type": "object",
            "description": "Changes will be applied to file.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "source": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "mimeType": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  },
                  "sourceCreatedTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "sourceModifiedTime": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "DataFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 256
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 256,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    },
                    "sourceCreatedTime": {
                      "description": "The timestamp for when the file was originally created in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "sourceModifiedTime": {
                      "description": "The timestamp for when the file was last modified in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileLink": {
        "type": "object",
        "properties": {
          "downloadUrl": {
            "type": "string"
          }
        }
      },
      "DataExternalFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the file.",
                  "maxLength": 256
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of the file."
                },
                "mimeType": {
                  "maxLength": 256,
                  "type": "string",
                  "example": "image/jpeg",
                  "description": "File type. E.g. text/plain, application/pdf, .."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "assetIds": {
                  "type": "array",
                  "items": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  },
                  "maxItems": 100,
                  "minItems": 1
                },
                "sourceCreatedTime": {
                  "description": "The timestamp for when the file was originally created in the source system.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "sourceModifiedTime": {
                  "description": "The timestamp for when the file was last modified in the source system.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "FileDataIds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "FileLinkIds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            },
            "maxItems": 100,
            "minItems": 1
          }
        }
      },
      "FileChange": {
        "type": "object",
        "description": "Changes will be applied to file.",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "source": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "mimeType": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "metadata": {
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with the specified keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "assetIds": {
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to the array."
              },
              "sourceCreatedTime": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              },
              "sourceModifiedTime": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "DataWithCursor": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 256
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 256,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    },
                    "sourceCreatedTime": {
                      "description": "The timestamp for when the file was originally created in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "sourceModifiedTime": {
                      "description": "The timestamp for when the file was last modified in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of results"
      },
      "FilesMetadataField": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "FileFilter": {
        "description": "Filter on files with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the file.",
                "maxLength": 256
              },
              "mimeType": {
                "maxLength": 256,
                "type": "string",
                "example": "image/jpeg",
                "description": "File type. E.g. text/plain, application/pdf, .."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Only include files that reference these specific asset IDs.",
                "example": "[363848954441724, 793045462540095, 1261042166839739]",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "rootAssetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Internal or external IDs of the root assets that the related assets should be a descendant of (or match).",
                "example": [
                  {
                    "id": 123456789
                  },
                  {
                    "externalId": "system 99 external Id 1234"
                  }
                ],
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "createdTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "uploadedTime": {
                "description": "Range between two timestamps.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "sourceCreatedTime": {
                "description": "Filter for files where the sourceCreatedTime field has been set and is within the specified range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "sourceModifiedTime": {
                "description": "Filter for files where the sourceModifiedTime field has been set and is within the specified range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              },
              "uploaded": {
                "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                "type": "boolean",
                "example": true
              }
            }
          },
          "limit": {
            "description": "<- Maximum number of items that the client want to get back.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetIds": {
        "type": "array",
        "minItems": 1,
        "maxItems": 100,
        "uniqueItems": true,
        "description": "Only include files that reference these specific asset IDs.",
        "example": "[363848954441724, 793045462540095, 1261042166839739]",
        "items": {
          "description": "A server-generated ID for the object.",
          "type": "integer",
          "minimum": 1,
          "maximum": 9007199254740991,
          "format": "int64"
        }
      },
      "RootAssetIds": {
        "type": "array",
        "minItems": 1,
        "maxItems": 100,
        "uniqueItems": true,
        "description": "Internal or external IDs of the root assets that the related assets should be a descendant of (or match).",
        "example": [
          {
            "id": 123456789
          },
          {
            "externalId": "system 99 external Id 1234"
          }
        ],
        "items": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "externalId"
              ],
              "properties": {
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                }
              }
            }
          ]
        }
      },
      "NextCursor": {
        "type": "string",
        "description": "Cursor to get the next page of results (if available)."
      },
      "NextCursorData": {
        "type": "object",
        "properties": {
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        }
      },
      "CreatedTime": {
        "type": "integer",
        "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
        "format": "int64",
        "example": 0
      },
      "DataIdentifier": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "DataIdentifiers": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of ID objects",
            "items": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              }
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "Model3D": {
        "type": "object",
        "required": [
          "name",
          "id",
          "createdTime"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the model.",
            "example": "My Model"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the model.",
            "format": "int64",
            "example": 1000
          },
          "createdTime": {
            "type": "integer",
            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
            "format": "int64",
            "example": 0
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "Model3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "createdTime"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the model.",
                  "example": "My Model"
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the model.",
                  "format": "int64",
                  "example": 1000
                },
                "createdTime": {
                  "type": "integer",
                  "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                  "format": "int64",
                  "example": 0
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "CreateModel3D": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The name of the model.",
            "example": "My Model"
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "UpdateModel3D": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                      }
                    }
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "SetModelNameField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "Revision3D": {
        "type": "object",
        "required": [
          "id",
          "fileId",
          "published",
          "status",
          "assetMappingCount",
          "createdTime"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the revision.",
            "format": "int64",
            "example": 1000
          },
          "fileId": {
            "type": "integer",
            "description": "The file id.",
            "format": "int64",
            "example": 1000
          },
          "published": {
            "type": "boolean",
            "description": "True if the revision is marked as published.",
            "default": false
          },
          "rotation": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          },
          "camera": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          },
          "status": {
            "type": "string",
            "enum": [
              "Queued",
              "Processing",
              "Done",
              "Failed"
            ],
            "description": "The status of the revision.",
            "example": "Done"
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "thumbnailThreedFileId": {
            "type": "integer",
            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
            "format": "int64",
            "example": 1000
          },
          "thumbnailURL": {
            "type": "string",
            "description": "The URL of a thumbnail for the revision.",
            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
          },
          "assetMappingCount": {
            "type": "integer",
            "description": "The number of asset mappings for this revision.",
            "format": "int64",
            "example": 0
          },
          "createdTime": {
            "type": "integer",
            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
            "format": "int64",
            "example": 0
          }
        }
      },
      "Metadata3D": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "NodeProperties3D": {
        "type": "object",
        "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
        "example": {
          "category1": {
            "property1": "value1",
            "property2": "value2"
          },
          "category2": {
            "property1": "value1",
            "property2": "value2"
          }
        },
        "additionalProperties": {
          "description": "Property category.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "Revision3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "fileId",
                "published",
                "status",
                "assetMappingCount",
                "createdTime"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the revision.",
                  "format": "int64",
                  "example": 1000
                },
                "fileId": {
                  "type": "integer",
                  "description": "The file id.",
                  "format": "int64",
                  "example": 1000
                },
                "published": {
                  "type": "boolean",
                  "description": "True if the revision is marked as published.",
                  "default": false
                },
                "rotation": {
                  "maxItems": 3,
                  "minItems": 3,
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                    "format": "double"
                  }
                },
                "camera": {
                  "type": "object",
                  "properties": {
                    "target": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "description": "Initial camera target.",
                      "items": {
                        "type": "number",
                        "format": "double"
                      }
                    },
                    "position": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "description": "Initial camera position.",
                      "items": {
                        "type": "number",
                        "format": "double"
                      }
                    }
                  },
                  "description": "Initial camera position and target."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "Queued",
                    "Processing",
                    "Done",
                    "Failed"
                  ],
                  "description": "The status of the revision.",
                  "example": "Done"
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "thumbnailThreedFileId": {
                  "type": "integer",
                  "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                  "format": "int64",
                  "example": 1000
                },
                "thumbnailURL": {
                  "type": "string",
                  "description": "The URL of a thumbnail for the revision.",
                  "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                },
                "assetMappingCount": {
                  "type": "integer",
                  "description": "The number of asset mappings for this revision.",
                  "format": "int64",
                  "example": 0
                },
                "createdTime": {
                  "type": "integer",
                  "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                  "format": "int64",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "CreateRevision3D": {
        "type": "object",
        "required": [
          "fileId"
        ],
        "properties": {
          "published": {
            "type": "boolean",
            "description": "True if the revision is marked as published.",
            "default": false
          },
          "rotation": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "camera": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          },
          "fileId": {
            "type": "integer",
            "description": "The file id to a file uploaded to Cognite's Files API. Can only be set on revision creation, and can never be updated.",
            "format": "int64"
          }
        }
      },
      "UpdateRevision3D": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "published": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "boolean",
                        "description": "True if the revision is marked as published."
                      }
                    }
                  },
                  "rotation": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "maxItems": 3,
                        "minItems": 3,
                        "type": "array",
                        "items": {
                          "type": "number",
                          "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                          "format": "double"
                        }
                      }
                    }
                  },
                  "camera": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "object",
                        "properties": {
                          "target": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "description": "Initial camera target.",
                            "items": {
                              "type": "number",
                              "format": "double"
                            }
                          },
                          "position": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "description": "Initial camera position.",
                            "items": {
                              "type": "number",
                              "format": "double"
                            }
                          }
                        },
                        "description": "Initial camera position and target."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "Versioned3DFile": {
        "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
        "type": "object",
        "required": [
          "version",
          "fileId"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "Version of the file format.",
            "format": "int64",
            "example": 1
          },
          "fileId": {
            "type": "integer",
            "description": "File ID. Use /3d/files/{id} to retrieve the file.",
            "format": "int64",
            "example": 1000
          }
        }
      },
      "RevisionCameraProperties": {
        "type": "object",
        "properties": {
          "target": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "description": "Initial camera target.",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "position": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "description": "Initial camera position.",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "description": "Initial camera position and target."
      },
      "SetRevisionRotation": {
        "type": "object",
        "properties": {
          "set": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          }
        }
      },
      "SetRevisionCameraProperties": {
        "type": "object",
        "properties": {
          "set": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          }
        }
      },
      "Node3D": {
        "type": "object",
        "required": [
          "id",
          "treeIndex",
          "depth",
          "name",
          "subtreeSize",
          "boundingBox"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1000
          },
          "treeIndex": {
            "type": "integer",
            "minimum": 0,
            "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
            "format": "int64",
            "example": 3
          },
          "parentId": {
            "type": "integer",
            "description": "The parent of the node, null if it is the root node.",
            "format": "int64",
            "example": 2
          },
          "depth": {
            "type": "integer",
            "description": "The depth of the node in the tree, starting from 0 at the root node.",
            "format": "int64",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "The name of the node.",
            "example": "Node name"
          },
          "subtreeSize": {
            "type": "integer",
            "description": "The number of descendants of the node, plus one (counting itself).",
            "format": "int64",
            "example": 4
          },
          "properties": {
            "type": "object",
            "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
            "example": {
              "category1": {
                "property1": "value1",
                "property2": "value2"
              },
              "category2": {
                "property1": "value1",
                "property2": "value2"
              }
            },
            "additionalProperties": {
              "description": "Property category.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "boundingBox": {
            "type": "object",
            "required": [
              "min",
              "max"
            ],
            "properties": {
              "max": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The maximal coordinates of the bounding box.",
                  "format": "double"
                }
              },
              "min": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The minimal coordinates of the bounding box.",
                  "format": "double"
                }
              }
            },
            "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
          }
        }
      },
      "Node3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "treeIndex",
                "depth",
                "name",
                "subtreeSize",
                "boundingBox"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the node.",
                  "format": "int64",
                  "example": 1000
                },
                "treeIndex": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                  "format": "int64",
                  "example": 3
                },
                "parentId": {
                  "type": "integer",
                  "description": "The parent of the node, null if it is the root node.",
                  "format": "int64",
                  "example": 2
                },
                "depth": {
                  "type": "integer",
                  "description": "The depth of the node in the tree, starting from 0 at the root node.",
                  "format": "int64",
                  "example": 2
                },
                "name": {
                  "type": "string",
                  "description": "The name of the node.",
                  "example": "Node name"
                },
                "subtreeSize": {
                  "type": "integer",
                  "description": "The number of descendants of the node, plus one (counting itself).",
                  "format": "int64",
                  "example": 4
                },
                "properties": {
                  "type": "object",
                  "description": "Properties extracted from 3D model, with property categories containing key/value string pairs.",
                  "example": {
                    "category1": {
                      "property1": "value1",
                      "property2": "value2"
                    },
                    "category2": {
                      "property1": "value1",
                      "property2": "value2"
                    }
                  },
                  "additionalProperties": {
                    "description": "Property category.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "boundingBox": {
                  "type": "object",
                  "required": [
                    "min",
                    "max"
                  ],
                  "properties": {
                    "max": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The maximal coordinates of the bounding box.",
                        "format": "double"
                      }
                    },
                    "min": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The minimal coordinates of the bounding box.",
                        "format": "double"
                      }
                    }
                  },
                  "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                }
              }
            }
          }
        }
      },
      "Node3DIds": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the node.",
                  "format": "int64",
                  "example": 1000
                }
              }
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "Node3DId": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1000
          }
        }
      },
      "BoundingBox3D": {
        "type": "object",
        "required": [
          "min",
          "max"
        ],
        "properties": {
          "max": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "The maximal coordinates of the bounding box.",
              "format": "double"
            }
          },
          "min": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "The minimal coordinates of the bounding box.",
              "format": "double"
            }
          }
        },
        "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
      },
      "AssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId",
          "treeIndex",
          "subtreeSize"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          },
          "treeIndex": {
            "type": "integer",
            "minimum": 0,
            "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
            "format": "int64",
            "example": 5
          },
          "subtreeSize": {
            "type": "integer",
            "description": "The number of nodes in the subtree of this node (this number included the node itself).",
            "format": "int64",
            "example": 7
          }
        }
      },
      "AssetMapping3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "nodeId",
                "assetId",
                "treeIndex",
                "subtreeSize"
              ],
              "properties": {
                "nodeId": {
                  "type": "integer",
                  "description": "The ID of the node.",
                  "format": "int64",
                  "example": 1003
                },
                "assetId": {
                  "type": "integer",
                  "description": "The ID of the associated asset (Cognite's Assets API).",
                  "format": "int64",
                  "example": 3001
                },
                "treeIndex": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                  "format": "int64",
                  "example": 5
                },
                "subtreeSize": {
                  "type": "integer",
                  "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                  "format": "int64",
                  "example": 7
                }
              }
            }
          }
        }
      },
      "CreateAssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          }
        }
      },
      "DeleteAssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          }
        }
      },
      "AssetMapping3DFilter": {
        "type": "object",
        "properties": {
          "filter": {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "assetIds"
                ],
                "properties": {
                  "assetIds": {
                    "type": "array",
                    "minItems": 0,
                    "maxItems": 100,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "nodeIds"
                ],
                "properties": {
                  "nodeIds": {
                    "type": "array",
                    "minItems": 0,
                    "maxItems": 100,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            ]
          },
          "limit": {
            "description": "Limits the number of results to return.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetMapping3DNodeFilter": {
        "type": "object",
        "required": [
          "nodeIds"
        ],
        "properties": {
          "nodeIds": {
            "type": "array",
            "minItems": 0,
            "maxItems": 100,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "AssetMapping3DAssetFilter": {
        "type": "object",
        "required": [
          "assetIds"
        ],
        "properties": {
          "assetIds": {
            "type": "array",
            "minItems": 0,
            "maxItems": 100,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "UpdateRevision3DThumbnail": {
        "type": "object",
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "type": "integer",
            "description": "File ID of thumbnail file in Files API. _Only JPEG and PNG files are supported_.",
            "format": "int64"
          }
        },
        "description": "Request body for the updateModelRevisionThumbnail endpoint."
      },
      "TimeSeriesResponse": {
        "description": "List of responses. The order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The generated ID for the time series.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The externally supplied ID for the time series."
                },
                "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "unit": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "The asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "The required security categories to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "DatapointsInsertQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "DatapointsWithInternalId",
                  "allOf": [
                    {
                      "required": [
                        "datapoints"
                      ],
                      "properties": {
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                          "items": {
                            "oneOf": [
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "title": "NumericalDatapoint",
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "minimum": 31536000000,
                                    "maximum": 2556144000000,
                                    "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                  },
                                  "value": {
                                    "type": "number",
                                    "minimum": -1e+100,
                                    "maximum": 1e+100,
                                    "description": "The numerical data value of a numerical metric."
                                  }
                                }
                              },
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "title": "StringDatapoint",
                                "properties": {
                                  "timestamp": {
                                    "minimum": 31536000000,
                                    "maximum": 2556140400000,
                                    "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                  },
                                  "value": {
                                    "maxLength": 255,
                                    "type": "string",
                                    "description": "The string data value of a string metric."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "DatapointsWithExternalId",
                  "allOf": [
                    {
                      "required": [
                        "datapoints"
                      ],
                      "properties": {
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                          "items": {
                            "oneOf": [
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "title": "NumericalDatapoint",
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "minimum": 31536000000,
                                    "maximum": 2556144000000,
                                    "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                  },
                                  "value": {
                                    "type": "number",
                                    "minimum": -1e+100,
                                    "maximum": 1e+100,
                                    "description": "The numerical data value of a numerical metric."
                                  }
                                }
                              },
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "title": "StringDatapoint",
                                "properties": {
                                  "timestamp": {
                                    "minimum": 31536000000,
                                    "maximum": 2556140400000,
                                    "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                                  },
                                  "value": {
                                    "maxLength": 255,
                                    "type": "string",
                                    "description": "The string data value of a string metric."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "DatapointsPostDatapoint": {
        "type": "object",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "DatapointsWithInternalId",
            "allOf": [
              {
                "required": [
                  "datapoints"
                ],
                "properties": {
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "title": "NumericalDatapoint",
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "minimum": 31536000000,
                              "maximum": 2556144000000,
                              "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                            },
                            "value": {
                              "type": "number",
                              "minimum": -1e+100,
                              "maximum": 1e+100,
                              "description": "The numerical data value of a numerical metric."
                            }
                          }
                        },
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "title": "StringDatapoint",
                          "properties": {
                            "timestamp": {
                              "minimum": 31536000000,
                              "maximum": 2556140400000,
                              "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                            },
                            "value": {
                              "maxLength": 255,
                              "type": "string",
                              "description": "The string data value of a string metric."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "DatapointsWithExternalId",
            "allOf": [
              {
                "required": [
                  "datapoints"
                ],
                "properties": {
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints. The limit per request is 100000 datapoints.",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "title": "NumericalDatapoint",
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "minimum": 31536000000,
                              "maximum": 2556144000000,
                              "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                            },
                            "value": {
                              "type": "number",
                              "minimum": -1e+100,
                              "maximum": 1e+100,
                              "description": "The numerical data value of a numerical metric."
                            }
                          }
                        },
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "title": "StringDatapoint",
                          "properties": {
                            "timestamp": {
                              "minimum": 31536000000,
                              "maximum": 2556140400000,
                              "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                            },
                            "value": {
                              "maxLength": 255,
                              "type": "string",
                              "description": "The string data value of a string metric."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsInsertProperties": {
        "required": [
          "datapoints"
        ],
        "properties": {
          "datapoints": {
            "type": "array",
            "description": "The list of datapoints. The limit per request is 100000 datapoints.",
            "items": {
              "oneOf": [
                {
                  "required": [
                    "timestamp",
                    "value"
                  ],
                  "title": "NumericalDatapoint",
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "minimum": 31536000000,
                      "maximum": 2556144000000,
                      "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                    },
                    "value": {
                      "type": "number",
                      "minimum": -1e+100,
                      "maximum": 1e+100,
                      "description": "The numerical data value of a numerical metric."
                    }
                  }
                },
                {
                  "required": [
                    "timestamp",
                    "value"
                  ],
                  "type": "object",
                  "title": "StringDatapoint",
                  "properties": {
                    "timestamp": {
                      "minimum": 31536000000,
                      "maximum": 2556140400000,
                      "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
                    },
                    "value": {
                      "maxLength": 255,
                      "type": "string",
                      "description": "The string data value of a string metric."
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "TimestampOrStringStart": {
        "oneOf": [
          {
            "type": "integer",
            "default": 0
          },
          {
            "type": "string"
          }
        ],
        "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
      },
      "TimestampOrStringEnd": {
        "oneOf": [
          {
            "type": "integer"
          },
          {
            "type": "string",
            "default": "now"
          }
        ],
        "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
      },
      "DatapointsMultiQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Parameters describing a query for datapoints.",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "QueryWithInternalId",
                  "allOf": [
                    {
                      "properties": {
                        "start": {
                          "oneOf": [
                            {
                              "type": "integer",
                              "default": 0
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                        },
                        "end": {
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string",
                              "default": "now"
                            }
                          ],
                          "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Return up to this number of datapoints.",
                          "format": "int32"
                        },
                        "aggregates": {
                          "type": "array",
                          "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                          "minItems": 0,
                          "maxItems": 10,
                          "uniqueItems": true,
                          "items": {
                            "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                            "type": "string",
                            "enum": [
                              "average",
                              "max",
                              "min",
                              "count",
                              "sum",
                              "interpolation",
                              "stepInterpolation",
                              "totalVariation",
                              "continuousVariance",
                              "discreteVariance"
                            ]
                          }
                        },
                        "granularity": {
                          "type": "string",
                          "description": "The granularity size and granularity of the aggregates.",
                          "example": "1h"
                        },
                        "includeOutsidePoints": {
                          "type": "boolean",
                          "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                          "default": false
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "QueryWithExternalId",
                  "allOf": [
                    {
                      "properties": {
                        "start": {
                          "oneOf": [
                            {
                              "type": "integer",
                              "default": 0
                            },
                            {
                              "type": "string"
                            }
                          ],
                          "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                        },
                        "end": {
                          "oneOf": [
                            {
                              "type": "integer"
                            },
                            {
                              "type": "string",
                              "default": "now"
                            }
                          ],
                          "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Return up to this number of datapoints.",
                          "format": "int32"
                        },
                        "aggregates": {
                          "type": "array",
                          "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                          "minItems": 0,
                          "maxItems": 10,
                          "uniqueItems": true,
                          "items": {
                            "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                            "type": "string",
                            "enum": [
                              "average",
                              "max",
                              "min",
                              "count",
                              "sum",
                              "interpolation",
                              "stepInterpolation",
                              "totalVariation",
                              "continuousVariance",
                              "discreteVariance"
                            ]
                          }
                        },
                        "granularity": {
                          "type": "string",
                          "description": "The granularity size and granularity of the aggregates.",
                          "example": "1h"
                        },
                        "includeOutsidePoints": {
                          "type": "boolean",
                          "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                          "default": false
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 100
          },
          "start": {
            "oneOf": [
              {
                "type": "integer",
                "default": 0
              },
              {
                "type": "string"
              }
            ],
            "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
          },
          "end": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "default": "now"
              }
            ],
            "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints. Maximum is 100000 non-aggregated data points and 10000 aggregated data points.",
            "format": "int32",
            "default": 100
          },
          "aggregates": {
            "type": "array",
            "description": "Specify the aggregates to return, or an empty array if this sub-query should return datapoints without aggregation. This value overrides a top-level default aggregates list.",
            "minItems": 0,
            "maxItems": 10,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "average",
                "max",
                "min",
                "count",
                "sum",
                "interpolation",
                "stepInterpolation",
                "totalVariation",
                "continuousVariance",
                "discreteVariance"
              ]
            }
          },
          "granularity": {
            "type": "string",
            "description": "The time granularity size and unit to aggregate over.",
            "example": "1h"
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period, and the first one after. This option is useful for interpolating data. It is not available for aggregates.",
            "default": false
          }
        }
      },
      "DatapointsQuery": {
        "type": "object",
        "description": "Parameters describing a query for datapoints.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "QueryWithInternalId",
            "allOf": [
              {
                "properties": {
                  "start": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "default": 0
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                  },
                  "end": {
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string",
                        "default": "now"
                      }
                    ],
                    "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints.",
                    "format": "int32"
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The granularity size and granularity of the aggregates.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                    "default": false
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "QueryWithExternalId",
            "allOf": [
              {
                "properties": {
                  "start": {
                    "oneOf": [
                      {
                        "type": "integer",
                        "default": 0
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
                  },
                  "end": {
                    "oneOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "string",
                        "default": "now"
                      }
                    ],
                    "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints.",
                    "format": "int32"
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The granularity size and granularity of the aggregates.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
                    "default": false
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsQueryProperties": {
        "properties": {
          "start": {
            "oneOf": [
              {
                "type": "integer",
                "default": 0
              },
              {
                "type": "string"
              }
            ],
            "description": "Get datapoints starting from, and including, this time. The format is N[timeunit]-ago where\ntimeunit is w,d,h,m,s. Example: '2d-ago' gets datapoints that are up to 2 days\nold. You can also specify time in milliseconds since epoch. Note that for aggregates, the start time is rounded down to a whole granularity unit (in UTC timezone). Daily granularities (d)\nare rounded to 0:00 AM; hourly granularities (h) to the start of the hour, etc."
          },
          "end": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "default": "now"
              }
            ],
            "description": "Get datapoints up to, but excluding, this point in time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints.",
            "format": "int32"
          },
          "aggregates": {
            "type": "array",
            "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
            "minItems": 0,
            "maxItems": 10,
            "uniqueItems": true,
            "items": {
              "description": "Specify the aggregates to return. Use default if null. If the default is a set of aggregates, specify an empty string to get raw data.",
              "type": "string",
              "enum": [
                "average",
                "max",
                "min",
                "count",
                "sum",
                "interpolation",
                "stepInterpolation",
                "totalVariation",
                "continuousVariance",
                "discreteVariance"
              ]
            }
          },
          "granularity": {
            "type": "string",
            "description": "The granularity size and granularity of the aggregates.",
            "example": "1h"
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period,and the first one after. This option can be useful for interpolating data. It is not available for aggregates.",
            "default": false
          }
        }
      },
      "DatapointsLatestQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of latest queries",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "description": "Describes the latest query.",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "QueryWithInternalId",
                  "allOf": [
                    {
                      "properties": {
                        "before": {
                          "type": "string",
                          "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                          "default": "now"
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "QueryWithExternalId",
                  "allOf": [
                    {
                      "properties": {
                        "before": {
                          "type": "string",
                          "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                          "default": "now"
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "LatestDataBeforeRequest": {
        "type": "object",
        "description": "Describes the latest query.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "QueryWithInternalId",
            "allOf": [
              {
                "properties": {
                  "before": {
                    "type": "string",
                    "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                    "default": "now"
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "QueryWithExternalId",
            "allOf": [
              {
                "properties": {
                  "before": {
                    "type": "string",
                    "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
                    "default": "now"
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "LatestDataPropertyFilter": {
        "properties": {
          "before": {
            "type": "string",
            "description": "Get datapoints before this time. The format is N[timeunit]-ago where timeunit is w,d,h,m,s.\nExample: '2d-ago' gets data that is up to 2 days old. You can also specify time in milliseconds since epoch.",
            "default": "now"
          }
        }
      },
      "DatapointsDeleteQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of delete filters",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "type": "object",
              "description": "Select time series and datapoints to delete.",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "QueryWithInternalId",
                  "allOf": [
                    {
                      "required": [
                        "inclusiveBegin"
                      ],
                      "properties": {
                        "inclusiveBegin": {
                          "description": "The timestamp of first datapoint to delete.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "exclusiveEnd": {
                          "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "QueryWithExternalId",
                  "allOf": [
                    {
                      "required": [
                        "inclusiveBegin"
                      ],
                      "properties": {
                        "inclusiveBegin": {
                          "description": "The timestamp of first datapoint to delete.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "exclusiveEnd": {
                          "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "DatapointsDeleteRequest": {
        "type": "object",
        "description": "Select time series and datapoints to delete.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "QueryWithInternalId",
            "allOf": [
              {
                "required": [
                  "inclusiveBegin"
                ],
                "properties": {
                  "inclusiveBegin": {
                    "description": "The timestamp of first datapoint to delete.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "exclusiveEnd": {
                    "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "QueryWithExternalId",
            "allOf": [
              {
                "required": [
                  "inclusiveBegin"
                ],
                "properties": {
                  "inclusiveBegin": {
                    "description": "The timestamp of first datapoint to delete.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "exclusiveEnd": {
                    "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsDeleteRange": {
        "required": [
          "inclusiveBegin"
        ],
        "properties": {
          "inclusiveBegin": {
            "description": "The timestamp of first datapoint to delete.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "exclusiveEnd": {
            "description": "The timestamp of the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "TimeSeriesLookupById": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of ID objects",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "QueryWithInternalId",
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "QueryWithExternalId",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "TimeSeriesUpdateRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to time series.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "unit": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "assetId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "description": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "securityCategories": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to time series.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "metadata": {
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "unit": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "assetId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "description": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "The change that will be applied to the key."
                            },
                            "securityCategories": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to the array."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "TimeSeriesUpdate": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to time series.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "name": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "unit": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "assetId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "description": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "securityCategories": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to time series.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "name": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "metadata": {
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "unit": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "assetId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "description": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "The change that will be applied to the key."
                      },
                      "securityCategories": {
                        "type": "object",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to the array."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "TimeSeriesUpdateById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to time series.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "name": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "unit": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "assetId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "description": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "securityCategories": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "TimeSeriesUpdateByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to time series.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "name": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "metadata": {
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "unit": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "assetId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "description": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "The change that will be applied to the key."
                  },
                  "securityCategories": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to the array."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "TimeSeriesPatch": {
        "type": "object",
        "description": "Changes will be applied to time series.",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "The change that will be applied to the key."
              },
              "name": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "The change that will be applied to the key."
              },
              "metadata": {
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with the specified keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "unit": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "The change that will be applied to the key."
              },
              "assetId": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "The change that will be applied to the key."
              },
              "description": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "The change that will be applied to the key."
              },
              "securityCategories": {
                "type": "object",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to the array."
              }
            }
          }
        }
      },
      "Aggregate": {
        "type": "string",
        "enum": [
          "average",
          "max",
          "min",
          "count",
          "sum",
          "interpolation",
          "stepInterpolation",
          "totalVariation",
          "continuousVariance",
          "discreteVariance"
        ]
      },
      "TimeSeriesCursorResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 0,
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The generated ID for the time series.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The externally supplied ID for the time series."
                },
                "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "unit": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "The asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "The required security categories to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "The cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of result"
      },
      "TimeSeriesCreateRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Externally provided ID for the time series (optional, but recommended.)"
                },
                "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Human readable name of the time series. This field is seperate from name field available through API versions 0.3-0.6."
                },
                "legacyName": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "Set a value for legacyName to allow applications using API v0.3, v04, v05, and v0.6 to access this time series. The legacy name is the human-readable name for the time series and is mapped to the name field used in API versions 0.3-0.6. The legacyName field value must be unique, and setting this value to an already existing value will return an error. We recommend that you set this field to the same value as externalId."
                },
                "isString": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "unit": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "The asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "A description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "The required security categories to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "The required security categories to access this time series.",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "DataGetTimeSeriesMetadataDTO": {
        "description": "List of responses. The order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The generated ID for the time series.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The externally supplied ID for the time series."
                },
                "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "unit": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "The asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "The required security categories to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "PostDatapoint": {
        "oneOf": [
          {
            "required": [
              "timestamp",
              "value"
            ],
            "title": "NumericalDatapoint",
            "type": "object",
            "properties": {
              "timestamp": {
                "minimum": 31536000000,
                "maximum": 2556144000000,
                "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
              },
              "value": {
                "type": "number",
                "minimum": -1e+100,
                "maximum": 1e+100,
                "description": "The numerical data value of a numerical metric."
              }
            }
          },
          {
            "required": [
              "timestamp",
              "value"
            ],
            "type": "object",
            "title": "StringDatapoint",
            "properties": {
              "timestamp": {
                "minimum": 31536000000,
                "maximum": 2556140400000,
                "description": "The timestamp in milliseconds since the epoch (Jan 1, 1970). Must be between 1971 and 2050, inclusive"
              },
              "value": {
                "maxLength": 255,
                "type": "string",
                "description": "The string data value of a string metric."
              }
            }
          }
        ]
      },
      "DataWithCursorGetTimeSeriesMetadataDTO": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 0,
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "The generated ID for the time series.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The externally supplied ID for the time series."
                },
                "name": {
                  "maxLength": 255,
                  "type": "string",
                  "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "unit": {
                  "maxLength": 32,
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "The asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "The required security categories to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "The cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of result"
      },
      "PostTimeSeriesMetadataDTO": {
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 255,
            "type": "string",
            "description": "Externally provided ID for the time series (optional, but recommended.)"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "Human readable name of the time series. This field is seperate from name field available through API versions 0.3-0.6."
          },
          "legacyName": {
            "maxLength": 255,
            "type": "string",
            "description": "Set a value for legacyName to allow applications using API v0.3, v04, v05, and v0.6 to access this time series. The legacy name is the human-readable name for the time series and is mapped to the name field used in API versions 0.3-0.6. The legacyName field value must be unique, and setting this value to an already existing value will return an error. We recommend that you set this field to the same value as externalId."
          },
          "isString": {
            "type": "boolean",
            "default": false,
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "unit": {
            "maxLength": 32,
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "description": "The asset that this time series belongs to.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "default": false,
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "A description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "The required security categories to access this time series.",
            "items": {
              "type": "integer",
              "description": "The required security categories to access this time series.",
              "format": "int64"
            }
          }
        }
      },
      "StringOrNumber": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "GetDatapointMetadata": {
        "type": "object",
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "GetStringDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "string",
                "description": "The data value."
              }
            }
          }
        ]
      },
      "GetDoubleDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "number",
                "description": "The data value."
              }
            }
          }
        ]
      },
      "GetAggregateDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "average": {
                "type": "number",
                "description": "The integral average value in the aggregate period.",
                "format": "double"
              },
              "max": {
                "type": "number",
                "description": "The maximum value in the aggregate period.",
                "format": "double"
              },
              "min": {
                "type": "number",
                "description": "The minimum value in the aggregate period.",
                "format": "double"
              },
              "count": {
                "type": "integer",
                "description": "The number of datapoints in the aggregate period.",
                "format": "int32"
              },
              "sum": {
                "type": "number",
                "description": "The sum of the datapoints in the aggregate period.",
                "format": "double"
              },
              "interpolation": {
                "type": "number",
                "description": "The interpolated value of the series in the beginning of the aggregate.",
                "format": "double"
              },
              "stepInterpolation": {
                "type": "number",
                "description": "The last value before or at the beginning of the aggregate.",
                "format": "double"
              },
              "continuousVariance": {
                "type": "number",
                "description": "The variance of the interpolated underlying function.",
                "format": "double"
              },
              "discreteVariance": {
                "type": "number",
                "description": "The variance of the datapoint values.",
                "format": "double"
              },
              "totalVariation": {
                "type": "number",
                "description": "The total variation of the interpolated underlying function.",
                "format": "double"
              }
            }
          }
        ]
      },
      "TimeSeriesMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "GetTimeSeriesMetadataDTO": {
        "required": [
          "id",
          "isString",
          "isStep",
          "createdTime",
          "lastUpdatedTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The generated ID for the time series.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "externalId": {
            "maxLength": 255,
            "type": "string",
            "description": "The externally supplied ID for the time series."
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "description": "The display short name of the time series. Note: Value of this field can differ from name presented by older versions of API 0.3-0.6."
          },
          "isString": {
            "type": "boolean",
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "unit": {
            "maxLength": 32,
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "description": "The asset that this time series belongs to.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "The required security categories to access this time series.",
            "items": {
              "type": "integer",
              "description": "Security categories required in order to access this time series.",
              "format": "int64"
            }
          },
          "createdTime": {
            "description": "Time when this time series was created in CDF in milliseconds since Jan 1, 1970.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "lastUpdatedTime": {
            "description": "The latest time when this time series was updated in CDF in milliseconds since Jan 1, 1970.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "DatapointsMetadata": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "The ID of the time series the datapoints belong to.",
            "format": "int64",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991
          },
          "externalId": {
            "maxLength": 255,
            "type": "string",
            "description": "The external ID of the time series the datapoints belong to."
          }
        }
      },
      "DatapointsGetStringDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The ID of the time series the datapoints belong to.",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "maxLength": 255,
                "type": "string",
                "description": "The external ID of the time series the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints",
              "isString"
            ],
            "properties": {
              "isString": {
                "description": "Whether the time series is string valued or not.",
                "type": "boolean"
              },
              "unit": {
                "maxLength": 32,
                "type": "string",
                "description": "The physical unit of the time series."
              },
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints.",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The data value."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsGetDoubleDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The ID of the time series the datapoints belong to.",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "maxLength": 255,
                "type": "string",
                "description": "The external ID of the time series the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints",
              "isString"
            ],
            "properties": {
              "isString": {
                "description": "Whether the time series is string valued or not.",
                "type": "boolean"
              },
              "isStep": {
                "description": "Whether the time series is a step series or not.",
                "type": "boolean"
              },
              "unit": {
                "maxLength": 32,
                "type": "string",
                "description": "The physical unit of the time series."
              },
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "number",
                          "description": "The data value."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsGetDatapoint": {
        "oneOf": [
          {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "The ID of the time series the datapoints belong to.",
                    "format": "int64",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "externalId": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "The external ID of the time series the datapoints belong to."
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "datapoints",
                  "isString"
                ],
                "properties": {
                  "isString": {
                    "description": "Whether the time series is string valued or not.",
                    "type": "boolean"
                  },
                  "isStep": {
                    "description": "Whether the time series is a step series or not.",
                    "type": "boolean"
                  },
                  "unit": {
                    "maxLength": 32,
                    "type": "string",
                    "description": "The physical unit of the time series."
                  },
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "timestamp"
                          ],
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "value": {
                              "type": "number",
                              "description": "The data value."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "The ID of the time series the datapoints belong to.",
                    "format": "int64",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "externalId": {
                    "maxLength": 255,
                    "type": "string",
                    "description": "The external ID of the time series the datapoints belong to."
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "datapoints",
                  "isString"
                ],
                "properties": {
                  "isString": {
                    "description": "Whether the time series is string valued or not.",
                    "type": "boolean"
                  },
                  "unit": {
                    "maxLength": 32,
                    "type": "string",
                    "description": "The physical unit of the time series."
                  },
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints.",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "timestamp"
                          ],
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The data value."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "isString",
          "mapping": {
            "false": "#/components/schemas/DatapointsGetDoubleDatapoint",
            "true": "#/components/schemas/DatapointsGetStringDatapoint"
          }
        }
      },
      "DatapointsGetAggregateDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "The ID of the time series the datapoints belong to.",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "maxLength": 255,
                "type": "string",
                "description": "The external ID of the time series the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints",
              "isString",
              "isStep"
            ],
            "properties": {
              "isString": {
                "description": "Whether the time series is string valued or not.",
                "type": "boolean"
              },
              "isStep": {
                "description": "Whether the time series is a step series or not.",
                "type": "boolean"
              },
              "unit": {
                "maxLength": 32,
                "type": "string",
                "description": "The physical unit of the time series."
              },
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "average": {
                          "type": "number",
                          "description": "The integral average value in the aggregate period.",
                          "format": "double"
                        },
                        "max": {
                          "type": "number",
                          "description": "The maximum value in the aggregate period.",
                          "format": "double"
                        },
                        "min": {
                          "type": "number",
                          "description": "The minimum value in the aggregate period.",
                          "format": "double"
                        },
                        "count": {
                          "type": "integer",
                          "description": "The number of datapoints in the aggregate period.",
                          "format": "int32"
                        },
                        "sum": {
                          "type": "number",
                          "description": "The sum of the datapoints in the aggregate period.",
                          "format": "double"
                        },
                        "interpolation": {
                          "type": "number",
                          "description": "The interpolated value of the series in the beginning of the aggregate.",
                          "format": "double"
                        },
                        "stepInterpolation": {
                          "type": "number",
                          "description": "The last value before or at the beginning of the aggregate.",
                          "format": "double"
                        },
                        "continuousVariance": {
                          "type": "number",
                          "description": "The variance of the interpolated underlying function.",
                          "format": "double"
                        },
                        "discreteVariance": {
                          "type": "number",
                          "description": "The variance of the datapoint values.",
                          "format": "double"
                        },
                        "totalVariation": {
                          "type": "number",
                          "description": "The total variation of the interpolated underlying function.",
                          "format": "double"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsOrAggregatesResponse": {
        "description": "The list of responses. The order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "The ID of the time series the datapoints belong to.",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "The external ID of the time series the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints",
                        "isString",
                        "isStep"
                      ],
                      "properties": {
                        "isString": {
                          "description": "Whether the time series is string valued or not.",
                          "type": "boolean"
                        },
                        "isStep": {
                          "description": "Whether the time series is a step series or not.",
                          "type": "boolean"
                        },
                        "unit": {
                          "maxLength": 32,
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "average": {
                                    "type": "number",
                                    "description": "The integral average value in the aggregate period.",
                                    "format": "double"
                                  },
                                  "max": {
                                    "type": "number",
                                    "description": "The maximum value in the aggregate period.",
                                    "format": "double"
                                  },
                                  "min": {
                                    "type": "number",
                                    "description": "The minimum value in the aggregate period.",
                                    "format": "double"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "description": "The number of datapoints in the aggregate period.",
                                    "format": "int32"
                                  },
                                  "sum": {
                                    "type": "number",
                                    "description": "The sum of the datapoints in the aggregate period.",
                                    "format": "double"
                                  },
                                  "interpolation": {
                                    "type": "number",
                                    "description": "The interpolated value of the series in the beginning of the aggregate.",
                                    "format": "double"
                                  },
                                  "stepInterpolation": {
                                    "type": "number",
                                    "description": "The last value before or at the beginning of the aggregate.",
                                    "format": "double"
                                  },
                                  "continuousVariance": {
                                    "type": "number",
                                    "description": "The variance of the interpolated underlying function.",
                                    "format": "double"
                                  },
                                  "discreteVariance": {
                                    "type": "number",
                                    "description": "The variance of the datapoint values.",
                                    "format": "double"
                                  },
                                  "totalVariation": {
                                    "type": "number",
                                    "description": "The total variation of the interpolated underlying function.",
                                    "format": "double"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "The ID of the time series the datapoints belong to.",
                              "format": "int64",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991
                            },
                            "externalId": {
                              "maxLength": 255,
                              "type": "string",
                              "description": "The external ID of the time series the datapoints belong to."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "datapoints",
                            "isString"
                          ],
                          "properties": {
                            "isString": {
                              "description": "Whether the time series is string valued or not.",
                              "type": "boolean"
                            },
                            "isStep": {
                              "description": "Whether the time series is a step series or not.",
                              "type": "boolean"
                            },
                            "unit": {
                              "maxLength": 32,
                              "type": "string",
                              "description": "The physical unit of the time series."
                            },
                            "datapoints": {
                              "type": "array",
                              "description": "The list of datapoints",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "timestamp"
                                    ],
                                    "properties": {
                                      "timestamp": {
                                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                        "type": "integer",
                                        "minimum": 0,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "value"
                                    ],
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "description": "The data value."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "The ID of the time series the datapoints belong to.",
                              "format": "int64",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991
                            },
                            "externalId": {
                              "maxLength": 255,
                              "type": "string",
                              "description": "The external ID of the time series the datapoints belong to."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "datapoints",
                            "isString"
                          ],
                          "properties": {
                            "isString": {
                              "description": "Whether the time series is string valued or not.",
                              "type": "boolean"
                            },
                            "unit": {
                              "maxLength": 32,
                              "type": "string",
                              "description": "The physical unit of the time series."
                            },
                            "datapoints": {
                              "type": "array",
                              "description": "The list of datapoints.",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "timestamp"
                                    ],
                                    "properties": {
                                      "timestamp": {
                                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                        "type": "integer",
                                        "minimum": 0,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "value"
                                    ],
                                    "properties": {
                                      "value": {
                                        "type": "string",
                                        "description": "The data value."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "isString",
                    "mapping": {
                      "false": "#/components/schemas/DatapointsGetDoubleDatapoint",
                      "true": "#/components/schemas/DatapointsGetStringDatapoint"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DatapointsResponse": {
        "type": "object",
        "description": "The list of responses. The order matches the requests order.",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "The ID of the time series the datapoints belong to.",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "The external ID of the time series the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints",
                        "isString"
                      ],
                      "properties": {
                        "isString": {
                          "description": "Whether the time series is string valued or not.",
                          "type": "boolean"
                        },
                        "isStep": {
                          "description": "Whether the time series is a step series or not.",
                          "type": "boolean"
                        },
                        "unit": {
                          "maxLength": 32,
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "value"
                                ],
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The data value."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "The ID of the time series the datapoints belong to.",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "maxLength": 255,
                          "type": "string",
                          "description": "The external ID of the time series the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints",
                        "isString"
                      ],
                      "properties": {
                        "isString": {
                          "description": "Whether the time series is string valued or not.",
                          "type": "boolean"
                        },
                        "unit": {
                          "maxLength": 32,
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints.",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "value"
                                ],
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "The data value."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              ],
              "discriminator": {
                "propertyName": "isString",
                "mapping": {
                  "false": "#/components/schemas/DatapointsGetDoubleDatapoint",
                  "true": "#/components/schemas/DatapointsGetStringDatapoint"
                }
              }
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Filter on name.",
            "type": "string"
          },
          "unit": {
            "description": "Filter on unit.",
            "type": "string"
          },
          "isString": {
            "description": "Filter on isString.",
            "type": "boolean"
          },
          "isStep": {
            "description": "Filter on isStep.",
            "type": "boolean"
          },
          "metadata": {
            "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). The format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
            "example": {
              "key1": "value1",
              "key2": "value2"
            },
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "description": "Filter out time series that are not linked to any of these assets.",
            "example": "[363848954441724, 793045462540095, 1261042166839739]",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true
          },
          "rootAssetIds": {
            "type": "array",
            "description": "The IDs of the root assets that the related assets should be children of.",
            "example": "[343099548723932, 88483999203217]",
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true
          },
          "externalIdPrefix": {
            "description": "Filter by this (case-sensitive) prefix for the external ID.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.prefix"
          },
          "createdTime": {
            "description": "Filter out time series with createdTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Filter out time series with lastUpdatedTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        }
      },
      "Search": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Prefix and fuzzy search on name.",
            "type": "string"
          },
          "description": {
            "description": "Prefix and fuzzy search on description.",
            "type": "string"
          },
          "query": {
            "description": "Whitespace-separated terms to search for in time series. Does a\nbest-effort fuzzy search in relevant fields (currently name and\ndescription) for variations of any of the search terms, and\norders results by relevance. Uses a different search algorithm\nthan the name and description parameters, and will generally give\nmuch better results. Matching and ordering is not guaranteed to\nbe stable over time, and the fields being searched may be\nextended.",
            "type": "string",
            "example": "some other"
          }
        }
      },
      "TimeSeriesSearchDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filtering parameters",
            "type": "object",
            "properties": {
              "name": {
                "description": "Filter on name.",
                "type": "string"
              },
              "unit": {
                "description": "Filter on unit.",
                "type": "string"
              },
              "isString": {
                "description": "Filter on isString.",
                "type": "boolean"
              },
              "isStep": {
                "description": "Filter on isStep.",
                "type": "boolean"
              },
              "metadata": {
                "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). The format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "description": "Filter out time series that are not linked to any of these assets.",
                "example": "[363848954441724, 793045462540095, 1261042166839739]",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "rootAssetIds": {
                "type": "array",
                "description": "The IDs of the root assets that the related assets should be children of.",
                "example": "[343099548723932, 88483999203217]",
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              },
              "createdTime": {
                "description": "Filter out time series with createdTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Filter out time series with lastUpdatedTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              }
            }
          },
          "search": {
            "description": "Search parameters",
            "type": "object",
            "properties": {
              "name": {
                "description": "Prefix and fuzzy search on name.",
                "type": "string"
              },
              "description": {
                "description": "Prefix and fuzzy search on description.",
                "type": "string"
              },
              "query": {
                "description": "Whitespace-separated terms to search for in time series. Does a\nbest-effort fuzzy search in relevant fields (currently name and\ndescription) for variations of any of the search terms, and\norders results by relevance. Uses a different search algorithm\nthan the name and description parameters, and will generally give\nmuch better results. Matching and ordering is not guaranteed to\nbe stable over time, and the fields being searched may be\nextended.",
                "type": "string",
                "example": "some other"
              }
            }
          },
          "limit": {
            "description": "Return up to this many results.",
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 100
          }
        }
      },
      "TimeSeriesListDTO": {
        "description": "Filter request for time series. Filters exact field matching or timestamp ranges inclusive min and max.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "filter": {
                "description": "Filtering parameters",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Filter on name.",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Filter on unit.",
                    "type": "string"
                  },
                  "isString": {
                    "description": "Filter on isString.",
                    "type": "boolean"
                  },
                  "isStep": {
                    "description": "Filter on isStep.",
                    "type": "boolean"
                  },
                  "metadata": {
                    "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). The format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                    "example": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "assetIds": {
                    "type": "array",
                    "description": "Filter out time series that are not linked to any of these assets.",
                    "example": "[363848954441724, 793045462540095, 1261042166839739]",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true
                  },
                  "rootAssetIds": {
                    "type": "array",
                    "description": "The IDs of the root assets that the related assets should be children of.",
                    "example": "[343099548723932, 88483999203217]",
                    "items": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true
                  },
                  "externalIdPrefix": {
                    "description": "Filter by this (case-sensitive) prefix for the external ID.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.prefix"
                  },
                  "createdTime": {
                    "description": "Filter out time series with createdTime outside this range.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Filter out time series with lastUpdatedTime outside this range.",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  }
                }
              },
              "limit": {
                "description": "Return up to this many results.",
                "maximum": 1000,
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "default": 100
              }
            }
          },
          {
            "description": "Cursor for paging through results",
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "partition": {
                "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
                "type": "string",
                "example": "1/10"
              }
            }
          }
        ]
      },
      "NullableSinglePatchLong": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            }
          }
        ],
        "description": "The change that will be applied to the key."
      },
      "NullableSinglePatchString": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            }
          }
        ],
        "description": "The change that will be applied to the key."
      },
      "DuplicatedIdsInRequestResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "description": "Error details",
            "required": [
              "code",
              "message",
              "duplicated"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32",
                "example": 422
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "duplicated": {
                "uniqueItems": true,
                "type": "array",
                "description": "Items that are duplicated.",
                "items": {
                  "description": "Ids and ExternalIds that are duplicated in the request.",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "ExternalIdsAlreadyExistResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "description": "Error details",
            "required": [
              "code",
              "message",
              "duplicated"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32",
                "example": 409
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "duplicated": {
                "uniqueItems": true,
                "type": "array",
                "description": "Items that are duplicated.",
                "items": {
                  "description": "ExternalIds that already exist.",
                  "type": "object",
                  "required": [
                    "externalId"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "description": "Error details.",
            "required": [
              "code",
              "message",
              "missing"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32",
                "example": 400
              },
              "message": {
                "type": "string",
                "description": "Error message."
              },
              "missing": {
                "uniqueItems": true,
                "type": "array",
                "description": "Items that are not found.",
                "items": {
                  "description": "Ids or ExternalIds that are not found.",
                  "oneOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "DataRawDB": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of a database."
                }
              },
              "description": "A NoSQL database to store customer data."
            }
          }
        }
      },
      "DeleteRawDB": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of a database."
                }
              },
              "description": "A NoSQL database to store customer data."
            }
          },
          "recursive": {
            "type": "boolean",
            "description": "When true, tables of this database are deleted with the database.",
            "default": false
          }
        }
      },
      "DataRawDBRow": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "columns",
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                },
                "columns": {
                  "type": "object",
                  "description": "Row data stored as a JSON object."
                }
              }
            }
          }
        }
      },
      "DataRawDBRowKey": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                }
              },
              "description": "A row key"
            }
          }
        }
      },
      "DataRawDBTable": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of the table"
                }
              },
              "description": "A NoSQL database table to store customer data"
            }
          }
        }
      },
      "DataWithCursorRawDBRow": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "columns",
                "key",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                },
                "columns": {
                  "type": "object",
                  "description": "Row data stored as a JSON object."
                },
                "lastUpdatedTime": {
                  "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "DataWithCursorRawDBTable": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of the table"
                }
              },
              "description": "A NoSQL database table to store customer data"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "RawDBTable": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the table"
          }
        },
        "description": "A NoSQL database table to store customer data"
      },
      "RawRowCSV": {
        "type": "object",
        "properties": {
          "columnHeaders": {
            "type": "array",
            "description": "Headers for the different columns in the response.",
            "items": {
              "type": "string",
              "description": "Headers for the different columns in the response."
            }
          },
          "rows": {
            "type": "array",
            "description": "Rows of column values, in same order as columnHeaders.",
            "items": {
              "type": "array",
              "description": "Rows of column values, in same order as columnHeaders.",
              "items": {
                "type": "object",
                "description": "Rows of column values, in same order as columnHeaders."
              }
            }
          }
        },
        "description": "Raw row result written in CSV format, with column columnHeaders."
      },
      "DataWithCursorRawDB": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of a database."
                }
              },
              "description": "A NoSQL database to store customer data."
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "RawDB": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of a database."
          }
        },
        "description": "A NoSQL database to store customer data."
      },
      "RawDBRow": {
        "required": [
          "columns",
          "key",
          "lastUpdatedTime"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          },
          "columns": {
            "type": "object",
            "description": "Row data stored as a JSON object."
          },
          "lastUpdatedTime": {
            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "RawDBRowInsert": {
        "required": [
          "columns",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          },
          "columns": {
            "type": "object",
            "description": "Row data stored as a JSON object."
          }
        }
      },
      "RawDBRowKey": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          }
        },
        "description": "A row key"
      },
      "TokenStatusDTO": {
        "type": "object",
        "required": [
          "token",
          "valid",
          "expired"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The token that was sent for validation",
            "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
          },
          "valid": {
            "type": "boolean",
            "description": "Whether this token is valid"
          },
          "expired": {
            "type": "boolean",
            "description": "Whether this token has expired"
          }
        }
      },
      "SingleTokenStatusDTOResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "token",
              "valid",
              "expired"
            ],
            "properties": {
              "token": {
                "type": "string",
                "description": "The token that was sent for validation",
                "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
              },
              "valid": {
                "type": "boolean",
                "description": "Whether this token is valid"
              },
              "expired": {
                "type": "boolean",
                "description": "Whether this token has expired"
              }
            }
          }
        }
      },
      "IdToken": {
        "type": "object",
        "required": [
          "sub",
          "project_name",
          "groups",
          "signing_key",
          "exp"
        ],
        "properties": {
          "sub": {
            "type": "string",
            "description": "The subject of the token",
            "example": "tom@example.com"
          },
          "project_name": {
            "type": "string",
            "description": "Which CDF project the subject is in",
            "example": "digitalrevolution"
          },
          "groups": {
            "type": "array",
            "description": "Which groups (by id) the subject is in",
            "items": {
              "type": "integer",
              "description": "Which groups (by id) the subject is in",
              "format": "int64"
            },
            "example": "[123982398, 123981283723, 7283273927]"
          },
          "signing_key": {
            "type": "string",
            "description": "The signing key id",
            "example": "a769f8ef-d5e3-4cf7-b914-2a6de189d942"
          },
          "exp": {
            "type": "integer",
            "description": "The expiration time of the token in seconds (unix)",
            "format": "int64",
            "example": 1554897484
          }
        },
        "description": "An ID JWT token"
      },
      "LoginUrlResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The url where the user can be redirected to sign in."
              }
            },
            "description": "Represents an url where the user can be redirected to sign in."
          }
        }
      },
      "LoginUrlDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url where the user can be redirected to sign in."
          }
        },
        "description": "Represents an url where the user can be redirected to sign in."
      },
      "LoginStatusDTO": {
        "type": "object",
        "required": [
          "user",
          "loggedIn",
          "project",
          "projectId"
        ],
        "properties": {
          "user": {
            "type": "string",
            "description": "The user principal, e.g john.doe@corporation.com.",
            "example": "tom@example.com"
          },
          "loggedIn": {
            "type": "boolean",
            "description": "Whether the user is logged in or not.",
            "example": true
          },
          "project": {
            "type": "string",
            "description": "Name of project user belongs to",
            "example": "digitalrevolution"
          },
          "projectId": {
            "type": "integer",
            "description": "Internal project id of the project",
            "format": "int64",
            "example": 137238723719
          },
          "apiKeyId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
          }
        },
        "description": "Represents the current authentication status of the request"
      },
      "GroupName": {
        "type": "string",
        "description": "Name of the group",
        "example": "Production Engineers"
      },
      "GroupSourceId": {
        "type": "string",
        "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
        "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
      },
      "Group": {
        "type": "object",
        "required": [
          "name",
          "id",
          "isDeleted"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group",
            "example": "Production Engineers"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "title": "groupsAcl",
                  "properties": {
                    "groupsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Group:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all groups",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "groups the current principal (service account or user) is in",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Group:Scope"
                        }
                      },
                      "title": "Acl:Group"
                    }
                  }
                },
                {
                  "title": "assetsAcl",
                  "properties": {
                    "assetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Asset:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Asset:Scope"
                        }
                      },
                      "title": "Acl:Asset"
                    }
                  }
                },
                {
                  "title": "eventsAcl",
                  "properties": {
                    "eventsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Event:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Event:Scope"
                        }
                      },
                      "title": "Acl:Event"
                    }
                  }
                },
                {
                  "title": "filesAcl",
                  "properties": {
                    "filesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "File:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "File:Scope"
                        }
                      },
                      "title": "Acl:File"
                    }
                  }
                },
                {
                  "title": "usersAcl",
                  "properties": {
                    "usersAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "User:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all service accounts",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "the current principal (user or service account) making the request",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "User:Scope"
                        }
                      },
                      "title": "Acl:User"
                    }
                  }
                },
                {
                  "title": "projectsAcl",
                  "properties": {
                    "projectsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE"
                            ],
                            "default": "LIST",
                            "title": "Project:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Project:Scope"
                        }
                      },
                      "title": "Acl:Project"
                    }
                  }
                },
                {
                  "title": "securityCategoriesAcl",
                  "properties": {
                    "securityCategoriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "MEMBEROF",
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "MEMBEROF",
                            "title": "SecurityCategory:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "SecurityCategory:Scope"
                        }
                      },
                      "title": "Acl:SecurityCategory"
                    }
                  }
                },
                {
                  "title": "rawAcl",
                  "properties": {
                    "rawAcl": {
                      "type": "object",
                      "description": "Set access control on RAW",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Raw:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "title": "AllScope",
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "title": "DatabaseAndTableScope",
                              "properties": {
                                "tableScope": {
                                  "type": "object",
                                  "description": "Scope access to certain tables within a database",
                                  "example": {
                                    "dbsToTables": {
                                      "db1": [
                                        "table1",
                                        "table2"
                                      ],
                                      "db2": [
                                        "table1",
                                        "table2"
                                      ]
                                    }
                                  },
                                  "title": "tableScope",
                                  "properties": {
                                    "dbsToTables": {
                                      "type": "object",
                                      "title": "dbtoTableScope",
                                      "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                      "additionalProperties": {
                                        "x-additionalPropertiesName": "databaseName",
                                        "type": "array",
                                        "example": [
                                          "table1",
                                          "table2"
                                        ],
                                        "description": "List of table names within the database",
                                        "items": {
                                          "type": "string",
                                          "example": "table1",
                                          "description": "Name of the table"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "title": "Raw:Scope"
                        }
                      },
                      "title": "Acl:Raw"
                    }
                  }
                },
                {
                  "title": "timeSeriesAcl",
                  "properties": {
                    "timeSeriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Timeseries:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "idscope": {
                                  "type": "object",
                                  "properties": {
                                    "ids": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "time series ids"
                                    }
                                  },
                                  "title": "Scope:TimeSeriesIdScope"
                                }
                              }
                            }
                          ],
                          "title": "Timeseries:Scope"
                        }
                      },
                      "title": "Acl:Timeseries"
                    }
                  }
                },
                {
                  "title": "apikeysAcl",
                  "properties": {
                    "apikeysAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Apikey:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "apikeys owned by the service account making the request",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "idscope": {
                                  "title": "apikeys owned by the service account with the specified id",
                                  "type": "object",
                                  "properties": {
                                    "ids": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "service account ids"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "title": "Apikey:Scope"
                        }
                      },
                      "title": "Acl:Apikey"
                    }
                  }
                },
                {
                  "title": "threedAcl",
                  "properties": {
                    "threedAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "READ",
                            "title": "Threed:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Threed:Scope"
                        }
                      },
                      "title": "Acl:Threed"
                    }
                  }
                },
                {
                  "title": "sequencesAcl",
                  "properties": {
                    "sequencesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Sequences:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Sequences:Scope"
                        }
                      },
                      "title": "Acl:Sequences"
                    }
                  }
                },
                {
                  "title": "analyticsAcl",
                  "properties": {
                    "analyticsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "EXECUTE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Analytics:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Analytics:Scope"
                        }
                      },
                      "title": "Acl:Analytics"
                    }
                  }
                },
                {
                  "title": "digitalTwinAcl",
                  "properties": {
                    "digitalTwinAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "DigitalTwin:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "DigitalTwin:Scope"
                        }
                      },
                      "title": "Acl:DigitalTwin"
                    }
                  }
                },
                {
                  "title": "relationshipsAcl",
                  "properties": {
                    "relationshipsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Relationships:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Relationships:Scope"
                        }
                      },
                      "title": "Acl:Relationships"
                    }
                  }
                },
                {
                  "title": "datasetsAcl",
                  "properties": {
                    "datasetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Datasets:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Datasets:Scope"
                        }
                      },
                      "title": "Acl:Datasets"
                    }
                  }
                },
                {
                  "title": "seismicAcl",
                  "properties": {
                    "seismicAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Seismic:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Seismic:Scope"
                        }
                      },
                      "title": "Acl:Seismic"
                    }
                  }
                },
                {
                  "title": "typesAcl",
                  "properties": {
                    "typesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Types:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Types:Scope"
                        }
                      },
                      "title": "Acl:Types"
                    }
                  }
                }
              ]
            },
            "title": "Capability"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "default": false
          },
          "deletedTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GroupResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "isDeleted"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current principal (service account or user) is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all service accounts",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current principal (user or service account) making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "description": "Set access control on RAW",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "title": "AllScope",
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "title": "DatabaseAndTableScope",
                                    "properties": {
                                      "tableScope": {
                                        "type": "object",
                                        "description": "Scope access to certain tables within a database",
                                        "example": {
                                          "dbsToTables": {
                                            "db1": [
                                              "table1",
                                              "table2"
                                            ],
                                            "db2": [
                                              "table1",
                                              "table2"
                                            ]
                                          }
                                        },
                                        "title": "tableScope",
                                        "properties": {
                                          "dbsToTables": {
                                            "type": "object",
                                            "title": "dbtoTableScope",
                                            "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                            "additionalProperties": {
                                              "x-additionalPropertiesName": "databaseName",
                                              "type": "array",
                                              "example": [
                                                "table1",
                                                "table2"
                                              ],
                                              "description": "List of table names within the database",
                                              "items": {
                                                "type": "string",
                                                "example": "table1",
                                                "description": "Name of the table"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "time series ids"
                                          }
                                        },
                                        "title": "Scope:TimeSeriesIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys owned by the service account making the request",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "title": "apikeys owned by the service account with the specified id",
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "service account ids"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      },
                      {
                        "title": "digitalTwinAcl",
                        "properties": {
                          "digitalTwinAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "DigitalTwin:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "DigitalTwin:Scope"
                              }
                            },
                            "title": "Acl:DigitalTwin"
                          }
                        }
                      },
                      {
                        "title": "relationshipsAcl",
                        "properties": {
                          "relationshipsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Relationships:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Relationships:Scope"
                              }
                            },
                            "title": "Acl:Relationships"
                          }
                        }
                      },
                      {
                        "title": "datasetsAcl",
                        "properties": {
                          "datasetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Datasets:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Datasets:Scope"
                              }
                            },
                            "title": "Acl:Datasets"
                          }
                        }
                      },
                      {
                        "title": "seismicAcl",
                        "properties": {
                          "seismicAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Seismic:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Seismic:Scope"
                              }
                            },
                            "title": "Acl:Seismic"
                          }
                        }
                      },
                      {
                        "title": "typesAcl",
                        "properties": {
                          "typesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Types:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Types:Scope"
                              }
                            },
                            "title": "Acl:Types"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                },
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "isDeleted": {
                  "type": "boolean",
                  "default": false
                },
                "deletedTime": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "GroupSpec": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group",
            "example": "Production Engineers"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "title": "groupsAcl",
                  "properties": {
                    "groupsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Group:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all groups",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "groups the current principal (service account or user) is in",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Group:Scope"
                        }
                      },
                      "title": "Acl:Group"
                    }
                  }
                },
                {
                  "title": "assetsAcl",
                  "properties": {
                    "assetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Asset:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Asset:Scope"
                        }
                      },
                      "title": "Acl:Asset"
                    }
                  }
                },
                {
                  "title": "eventsAcl",
                  "properties": {
                    "eventsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Event:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Event:Scope"
                        }
                      },
                      "title": "Acl:Event"
                    }
                  }
                },
                {
                  "title": "filesAcl",
                  "properties": {
                    "filesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "File:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "File:Scope"
                        }
                      },
                      "title": "Acl:File"
                    }
                  }
                },
                {
                  "title": "usersAcl",
                  "properties": {
                    "usersAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "User:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all service accounts",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "the current principal (user or service account) making the request",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "User:Scope"
                        }
                      },
                      "title": "Acl:User"
                    }
                  }
                },
                {
                  "title": "projectsAcl",
                  "properties": {
                    "projectsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE"
                            ],
                            "default": "LIST",
                            "title": "Project:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Project:Scope"
                        }
                      },
                      "title": "Acl:Project"
                    }
                  }
                },
                {
                  "title": "securityCategoriesAcl",
                  "properties": {
                    "securityCategoriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "MEMBEROF",
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "MEMBEROF",
                            "title": "SecurityCategory:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "SecurityCategory:Scope"
                        }
                      },
                      "title": "Acl:SecurityCategory"
                    }
                  }
                },
                {
                  "title": "rawAcl",
                  "properties": {
                    "rawAcl": {
                      "type": "object",
                      "description": "Set access control on RAW",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Raw:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "title": "AllScope",
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "title": "DatabaseAndTableScope",
                              "properties": {
                                "tableScope": {
                                  "type": "object",
                                  "description": "Scope access to certain tables within a database",
                                  "example": {
                                    "dbsToTables": {
                                      "db1": [
                                        "table1",
                                        "table2"
                                      ],
                                      "db2": [
                                        "table1",
                                        "table2"
                                      ]
                                    }
                                  },
                                  "title": "tableScope",
                                  "properties": {
                                    "dbsToTables": {
                                      "type": "object",
                                      "title": "dbtoTableScope",
                                      "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                      "additionalProperties": {
                                        "x-additionalPropertiesName": "databaseName",
                                        "type": "array",
                                        "example": [
                                          "table1",
                                          "table2"
                                        ],
                                        "description": "List of table names within the database",
                                        "items": {
                                          "type": "string",
                                          "example": "table1",
                                          "description": "Name of the table"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "title": "Raw:Scope"
                        }
                      },
                      "title": "Acl:Raw"
                    }
                  }
                },
                {
                  "title": "timeSeriesAcl",
                  "properties": {
                    "timeSeriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Timeseries:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "idscope": {
                                  "type": "object",
                                  "properties": {
                                    "ids": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "time series ids"
                                    }
                                  },
                                  "title": "Scope:TimeSeriesIdScope"
                                }
                              }
                            }
                          ],
                          "title": "Timeseries:Scope"
                        }
                      },
                      "title": "Acl:Timeseries"
                    }
                  }
                },
                {
                  "title": "apikeysAcl",
                  "properties": {
                    "apikeysAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Apikey:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "apikeys owned by the service account making the request",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "idscope": {
                                  "title": "apikeys owned by the service account with the specified id",
                                  "type": "object",
                                  "properties": {
                                    "ids": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "service account ids"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "title": "Apikey:Scope"
                        }
                      },
                      "title": "Acl:Apikey"
                    }
                  }
                },
                {
                  "title": "threedAcl",
                  "properties": {
                    "threedAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "READ",
                            "title": "Threed:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Threed:Scope"
                        }
                      },
                      "title": "Acl:Threed"
                    }
                  }
                },
                {
                  "title": "sequencesAcl",
                  "properties": {
                    "sequencesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Sequences:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Sequences:Scope"
                        }
                      },
                      "title": "Acl:Sequences"
                    }
                  }
                },
                {
                  "title": "analyticsAcl",
                  "properties": {
                    "analyticsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "EXECUTE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Analytics:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Analytics:Scope"
                        }
                      },
                      "title": "Acl:Analytics"
                    }
                  }
                },
                {
                  "title": "digitalTwinAcl",
                  "properties": {
                    "digitalTwinAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "DigitalTwin:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "DigitalTwin:Scope"
                        }
                      },
                      "title": "Acl:DigitalTwin"
                    }
                  }
                },
                {
                  "title": "relationshipsAcl",
                  "properties": {
                    "relationshipsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Relationships:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Relationships:Scope"
                        }
                      },
                      "title": "Acl:Relationships"
                    }
                  }
                },
                {
                  "title": "datasetsAcl",
                  "properties": {
                    "datasetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Datasets:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Datasets:Scope"
                        }
                      },
                      "title": "Acl:Datasets"
                    }
                  }
                },
                {
                  "title": "seismicAcl",
                  "properties": {
                    "seismicAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Seismic:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Seismic:Scope"
                        }
                      },
                      "title": "Acl:Seismic"
                    }
                  }
                },
                {
                  "title": "typesAcl",
                  "properties": {
                    "typesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Types:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Types:Scope"
                        }
                      },
                      "title": "Acl:Types"
                    }
                  }
                }
              ]
            },
            "title": "Capability"
          }
        },
        "description": "A specification for creating a new group"
      },
      "DataGroup": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "isDeleted"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current principal (service account or user) is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all service accounts",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current principal (user or service account) making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "description": "Set access control on RAW",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "title": "AllScope",
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "title": "DatabaseAndTableScope",
                                    "properties": {
                                      "tableScope": {
                                        "type": "object",
                                        "description": "Scope access to certain tables within a database",
                                        "example": {
                                          "dbsToTables": {
                                            "db1": [
                                              "table1",
                                              "table2"
                                            ],
                                            "db2": [
                                              "table1",
                                              "table2"
                                            ]
                                          }
                                        },
                                        "title": "tableScope",
                                        "properties": {
                                          "dbsToTables": {
                                            "type": "object",
                                            "title": "dbtoTableScope",
                                            "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                            "additionalProperties": {
                                              "x-additionalPropertiesName": "databaseName",
                                              "type": "array",
                                              "example": [
                                                "table1",
                                                "table2"
                                              ],
                                              "description": "List of table names within the database",
                                              "items": {
                                                "type": "string",
                                                "example": "table1",
                                                "description": "Name of the table"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "time series ids"
                                          }
                                        },
                                        "title": "Scope:TimeSeriesIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys owned by the service account making the request",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "title": "apikeys owned by the service account with the specified id",
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "service account ids"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      },
                      {
                        "title": "digitalTwinAcl",
                        "properties": {
                          "digitalTwinAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "DigitalTwin:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "DigitalTwin:Scope"
                              }
                            },
                            "title": "Acl:DigitalTwin"
                          }
                        }
                      },
                      {
                        "title": "relationshipsAcl",
                        "properties": {
                          "relationshipsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Relationships:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Relationships:Scope"
                              }
                            },
                            "title": "Acl:Relationships"
                          }
                        }
                      },
                      {
                        "title": "datasetsAcl",
                        "properties": {
                          "datasetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Datasets:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Datasets:Scope"
                              }
                            },
                            "title": "Acl:Datasets"
                          }
                        }
                      },
                      {
                        "title": "seismicAcl",
                        "properties": {
                          "seismicAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Seismic:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Seismic:Scope"
                              }
                            },
                            "title": "Acl:Seismic"
                          }
                        }
                      },
                      {
                        "title": "typesAcl",
                        "properties": {
                          "typesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Types:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Types:Scope"
                              }
                            },
                            "title": "Acl:Types"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                },
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "isDeleted": {
                  "type": "boolean",
                  "default": false
                },
                "deletedTime": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "DataGroupSpec": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a service account in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current principal (service account or user) is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all service accounts",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current principal (user or service account) making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "description": "Set access control on RAW",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "title": "AllScope",
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "title": "DatabaseAndTableScope",
                                    "properties": {
                                      "tableScope": {
                                        "type": "object",
                                        "description": "Scope access to certain tables within a database",
                                        "example": {
                                          "dbsToTables": {
                                            "db1": [
                                              "table1",
                                              "table2"
                                            ],
                                            "db2": [
                                              "table1",
                                              "table2"
                                            ]
                                          }
                                        },
                                        "title": "tableScope",
                                        "properties": {
                                          "dbsToTables": {
                                            "type": "object",
                                            "title": "dbtoTableScope",
                                            "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                            "additionalProperties": {
                                              "x-additionalPropertiesName": "databaseName",
                                              "type": "array",
                                              "example": [
                                                "table1",
                                                "table2"
                                              ],
                                              "description": "List of table names within the database",
                                              "items": {
                                                "type": "string",
                                                "example": "table1",
                                                "description": "Name of the table"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "time series ids"
                                          }
                                        },
                                        "title": "Scope:TimeSeriesIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys owned by the service account making the request",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "idscope": {
                                        "title": "apikeys owned by the service account with the specified id",
                                        "type": "object",
                                        "properties": {
                                          "ids": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "service account ids"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      },
                      {
                        "title": "digitalTwinAcl",
                        "properties": {
                          "digitalTwinAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "DigitalTwin:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "DigitalTwin:Scope"
                              }
                            },
                            "title": "Acl:DigitalTwin"
                          }
                        }
                      },
                      {
                        "title": "relationshipsAcl",
                        "properties": {
                          "relationshipsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Relationships:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Relationships:Scope"
                              }
                            },
                            "title": "Acl:Relationships"
                          }
                        }
                      },
                      {
                        "title": "datasetsAcl",
                        "properties": {
                          "datasetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Datasets:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Datasets:Scope"
                              }
                            },
                            "title": "Acl:Datasets"
                          }
                        }
                      },
                      {
                        "title": "seismicAcl",
                        "properties": {
                          "seismicAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Seismic:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Seismic:Scope"
                              }
                            },
                            "title": "Acl:Seismic"
                          }
                        }
                      },
                      {
                        "title": "typesAcl",
                        "properties": {
                          "typesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Types:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Types:Scope"
                              }
                            },
                            "title": "Acl:Types"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                }
              },
              "description": "A specification for creating a new group"
            }
          }
        }
      },
      "cogniteCapability": {
        "type": "array",
        "items": {
          "type": "object",
          "oneOf": [
            {
              "title": "groupsAcl",
              "properties": {
                "groupsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "READ",
                          "CREATE",
                          "UPDATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "Group:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "title": "all groups",
                              "type": "object"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "groups the current principal (service account or user) is in",
                              "type": "object"
                            }
                          }
                        }
                      ],
                      "title": "Group:Scope"
                    }
                  },
                  "title": "Acl:Group"
                }
              }
            },
            {
              "title": "assetsAcl",
              "properties": {
                "assetsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Asset:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Asset:Scope"
                    }
                  },
                  "title": "Acl:Asset"
                }
              }
            },
            {
              "title": "eventsAcl",
              "properties": {
                "eventsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Event:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Event:Scope"
                    }
                  },
                  "title": "Acl:Event"
                }
              }
            },
            {
              "title": "filesAcl",
              "properties": {
                "filesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "File:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "File:Scope"
                    }
                  },
                  "title": "Acl:File"
                }
              }
            },
            {
              "title": "usersAcl",
              "properties": {
                "usersAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "User:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "title": "all service accounts",
                              "type": "object"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "the current principal (user or service account) making the request",
                              "type": "object"
                            }
                          }
                        }
                      ],
                      "title": "User:Scope"
                    }
                  },
                  "title": "Acl:User"
                }
              }
            },
            {
              "title": "projectsAcl",
              "properties": {
                "projectsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "READ",
                          "CREATE",
                          "UPDATE"
                        ],
                        "default": "LIST",
                        "title": "Project:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Project:Scope"
                    }
                  },
                  "title": "Acl:Project"
                }
              }
            },
            {
              "title": "securityCategoriesAcl",
              "properties": {
                "securityCategoriesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "MEMBEROF",
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "MEMBEROF",
                        "title": "SecurityCategory:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "SecurityCategory:Scope"
                    }
                  },
                  "title": "Acl:SecurityCategory"
                }
              }
            },
            {
              "title": "rawAcl",
              "properties": {
                "rawAcl": {
                  "type": "object",
                  "description": "Set access control on RAW",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE",
                          "LIST"
                        ],
                        "default": "READ",
                        "title": "Raw:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "title": "AllScope",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          }
                        },
                        {
                          "title": "DatabaseAndTableScope",
                          "properties": {
                            "tableScope": {
                              "type": "object",
                              "description": "Scope access to certain tables within a database",
                              "example": {
                                "dbsToTables": {
                                  "db1": [
                                    "table1",
                                    "table2"
                                  ],
                                  "db2": [
                                    "table1",
                                    "table2"
                                  ]
                                }
                              },
                              "title": "tableScope",
                              "properties": {
                                "dbsToTables": {
                                  "type": "object",
                                  "title": "dbtoTableScope",
                                  "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                                  "additionalProperties": {
                                    "x-additionalPropertiesName": "databaseName",
                                    "type": "array",
                                    "example": [
                                      "table1",
                                      "table2"
                                    ],
                                    "description": "List of table names within the database",
                                    "items": {
                                      "type": "string",
                                      "example": "table1",
                                      "description": "Name of the table"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ],
                      "title": "Raw:Scope"
                    }
                  },
                  "title": "Acl:Raw"
                }
              }
            },
            {
              "title": "timeSeriesAcl",
              "properties": {
                "timeSeriesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Timeseries:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          }
                        },
                        {
                          "properties": {
                            "idscope": {
                              "type": "object",
                              "properties": {
                                "ids": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "uint64"
                                  },
                                  "title": "time series ids"
                                }
                              },
                              "title": "Scope:TimeSeriesIdScope"
                            }
                          }
                        }
                      ],
                      "title": "Timeseries:Scope"
                    }
                  },
                  "title": "Acl:Timeseries"
                }
              }
            },
            {
              "title": "apikeysAcl",
              "properties": {
                "apikeysAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "Apikey:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "apikeys owned by the service account making the request",
                              "type": "object"
                            }
                          }
                        },
                        {
                          "properties": {
                            "idscope": {
                              "title": "apikeys owned by the service account with the specified id",
                              "type": "object",
                              "properties": {
                                "ids": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "uint64"
                                  },
                                  "title": "service account ids"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "title": "Apikey:Scope"
                    }
                  },
                  "title": "Acl:Apikey"
                }
              }
            },
            {
              "title": "threedAcl",
              "properties": {
                "threedAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "CREATE",
                          "UPDATE",
                          "DELETE"
                        ],
                        "default": "READ",
                        "title": "Threed:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Threed:Scope"
                    }
                  },
                  "title": "Acl:Threed"
                }
              }
            },
            {
              "title": "sequencesAcl",
              "properties": {
                "sequencesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Sequences:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Sequences:Scope"
                    }
                  },
                  "title": "Acl:Sequences"
                }
              }
            },
            {
              "title": "analyticsAcl",
              "properties": {
                "analyticsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "EXECUTE",
                          "LIST"
                        ],
                        "default": "READ",
                        "title": "Analytics:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Analytics:Scope"
                    }
                  },
                  "title": "Acl:Analytics"
                }
              }
            },
            {
              "title": "digitalTwinAcl",
              "properties": {
                "digitalTwinAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "DigitalTwin:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "DigitalTwin:Scope"
                    }
                  },
                  "title": "Acl:DigitalTwin"
                }
              }
            },
            {
              "title": "relationshipsAcl",
              "properties": {
                "relationshipsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Relationships:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Relationships:Scope"
                    }
                  },
                  "title": "Acl:Relationships"
                }
              }
            },
            {
              "title": "datasetsAcl",
              "properties": {
                "datasetsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Datasets:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Datasets:Scope"
                    }
                  },
                  "title": "Acl:Datasets"
                }
              }
            },
            {
              "title": "seismicAcl",
              "properties": {
                "seismicAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Seismic:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Seismic:Scope"
                    }
                  },
                  "title": "Acl:Seismic"
                }
              }
            },
            {
              "title": "typesAcl",
              "properties": {
                "typesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Types:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Types:Scope"
                    }
                  },
                  "title": "Acl:Types"
                }
              }
            }
          ]
        },
        "title": "Capability"
      },
      "cogniteanalytics_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "EXECUTE",
                "LIST"
              ],
              "default": "READ",
              "title": "Analytics:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Analytics:Scope"
          }
        },
        "title": "Acl:Analytics"
      },
      "cogniteanalytics_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "EXECUTE",
          "LIST"
        ],
        "default": "READ",
        "title": "Analytics:Action"
      },
      "cogniteanalytics_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Analytics:Scope"
      },
      "cogniteapikeys_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "Apikey:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "type": "object",
                    "title": "Scope:All"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "apikeys owned by the service account making the request",
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "idscope": {
                    "title": "apikeys owned by the service account with the specified id",
                    "type": "object",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "title": "service account ids"
                      }
                    }
                  }
                }
              }
            ],
            "title": "Apikey:Scope"
          }
        },
        "title": "Acl:Apikey"
      },
      "cogniteapikeys_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "Apikey:Action"
      },
      "cogniteapikeys_aclIdScope": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "title": "service account ids"
          }
        },
        "title": "Scope:ApikeyIdScope"
      },
      "cogniteapikeys_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "apikeys owned by the service account making the request",
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "idscope": {
                "title": "apikeys owned by the service account with the specified id",
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uint64"
                    },
                    "title": "service account ids"
                  }
                }
              }
            }
          }
        ],
        "title": "Apikey:Scope"
      },
      "cogniteassets_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Asset:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Asset:Scope"
          }
        },
        "title": "Acl:Asset"
      },
      "cogniteassets_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Asset:Action"
      },
      "cogniteassets_aclIdScope": {
        "type": "object",
        "properties": {
          "subtreeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "title": "root asset id (subtrees)"
          }
        },
        "title": "Scope:AssetIdScope"
      },
      "cogniteassets_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Asset:Scope"
      },
      "cognitedatasets_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Datasets:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Datasets:Scope"
          }
        },
        "title": "Acl:Datasets"
      },
      "cognitedatasets_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Datasets:Action"
      },
      "cognitedatasets_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Datasets:Scope"
      },
      "cognitedigitaltwin_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "DigitalTwin:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "DigitalTwin:Scope"
          }
        },
        "title": "Acl:DigitalTwin"
      },
      "cognitedigitaltwin_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "DigitalTwin:Action"
      },
      "cognitedigitaltwin_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "DigitalTwin:Scope"
      },
      "cogniteevents_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Event:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Event:Scope"
          }
        },
        "title": "Acl:Event"
      },
      "cogniteevents_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Event:Action"
      },
      "cogniteevents_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Event:Scope"
      },
      "cognitefiles_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "File:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "File:Scope"
          }
        },
        "title": "Acl:File"
      },
      "cognitefiles_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "File:Action"
      },
      "cognitefiles_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "File:Scope"
      },
      "cognitegroups_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "READ",
                "CREATE",
                "UPDATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "Group:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "title": "all groups",
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "groups the current principal (service account or user) is in",
                    "type": "object"
                  }
                }
              }
            ],
            "title": "Group:Scope"
          }
        },
        "title": "Acl:Group"
      },
      "cognitegroups_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "READ",
          "CREATE",
          "UPDATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "Group:Action"
      },
      "cognitegroups_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "title": "all groups",
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "groups the current principal (service account or user) is in",
                "type": "object"
              }
            }
          }
        ],
        "title": "Group:Scope"
      },
      "cogniteprojects_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "READ",
                "CREATE",
                "UPDATE"
              ],
              "default": "LIST",
              "title": "Project:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Project:Scope"
          }
        },
        "title": "Acl:Project"
      },
      "cogniteprojects_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "READ",
          "CREATE",
          "UPDATE"
        ],
        "default": "LIST",
        "title": "Project:Action"
      },
      "cogniteprojects_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Project:Scope"
      },
      "cogniteraw_aclAcl": {
        "type": "object",
        "description": "Set access control on RAW",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE",
                "LIST"
              ],
              "default": "READ",
              "title": "Raw:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "title": "AllScope",
                "properties": {
                  "all": {
                    "type": "object",
                    "title": "Scope:All"
                  }
                }
              },
              {
                "title": "DatabaseAndTableScope",
                "properties": {
                  "tableScope": {
                    "type": "object",
                    "description": "Scope access to certain tables within a database",
                    "example": {
                      "dbsToTables": {
                        "db1": [
                          "table1",
                          "table2"
                        ],
                        "db2": [
                          "table1",
                          "table2"
                        ]
                      }
                    },
                    "title": "tableScope",
                    "properties": {
                      "dbsToTables": {
                        "type": "object",
                        "title": "dbtoTableScope",
                        "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                        "additionalProperties": {
                          "x-additionalPropertiesName": "databaseName",
                          "type": "array",
                          "example": [
                            "table1",
                            "table2"
                          ],
                          "description": "List of table names within the database",
                          "items": {
                            "type": "string",
                            "example": "table1",
                            "description": "Name of the table"
                          }
                        }
                      }
                    }
                  }
                }
              }
            ],
            "title": "Raw:Scope"
          }
        },
        "title": "Acl:Raw"
      },
      "cogniteraw_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE",
          "LIST"
        ],
        "default": "READ",
        "title": "Raw:Action"
      },
      "cogniteraw_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "title": "AllScope",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            }
          },
          {
            "title": "DatabaseAndTableScope",
            "properties": {
              "tableScope": {
                "type": "object",
                "description": "Scope access to certain tables within a database",
                "example": {
                  "dbsToTables": {
                    "db1": [
                      "table1",
                      "table2"
                    ],
                    "db2": [
                      "table1",
                      "table2"
                    ]
                  }
                },
                "title": "tableScope",
                "properties": {
                  "dbsToTables": {
                    "type": "object",
                    "title": "dbtoTableScope",
                    "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
                    "additionalProperties": {
                      "x-additionalPropertiesName": "databaseName",
                      "type": "array",
                      "example": [
                        "table1",
                        "table2"
                      ],
                      "description": "List of table names within the database",
                      "items": {
                        "type": "string",
                        "example": "table1",
                        "description": "Name of the table"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "title": "Raw:Scope"
      },
      "cogniteraw_aclDbsToTablesScope": {
        "type": "object",
        "description": "Scope access to certain tables within a database",
        "example": {
          "dbsToTables": {
            "db1": [
              "table1",
              "table2"
            ],
            "db2": [
              "table1",
              "table2"
            ]
          }
        },
        "title": "tableScope",
        "properties": {
          "dbsToTables": {
            "type": "object",
            "title": "dbtoTableScope",
            "description": "Scopes access to tables within a database. { database1: [table1, table2] } will give access to table1 and table2 within database1.",
            "additionalProperties": {
              "x-additionalPropertiesName": "databaseName",
              "type": "array",
              "example": [
                "table1",
                "table2"
              ],
              "description": "List of table names within the database",
              "items": {
                "type": "string",
                "example": "table1",
                "description": "Name of the table"
              }
            }
          }
        }
      },
      "cogniterelationships_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Relationships:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Relationships:Scope"
          }
        },
        "title": "Acl:Relationships"
      },
      "cogniterelationships_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Relationships:Action"
      },
      "cogniterelationships_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Relationships:Scope"
      },
      "cognitesecuritycategories_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MEMBEROF",
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "MEMBEROF",
              "title": "SecurityCategory:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "SecurityCategory:Scope"
          }
        },
        "title": "Acl:SecurityCategory"
      },
      "cognitesecuritycategories_aclAction": {
        "type": "string",
        "enum": [
          "MEMBEROF",
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "MEMBEROF",
        "title": "SecurityCategory:Action"
      },
      "cognitesecuritycategories_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "SecurityCategory:Scope"
      },
      "cogniteseismic_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Seismic:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Seismic:Scope"
          }
        },
        "title": "Acl:Seismic"
      },
      "cogniteseismic_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Seismic:Action"
      },
      "cogniteseismic_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Seismic:Scope"
      },
      "cognitesequences_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Sequences:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Sequences:Scope"
          }
        },
        "title": "Acl:Sequences"
      },
      "cognitesequences_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Sequences:Action"
      },
      "cognitesequences_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Sequences:Scope"
      },
      "cognitethreed_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "CREATE",
                "UPDATE",
                "DELETE"
              ],
              "default": "READ",
              "title": "Threed:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Threed:Scope"
          }
        },
        "title": "Acl:Threed"
      },
      "cognitethreed_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "CREATE",
          "UPDATE",
          "DELETE"
        ],
        "default": "READ",
        "title": "Threed:Action"
      },
      "cognitethreed_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Threed:Scope"
      },
      "cognitetimeseries_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Timeseries:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "type": "object",
                    "title": "Scope:All"
                  }
                }
              },
              {
                "properties": {
                  "idscope": {
                    "type": "object",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "title": "time series ids"
                      }
                    },
                    "title": "Scope:TimeSeriesIdScope"
                  }
                }
              }
            ],
            "title": "Timeseries:Scope"
          }
        },
        "title": "Acl:Timeseries"
      },
      "cognitetimeseries_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Timeseries:Action"
      },
      "cognitetimeseries_aclIdScope": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "title": "time series ids"
          }
        },
        "title": "Scope:TimeSeriesIdScope"
      },
      "cognitetimeseries_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            }
          },
          {
            "properties": {
              "idscope": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uint64"
                    },
                    "title": "time series ids"
                  }
                },
                "title": "Scope:TimeSeriesIdScope"
              }
            }
          }
        ],
        "title": "Timeseries:Scope"
      },
      "cognitetypes_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Types:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Types:Scope"
          }
        },
        "title": "Acl:Types"
      },
      "cognitetypes_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Types:Action"
      },
      "cognitetypes_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Types:Scope"
      },
      "cogniteusers_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "User:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "title": "all service accounts",
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "the current principal (user or service account) making the request",
                    "type": "object"
                  }
                }
              }
            ],
            "title": "User:Scope"
          }
        },
        "title": "Acl:User"
      },
      "cogniteusers_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "User:Action"
      },
      "cogniteusers_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "title": "all service accounts",
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "the current principal (user or service account) making the request",
                "type": "object"
              }
            }
          }
        ],
        "title": "User:Scope"
      },
      "generic_aclAllScope": {
        "type": "object",
        "title": "Scope:All"
      },
      "generic_aclCurrentUserScope": {
        "type": "object",
        "title": "Scope:CurrentUser"
      },
      "ProjectName": {
        "type": "string",
        "description": "The display name of the project.",
        "example": "Open Industrial Data"
      },
      "UrlName": {
        "type": "string",
        "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
        "example": "publicdata"
      },
      "DefaultGroupId": {
        "type": "integer",
        "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
        "format": "int64",
        "example": 123871937
      },
      "ValidDomains": {
        "type": "array",
        "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
        "example": [
          "example.com",
          "google.com"
        ],
        "items": {
          "type": "string",
          "example": "example.com",
          "description": "Domain name that can successfully log into your tenant"
        }
      },
      "OutputProjectAuthentication": {
        "type": "object",
        "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
        "properties": {
          "validDomains": {
            "type": "array",
            "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
            "example": [
              "example.com",
              "google.com"
            ],
            "items": {
              "type": "string",
              "example": "example.com",
              "description": "Domain name that can successfully log into your tenant"
            }
          }
        }
      },
      "InputProjectAuthentication": {
        "type": "object",
        "description": "Data about how to authenticate and authorize users",
        "properties": {
          "azureADConfiguration": {
            "type": "object",
            "properties": {
              "appId": {
                "type": "string",
                "description": "Azure application ID. You get this when creating the Azure app."
              },
              "appSecret": {
                "type": "string",
                "description": "Azure application secret. You get this when creating the Azure app."
              },
              "tenantId": {
                "type": "string",
                "description": "Azure tenant ID."
              },
              "appResourceId": {
                "type": "string",
                "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
              }
            },
            "description": "Data specific to Azure AD authentication"
          },
          "validDomains": {
            "type": "array",
            "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
            "example": [
              "example.com",
              "google.com"
            ],
            "items": {
              "type": "string",
              "example": "example.com",
              "description": "Domain name that can successfully log into your tenant"
            }
          },
          "oAuth2Configuration": {
            "type": "object",
            "properties": {
              "loginUrl": {
                "type": "string",
                "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
              },
              "logoutUrl": {
                "type": "string",
                "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
              },
              "tokenUrl": {
                "type": "string",
                "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
              },
              "clientId": {
                "type": "string",
                "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
              },
              "clientSecret": {
                "type": "string",
                "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
              }
            },
            "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
          }
        }
      },
      "AzureADConfigurationDTO": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": "Azure application ID. You get this when creating the Azure app."
          },
          "appSecret": {
            "type": "string",
            "description": "Azure application secret. You get this when creating the Azure app."
          },
          "tenantId": {
            "type": "string",
            "description": "Azure tenant ID."
          },
          "appResourceId": {
            "type": "string",
            "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
          }
        },
        "description": "Data specific to Azure AD authentication"
      },
      "OAuth2ConfigurationDTO": {
        "type": "object",
        "properties": {
          "loginUrl": {
            "type": "string",
            "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
          },
          "logoutUrl": {
            "type": "string",
            "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
          },
          "tokenUrl": {
            "type": "string",
            "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
          }
        },
        "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
      },
      "serviceAccountName": {
        "type": "string",
        "description": "Unique name of the service account",
        "example": "some-internal-service@example.com",
        "title": "name"
      },
      "groups": {
        "type": "array",
        "description": "List of group ids",
        "items": {
          "type": "integer",
          "format": "int64"
        },
        "example": "[238712387, 1283712837, 1238712387]"
      },
      "ServiceAccountInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the service account",
            "example": "some-internal-service@example.com",
            "title": "name"
          },
          "groups": {
            "type": "array",
            "description": "List of group ids",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": "[238712387, 1283712837, 1238712387]"
          }
        }
      },
      "ServiceAccount": {
        "required": [
          "name",
          "id",
          "groups",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the service account",
            "example": "some-internal-service@example.com",
            "title": "name"
          },
          "groups": {
            "type": "array",
            "description": "List of group ids",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": "[238712387, 1283712837, 1238712387]"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "example": false,
            "description": "If this service account has been logically deleted"
          },
          "deletedTime": {
            "type": "integer",
            "format": "int64",
            "description": "Time of deletion"
          }
        }
      },
      "NewApiKeyResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "serviceAccountId",
                "createdTime",
                "status",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The internal ID for the API key."
                },
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The ID of the service account."
                },
                "createdTime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The time of creation in Unix milliseconds."
                },
                "status": {
                  "type": "string",
                  "description": "The status of the API key.",
                  "enum": [
                    "ACTIVE",
                    "DELETED"
                  ],
                  "default": "ACTIVE"
                },
                "value": {
                  "type": "string",
                  "description": "The API key to be used against the API.",
                  "example": "MQ23y87QSDKIJSd87287sdJkjsd"
                }
              }
            }
          }
        }
      },
      "NewApiKeyResponseDTO": {
        "type": "object",
        "required": [
          "id",
          "serviceAccountId",
          "createdTime",
          "status",
          "value"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The internal ID for the API key."
          },
          "serviceAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the service account."
          },
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "description": "The time of creation in Unix milliseconds."
          },
          "status": {
            "type": "string",
            "description": "The status of the API key.",
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "default": "ACTIVE"
          },
          "value": {
            "type": "string",
            "description": "The API key to be used against the API.",
            "example": "MQ23y87QSDKIJSd87287sdJkjsd"
          }
        }
      },
      "DataApiKeyRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "serviceAccountId"
              ],
              "type": "object",
              "properties": {
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "ApiKeyRequest": {
        "required": [
          "serviceAccountId"
        ],
        "type": "object",
        "properties": {
          "serviceAccountId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiKeyResponse": {
        "type": "object",
        "title": "ApiKeyResponse",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApiKeyObject",
              "required": [
                "id",
                "serviceAccountId",
                "createdTime",
                "status"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 91723917823,
                  "description": "The ID of the API key."
                },
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1283712837,
                  "description": "The ID of the service account."
                },
                "createdTime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The time of creation in Unix milliseconds.",
                  "example": 1554897980221
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "ACTIVE",
                    "DELETED"
                  ]
                }
              }
            }
          }
        }
      },
      "DataSecurityCategorySpecDTO": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minLength": 1,
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                }
              }
            }
          }
        }
      },
      "SecurityCategoryResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "id"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                },
                "id": {
                  "type": "integer",
                  "description": "Id of the security category",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "SecurityCategoryWithCursorResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "id"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                },
                "id": {
                  "type": "integer",
                  "description": "Id of the security category",
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of results"
      },
      "SecurityCategorySpecDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the security category",
            "example": "Guarded by vendor x"
          }
        }
      },
      "SecurityCategoryDTO": {
        "required": [
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the security category",
            "example": "Guarded by vendor x"
          },
          "id": {
            "type": "integer",
            "description": "Id of the security category",
            "format": "int64"
          }
        }
      },
      "SequenceWithCursorResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "columns",
                "createdTime",
                "lastUpdatedTime"
              ],
              "description": "Information about the sequence stored in the database",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique cognite-provided identifier for the sequence",
                  "example": 1,
                  "format": "int64",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "example": "Any relevant name",
                  "description": "Name of the sequence"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the sequence"
                },
                "assetId": {
                  "type": "integer",
                  "example": 1221123111,
                  "description": "Optional asset this sequence is associated with",
                  "format": "int64"
                },
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "columns": {
                  "type": "array",
                  "description": "List of column definitions",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "valueType",
                      "createdTime",
                      "lastUpdatedTime"
                    ],
                    "description": "Information about a column stored in the database",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "depth",
                        "description": "Human readable name of the column"
                      },
                      "externalId": {
                        "type": "string",
                        "example": "DPS1",
                        "description": "User provided column identifier (Unique for a given sequence)"
                      },
                      "description": {
                        "type": "string",
                        "example": "Optional description",
                        "description": "Description of the column"
                      },
                      "valueType": {
                        "type": "string",
                        "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                        "default": "DOUBLE",
                        "enum": [
                          "STRING",
                          "DOUBLE",
                          "LONG"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "example": {
                          "extracted-by": "cognite"
                        },
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "createdTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      },
                      "lastUpdatedTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      }
                    }
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "The cursor to get the next page of results (if available). Learn more [here](/dev/concepts/pagination/)."
          }
        }
      },
      "DataResourceIds": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "title": "Select by Id",
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Select by ExternalId",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    }
                  }
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "ColumnExternalId": {
        "description": "User provided column identifier. Should be unique for a given sequence.",
        "type": "string",
        "maxLength": 255,
        "example": "gamma_radiation"
      },
      "DataGetSequence": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "columns",
                "createdTime",
                "lastUpdatedTime"
              ],
              "description": "Information about the sequence stored in the database",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique cognite-provided identifier for the sequence",
                  "example": 1,
                  "format": "int64",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "example": "Any relevant name",
                  "description": "Name of the sequence"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the sequence"
                },
                "assetId": {
                  "type": "integer",
                  "example": 1221123111,
                  "description": "Optional asset this sequence is associated with",
                  "format": "int64"
                },
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "columns": {
                  "type": "array",
                  "description": "List of column definitions",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "valueType",
                      "createdTime",
                      "lastUpdatedTime"
                    ],
                    "description": "Information about a column stored in the database",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "depth",
                        "description": "Human readable name of the column"
                      },
                      "externalId": {
                        "type": "string",
                        "example": "DPS1",
                        "description": "User provided column identifier (Unique for a given sequence)"
                      },
                      "description": {
                        "type": "string",
                        "example": "Optional description",
                        "description": "Description of the column"
                      },
                      "valueType": {
                        "type": "string",
                        "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                        "default": "DOUBLE",
                        "enum": [
                          "STRING",
                          "DOUBLE",
                          "LONG"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "example": {
                          "extracted-by": "cognite"
                        },
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "createdTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      },
                      "lastUpdatedTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      }
                    }
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                }
              }
            }
          }
        }
      },
      "DataCreatedSequence": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "columns",
                "createdTime",
                "lastUpdatedTime"
              ],
              "description": "Information about the sequence stored in the database",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique cognite-provided identifier for the sequence",
                  "example": 1,
                  "format": "int64",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "example": "Any relevant name",
                  "description": "Name of the sequence"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the sequence"
                },
                "assetId": {
                  "type": "integer",
                  "example": 1221123111,
                  "description": "Optional asset this sequence is associated with",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "example": "TRAJ/W1234/WB8821/123123AB",
                  "description": "Projectwide unique identifier for the sequence"
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "columns": {
                  "type": "array",
                  "description": "List of column definitions",
                  "items": {
                    "type": "object",
                    "required": [
                      "externalId",
                      "valueType",
                      "createdTime",
                      "lastUpdatedTime"
                    ],
                    "description": "Information about a column stored in the database",
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "depth",
                        "description": "Human readable name of the column"
                      },
                      "externalId": {
                        "type": "string",
                        "example": "DPS1",
                        "description": "User provided column identifier (Unique for a given sequence)"
                      },
                      "description": {
                        "type": "string",
                        "example": "Optional description",
                        "description": "Description of the column"
                      },
                      "valueType": {
                        "type": "string",
                        "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                        "default": "DOUBLE",
                        "enum": [
                          "STRING",
                          "DOUBLE",
                          "LONG"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "example": {
                          "extracted-by": "cognite"
                        },
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "createdTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      },
                      "lastUpdatedTime": {
                        "type": "integer",
                        "example": 100000000000,
                        "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                        "format": "int64",
                        "readOnly": true
                      }
                    }
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                }
              }
            }
          }
        }
      },
      "DataPostSequence": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "columns"
              ],
              "type": "object",
              "description": "Describes a new sequence",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Any relevant name",
                  "description": "Name of the sequence"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the sequence"
                },
                "assetId": {
                  "type": "integer",
                  "example": 1221123111,
                  "description": "Optional asset this sequence is associated with",
                  "format": "int64"
                },
                "externalId": {
                  "description": "The external ID provided by the client. Must be unique for the resource type.",
                  "type": "string",
                  "maxLength": 255,
                  "example": "my.known.id"
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "columns": {
                  "type": "array",
                  "description": "List of column definitions",
                  "items": {
                    "type": "object",
                    "description": "Describes a new column",
                    "required": [
                      "externalId"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "depth",
                        "description": "Human readable name of the sequence"
                      },
                      "externalId": {
                        "type": "string",
                        "example": "DPS1",
                        "maxLength": 255,
                        "description": "User provided column identifier (Unique for a given sequence)"
                      },
                      "description": {
                        "type": "string",
                        "example": "Optional description",
                        "description": "Description of the column"
                      },
                      "valueType": {
                        "type": "string",
                        "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                        "default": "DOUBLE",
                        "enum": [
                          "STRING",
                          "DOUBLE",
                          "LONG"
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "example": {
                          "extracted-by": "cognite"
                        },
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "minItems": 1,
                  "maxItems": 200
                }
              }
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataSequenceDataDeleteRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Parameters describing datapoints to be deleted",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "Select by Id",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "rows"
                      ],
                      "description": "rows to delete from a sequence",
                      "properties": {
                        "rows": {
                          "type": "array",
                          "items": {
                            "type": "integer",
                            "example": 1,
                            "format": "int64"
                          },
                          "minItems": 1,
                          "maxItems": 10000
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "Select by ExternalId",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "rows"
                      ],
                      "description": "rows to delete from a sequence",
                      "properties": {
                        "rows": {
                          "type": "array",
                          "items": {
                            "type": "integer",
                            "example": 1,
                            "format": "int64"
                          },
                          "minItems": 1,
                          "maxItems": 10000
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "SequenceDataRequest": {
        "type": "object",
        "description": "Parameters describing a query for datapoints.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "Select by Id",
            "allOf": [
              {
                "type": "object",
                "description": "A request for datapoints stored",
                "properties": {
                  "start": {
                    "type": "integer",
                    "description": "Lowest row number included.",
                    "default": 0,
                    "format": "int64"
                  },
                  "end": {
                    "type": "integer",
                    "description": "Get rows up to, but excluding, this row number. Default - No limit",
                    "example": 1,
                    "format": "int64"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Maximum number of rows returned in one request. Api might return less even if there is more data, but it will then provide a cursor for continuation. If there is more data beyond this limit, a cursor will be returned to simplify further fetching of data.",
                    "minimum": 1,
                    "maximum": 10000,
                    "default": 100,
                    "example": 1,
                    "format": "int32"
                  },
                  "cursor": {
                    "type": "string",
                    "description": "Cursor for pagination returned from a previous request. Apart from this cursor, the rest of the request object have be the same as for the original request."
                  },
                  "columns": {
                    "type": "array",
                    "description": "Columns to be included. Specified as list of column externalIds. In case this filter is not set, all available columns will be returned.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 200
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "Select by ExternalId",
            "allOf": [
              {
                "type": "object",
                "description": "A request for datapoints stored",
                "properties": {
                  "start": {
                    "type": "integer",
                    "description": "Lowest row number included.",
                    "default": 0,
                    "format": "int64"
                  },
                  "end": {
                    "type": "integer",
                    "description": "Get rows up to, but excluding, this row number. Default - No limit",
                    "example": 1,
                    "format": "int64"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Maximum number of rows returned in one request. Api might return less even if there is more data, but it will then provide a cursor for continuation. If there is more data beyond this limit, a cursor will be returned to simplify further fetching of data.",
                    "minimum": 1,
                    "maximum": 10000,
                    "default": 100,
                    "example": 1,
                    "format": "int32"
                  },
                  "cursor": {
                    "type": "string",
                    "description": "Cursor for pagination returned from a previous request. Apart from this cursor, the rest of the request object have be the same as for the original request."
                  },
                  "columns": {
                    "type": "array",
                    "description": "Columns to be included. Specified as list of column externalIds. In case this filter is not set, all available columns will be returned.",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 200
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "SequenceDeleteDataRequest": {
        "type": "object",
        "description": "Parameters describing datapoints to be deleted",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "Select by Id",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "rows"
                ],
                "description": "rows to delete from a sequence",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "example": 1,
                      "format": "int64"
                    },
                    "minItems": 1,
                    "maxItems": 10000
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "Select by ExternalId",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "rows"
                ],
                "description": "rows to delete from a sequence",
                "properties": {
                  "rows": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "example": 1,
                      "format": "int64"
                    },
                    "minItems": 1,
                    "maxItems": 10000
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "DataSequencePostData": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "title": "Select by Id",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "columns",
                        "rows"
                      ],
                      "description": "Data from a sequence",
                      "properties": {
                        "columns": {
                          "type": "array",
                          "description": "Column external ids in the same order as the values for each row",
                          "items": {
                            "type": "string"
                          },
                          "minItems": 1,
                          "maxItems": 200
                        },
                        "rows": {
                          "type": "array",
                          "description": "List of row information",
                          "items": {
                            "type": "object",
                            "description": "A single row of datapoints",
                            "required": [
                              "rowNumber",
                              "values"
                            ],
                            "properties": {
                              "rowNumber": {
                                "type": "integer",
                                "description": "The row number for this row",
                                "example": 1,
                                "minimum": 1,
                                "format": "int64"
                              },
                              "values": {
                                "type": "array",
                                "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                                "items": {
                                  "type": "object",
                                  "description": "Json element of type corresponding to the column type. May include NULL!",
                                  "example": 1000123
                                },
                                "minItems": 1,
                                "maxItems": 200
                              }
                            }
                          },
                          "minItems": 1,
                          "maxItems": 10000
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "title": "Select by ExternalId",
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "columns",
                        "rows"
                      ],
                      "description": "Data from a sequence",
                      "properties": {
                        "columns": {
                          "type": "array",
                          "description": "Column external ids in the same order as the values for each row",
                          "items": {
                            "type": "string"
                          },
                          "minItems": 1,
                          "maxItems": 200
                        },
                        "rows": {
                          "type": "array",
                          "description": "List of row information",
                          "items": {
                            "type": "object",
                            "description": "A single row of datapoints",
                            "required": [
                              "rowNumber",
                              "values"
                            ],
                            "properties": {
                              "rowNumber": {
                                "type": "integer",
                                "description": "The row number for this row",
                                "example": 1,
                                "minimum": 1,
                                "format": "int64"
                              },
                              "values": {
                                "type": "array",
                                "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                                "items": {
                                  "type": "object",
                                  "description": "Json element of type corresponding to the column type. May include NULL!",
                                  "example": 1000123
                                },
                                "minItems": 1,
                                "maxItems": 200
                              }
                            }
                          },
                          "minItems": 1,
                          "maxItems": 10000
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ],
              "example": {
                "externalId": "DL/DRILL412/20190103/T3",
                "columns": [
                  "Depth",
                  "DepthSource",
                  "PowerSetting"
                ],
                "rows": [
                  {
                    "rowNumber": 1,
                    "values": [
                      23331.3,
                      "s2",
                      61
                    ]
                  }
                ]
              }
            },
            "minItems": 1,
            "maxItems": 1000
          }
        },
        "example": {
          "items": [
            {
              "externalId": "DL/DRILL412/20190103/T3",
              "columns": [
                "Depth",
                "DepthSource",
                "PowerSetting"
              ],
              "rows": [
                {
                  "rowNumber": 1,
                  "values": [
                    23331.3,
                    "s2",
                    61
                  ]
                }
              ]
            }
          ]
        }
      },
      "DataSequenceChange": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "title": "Select by Id",
                  "allOf": [
                    {
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "description": "A description of changes that should be done to the sequence",
                          "properties": {
                            "name": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "assetId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "title": "Select by ExternalId",
                  "allOf": [
                    {
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "description": "A description of changes that should be done to the sequence",
                          "properties": {
                            "name": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "description": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "assetId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ]
                            },
                            "externalId": {
                              "title": "set",
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "set",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "title": "remove",
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "example": true
                                    }
                                  }
                                }
                              ],
                              "description": "Set a new value for the string, or remove the value."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                              "oneOf": [
                                {
                                  "title": "set",
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "title": "add/remove",
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with the specified keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "PostSequenceDTO": {
        "required": [
          "columns"
        ],
        "type": "object",
        "description": "Describes a new sequence",
        "properties": {
          "name": {
            "type": "string",
            "example": "Any relevant name",
            "description": "Name of the sequence"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the sequence"
          },
          "assetId": {
            "type": "integer",
            "example": 1221123111,
            "description": "Optional asset this sequence is associated with",
            "format": "int64"
          },
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "columns": {
            "type": "array",
            "description": "List of column definitions",
            "items": {
              "type": "object",
              "description": "Describes a new column",
              "required": [
                "externalId"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "depth",
                  "description": "Human readable name of the sequence"
                },
                "externalId": {
                  "type": "string",
                  "example": "DPS1",
                  "maxLength": 255,
                  "description": "User provided column identifier (Unique for a given sequence)"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the column"
                },
                "valueType": {
                  "type": "string",
                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                  "default": "DOUBLE",
                  "enum": [
                    "STRING",
                    "DOUBLE",
                    "LONG"
                  ]
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "minItems": 1,
            "maxItems": 200
          }
        }
      },
      "GetSequenceDTO": {
        "type": "object",
        "required": [
          "id",
          "columns",
          "createdTime",
          "lastUpdatedTime"
        ],
        "description": "Information about the sequence stored in the database",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique cognite-provided identifier for the sequence",
            "example": 1,
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "Any relevant name",
            "description": "Name of the sequence"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the sequence"
          },
          "assetId": {
            "type": "integer",
            "example": 1221123111,
            "description": "Optional asset this sequence is associated with",
            "format": "int64"
          },
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value. Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "columns": {
            "type": "array",
            "description": "List of column definitions",
            "items": {
              "type": "object",
              "required": [
                "id",
                "valueType",
                "createdTime",
                "lastUpdatedTime"
              ],
              "description": "Information about a column stored in the database",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "depth",
                  "description": "Human readable name of the column"
                },
                "externalId": {
                  "type": "string",
                  "example": "DPS1",
                  "description": "User provided column identifier (Unique for a given sequence)"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the column"
                },
                "valueType": {
                  "type": "string",
                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                  "default": "DOUBLE",
                  "enum": [
                    "STRING",
                    "DOUBLE",
                    "LONG"
                  ]
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                }
              }
            }
          },
          "createdTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          },
          "lastUpdatedTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "CreatedSequenceDTO": {
        "type": "object",
        "required": [
          "id",
          "columns",
          "createdTime",
          "lastUpdatedTime"
        ],
        "description": "Information about the sequence stored in the database",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique cognite-provided identifier for the sequence",
            "example": 1,
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "Any relevant name",
            "description": "Name of the sequence"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the sequence"
          },
          "assetId": {
            "type": "integer",
            "example": 1221123111,
            "description": "Optional asset this sequence is associated with",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "example": "TRAJ/W1234/WB8821/123123AB",
            "description": "Projectwide unique identifier for the sequence"
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "columns": {
            "type": "array",
            "description": "List of column definitions",
            "items": {
              "type": "object",
              "required": [
                "externalId",
                "valueType",
                "createdTime",
                "lastUpdatedTime"
              ],
              "description": "Information about a column stored in the database",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "depth",
                  "description": "Human readable name of the column"
                },
                "externalId": {
                  "type": "string",
                  "example": "DPS1",
                  "description": "User provided column identifier (Unique for a given sequence)"
                },
                "description": {
                  "type": "string",
                  "example": "Optional description",
                  "description": "Description of the column"
                },
                "valueType": {
                  "type": "string",
                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                  "default": "DOUBLE",
                  "enum": [
                    "STRING",
                    "DOUBLE",
                    "LONG"
                  ]
                },
                "metadata": {
                  "type": "object",
                  "example": {
                    "extracted-by": "cognite"
                  },
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "example": 100000000000,
                  "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
                  "format": "int64",
                  "readOnly": true
                }
              }
            }
          },
          "createdTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          },
          "lastUpdatedTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "PostSequenceColumnDTO": {
        "type": "object",
        "description": "Describes a new column",
        "required": [
          "externalId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "depth",
            "description": "Human readable name of the sequence"
          },
          "externalId": {
            "type": "string",
            "example": "DPS1",
            "maxLength": 255,
            "description": "User provided column identifier (Unique for a given sequence)"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the column"
          },
          "valueType": {
            "type": "string",
            "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
            "default": "DOUBLE",
            "enum": [
              "STRING",
              "DOUBLE",
              "LONG"
            ]
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "GetSequenceColumnDTO": {
        "type": "object",
        "required": [
          "id",
          "valueType",
          "createdTime",
          "lastUpdatedTime"
        ],
        "description": "Information about a column stored in the database",
        "properties": {
          "name": {
            "type": "string",
            "example": "depth",
            "description": "Human readable name of the column"
          },
          "externalId": {
            "type": "string",
            "example": "DPS1",
            "description": "User provided column identifier (Unique for a given sequence)"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the column"
          },
          "valueType": {
            "type": "string",
            "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
            "default": "DOUBLE",
            "enum": [
              "STRING",
              "DOUBLE",
              "LONG"
            ]
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          },
          "lastUpdatedTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "CreatedSequenceColumnDTO": {
        "type": "object",
        "required": [
          "externalId",
          "valueType",
          "createdTime",
          "lastUpdatedTime"
        ],
        "description": "Information about a column stored in the database",
        "properties": {
          "name": {
            "type": "string",
            "example": "depth",
            "description": "Human readable name of the column"
          },
          "externalId": {
            "type": "string",
            "example": "DPS1",
            "description": "User provided column identifier (Unique for a given sequence)"
          },
          "description": {
            "type": "string",
            "example": "Optional description",
            "description": "Description of the column"
          },
          "valueType": {
            "type": "string",
            "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
            "default": "DOUBLE",
            "enum": [
              "STRING",
              "DOUBLE",
              "LONG"
            ]
          },
          "metadata": {
            "type": "object",
            "example": {
              "extracted-by": "cognite"
            },
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "Time when this asset was created in CDF in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          },
          "lastUpdatedTime": {
            "type": "integer",
            "example": 100000000000,
            "description": "The last time this asset was updated in CDF, in milliseconds since Jan 1, 1970.",
            "format": "int64",
            "readOnly": true
          }
        }
      },
      "SequenceDataRequestDTO": {
        "type": "object",
        "description": "A request for datapoints stored",
        "properties": {
          "start": {
            "type": "integer",
            "description": "Lowest row number included.",
            "default": 0,
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "description": "Get rows up to, but excluding, this row number. Default - No limit",
            "example": 1,
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of rows returned in one request. Api might return less even if there is more data, but it will then provide a cursor for continuation. If there is more data beyond this limit, a cursor will be returned to simplify further fetching of data.",
            "minimum": 1,
            "maximum": 10000,
            "default": 100,
            "example": 1,
            "format": "int32"
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination returned from a previous request. Apart from this cursor, the rest of the request object have be the same as for the original request."
          },
          "columns": {
            "type": "array",
            "description": "Columns to be included. Specified as list of column externalIds. In case this filter is not set, all available columns will be returned.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 200
          }
        }
      },
      "SequenceDataDeleteRequestDTO": {
        "type": "object",
        "required": [
          "rows"
        ],
        "description": "rows to delete from a sequence",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 1,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 10000
          }
        }
      },
      "SequenceGetData": {
        "type": "object",
        "required": [
          "id",
          "columns",
          "rows"
        ],
        "description": "Data from a sequence",
        "properties": {
          "id": {
            "description": "A server-generated ID for the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "externalId": {
            "description": "The external ID provided by the client. Must be unique for the resource type.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.id"
          },
          "columns": {
            "type": "array",
            "description": "Column information in order given by data",
            "items": {
              "type": "object",
              "description": "Column information returned on data requests",
              "properties": {
                "externalId": {
                  "type": "string",
                  "example": "DPS1",
                  "description": "User provided column identifier (Unique for a given sequence)"
                },
                "name": {
                  "type": "string",
                  "example": "Depth sensor 1",
                  "description": "Human readable name of the column"
                },
                "valueType": {
                  "type": "string",
                  "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
                  "default": "DOUBLE",
                  "enum": [
                    "STRING",
                    "DOUBLE",
                    "LONG"
                  ]
                }
              }
            }
          },
          "rows": {
            "type": "array",
            "description": "List of row information",
            "items": {
              "type": "object",
              "description": "A single row of datapoints",
              "required": [
                "rowNumber",
                "values"
              ],
              "properties": {
                "rowNumber": {
                  "type": "integer",
                  "description": "The row number for this row",
                  "example": 1,
                  "minimum": 1,
                  "format": "int64"
                },
                "values": {
                  "type": "array",
                  "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                  "items": {
                    "type": "object",
                    "description": "Json element of type corresponding to the column type. May include NULL!",
                    "example": 1000123
                  },
                  "minItems": 1,
                  "maxItems": 200
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "example": {
          "id": 1112,
          "externalId": "DL/DRILL412/20190103/T3",
          "columns": [
            {
              "externalId": "Depth"
            },
            {
              "externalId": "DepthSource"
            },
            {
              "externalId": "PowerSetting"
            }
          ],
          "rows": [
            {
              "rowNumber": 1,
              "values": [
                23331.3,
                "s2",
                61
              ]
            }
          ]
        }
      },
      "SequencePostData": {
        "type": "object",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "title": "Select by Id",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "columns",
                  "rows"
                ],
                "description": "Data from a sequence",
                "properties": {
                  "columns": {
                    "type": "array",
                    "description": "Column external ids in the same order as the values for each row",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 200
                  },
                  "rows": {
                    "type": "array",
                    "description": "List of row information",
                    "items": {
                      "type": "object",
                      "description": "A single row of datapoints",
                      "required": [
                        "rowNumber",
                        "values"
                      ],
                      "properties": {
                        "rowNumber": {
                          "type": "integer",
                          "description": "The row number for this row",
                          "example": 1,
                          "minimum": 1,
                          "format": "int64"
                        },
                        "values": {
                          "type": "array",
                          "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                          "items": {
                            "type": "object",
                            "description": "Json element of type corresponding to the column type. May include NULL!",
                            "example": 1000123
                          },
                          "minItems": 1,
                          "maxItems": 200
                        }
                      }
                    },
                    "minItems": 1,
                    "maxItems": 10000
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "title": "Select by ExternalId",
            "allOf": [
              {
                "type": "object",
                "required": [
                  "columns",
                  "rows"
                ],
                "description": "Data from a sequence",
                "properties": {
                  "columns": {
                    "type": "array",
                    "description": "Column external ids in the same order as the values for each row",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 200
                  },
                  "rows": {
                    "type": "array",
                    "description": "List of row information",
                    "items": {
                      "type": "object",
                      "description": "A single row of datapoints",
                      "required": [
                        "rowNumber",
                        "values"
                      ],
                      "properties": {
                        "rowNumber": {
                          "type": "integer",
                          "description": "The row number for this row",
                          "example": 1,
                          "minimum": 1,
                          "format": "int64"
                        },
                        "values": {
                          "type": "array",
                          "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                          "items": {
                            "type": "object",
                            "description": "Json element of type corresponding to the column type. May include NULL!",
                            "example": 1000123
                          },
                          "minItems": 1,
                          "maxItems": 200
                        }
                      }
                    },
                    "minItems": 1,
                    "maxItems": 10000
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ],
        "example": {
          "externalId": "DL/DRILL412/20190103/T3",
          "columns": [
            "Depth",
            "DepthSource",
            "PowerSetting"
          ],
          "rows": [
            {
              "rowNumber": 1,
              "values": [
                23331.3,
                "s2",
                61
              ]
            }
          ]
        }
      },
      "SequenceDataInsertion": {
        "type": "object",
        "required": [
          "columns",
          "rows"
        ],
        "description": "Data from a sequence",
        "properties": {
          "columns": {
            "type": "array",
            "description": "Column external ids in the same order as the values for each row",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "maxItems": 200
          },
          "rows": {
            "type": "array",
            "description": "List of row information",
            "items": {
              "type": "object",
              "description": "A single row of datapoints",
              "required": [
                "rowNumber",
                "values"
              ],
              "properties": {
                "rowNumber": {
                  "type": "integer",
                  "description": "The row number for this row",
                  "example": 1,
                  "minimum": 1,
                  "format": "int64"
                },
                "values": {
                  "type": "array",
                  "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
                  "items": {
                    "type": "object",
                    "description": "Json element of type corresponding to the column type. May include NULL!",
                    "example": 1000123
                  },
                  "minItems": 1,
                  "maxItems": 200
                }
              }
            },
            "minItems": 1,
            "maxItems": 10000
          }
        }
      },
      "BasicGetSequenceColumnInfo": {
        "type": "object",
        "description": "Column information returned on data requests",
        "properties": {
          "externalId": {
            "type": "string",
            "example": "DPS1",
            "description": "User provided column identifier (Unique for a given sequence)"
          },
          "name": {
            "type": "string",
            "example": "Depth sensor 1",
            "description": "Human readable name of the column"
          },
          "valueType": {
            "type": "string",
            "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
            "default": "DOUBLE",
            "enum": [
              "STRING",
              "DOUBLE",
              "LONG"
            ]
          }
        }
      },
      "SequenceRowDTO": {
        "type": "object",
        "description": "A single row of datapoints",
        "required": [
          "rowNumber",
          "values"
        ],
        "properties": {
          "rowNumber": {
            "type": "integer",
            "description": "The row number for this row",
            "example": 1,
            "minimum": 1,
            "format": "int64"
          },
          "values": {
            "type": "array",
            "description": "List of values in order defined in the columns field (Number of items must match. Null is accepted for missing values. String values must be no longer than 256 characters)",
            "items": {
              "type": "object",
              "description": "Json element of type corresponding to the column type. May include NULL!",
              "example": 1000123
            },
            "minItems": 1,
            "maxItems": 200
          }
        }
      },
      "SequenceItemDTO": {
        "type": "object",
        "description": "Json element of type corresponding to the column type. May include NULL!",
        "example": 1000123
      },
      "SequencesUpdate": {
        "oneOf": [
          {
            "title": "Select by Id",
            "allOf": [
              {
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "description": "A description of changes that should be done to the sequence",
                    "properties": {
                      "name": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "assetId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "A server-generated ID for the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "title": "Select by ExternalId",
            "allOf": [
              {
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "description": "A description of changes that should be done to the sequence",
                    "properties": {
                      "name": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "description": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "assetId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ]
                      },
                      "externalId": {
                        "title": "set",
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "title": "set",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "example": true
                              }
                            }
                          }
                        ],
                        "description": "Set a new value for the string, or remove the value."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                        "oneOf": [
                          {
                            "title": "set",
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "title": "add/remove",
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with the specified keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "The external ID provided by the client. Must be unique for the resource type.",
                    "type": "string",
                    "maxLength": 255,
                    "example": "my.known.id"
                  }
                }
              }
            ]
          }
        ]
      },
      "SequencesUpdateById": {
        "title": "Select by Id",
        "allOf": [
          {
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "description": "A description of changes that should be done to the sequence",
                "properties": {
                  "name": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "assetId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "A server-generated ID for the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "SequencesUpdateByExternalId": {
        "title": "Select by ExternalId",
        "allOf": [
          {
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "description": "A description of changes that should be done to the sequence",
                "properties": {
                  "name": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "description": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "assetId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ]
                  },
                  "externalId": {
                    "title": "set",
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "title": "set",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "title": "remove",
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    ],
                    "description": "Set a new value for the string, or remove the value."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                    "oneOf": [
                      {
                        "title": "set",
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "title": "add/remove",
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with the specified keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "The external ID provided by the client. Must be unique for the resource type.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.id"
              }
            }
          }
        ]
      },
      "SequenceChangeDTO": {
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "description": "A description of changes that should be done to the sequence",
            "properties": {
              "name": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "description": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "assetId": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ]
              },
              "externalId": {
                "title": "set",
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "title": "set",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "title": "remove",
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "example": true
                      }
                    }
                  }
                ],
                "description": "Set a new value for the string, or remove the value."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                "oneOf": [
                  {
                    "title": "set",
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "title": "add/remove",
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with the specified keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "SequenceFilter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Return only sequences with this *exact* name."
          },
          "externalIdPrefix": {
            "description": "Filter by this (case-sensitive) prefix for the external ID.",
            "type": "string",
            "maxLength": 255,
            "example": "my.known.prefix"
          },
          "metadata": {
            "description": "Filter the sequences by metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
            "example": {
              "key1": "value1",
              "key2": "value2"
            },
            "type": "object"
          },
          "assetIds": {
            "type": "array",
            "description": "Return only sequences linked to one of the specified assets.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true
          },
          "rootAssetIds": {
            "type": "array",
            "description": "Return only sequences linked to assets with one of these assets as the root asset.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "items": {
              "description": "A server-generated ID for the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true
          },
          "createdTime": {
            "description": "Filter out sequences with createdTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Filter out sequences with lastUpdatedTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        }
      },
      "SequenceSearch": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Prefix and fuzzy search on name.",
            "type": "string"
          },
          "description": {
            "description": "Prefix and fuzzy search on description.",
            "type": "string"
          },
          "query": {
            "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
            "type": "string"
          }
        }
      },
      "SequencesSearchDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filtering parameters",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Return only sequences with this *exact* name."
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              },
              "metadata": {
                "description": "Filter the sequences by metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "type": "object"
              },
              "assetIds": {
                "type": "array",
                "description": "Return only sequences linked to one of the specified assets.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "rootAssetIds": {
                "type": "array",
                "description": "Return only sequences linked to assets with one of these assets as the root asset.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "createdTime": {
                "description": "Filter out sequences with createdTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Filter out sequences with lastUpdatedTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              }
            }
          },
          "search": {
            "description": "Search parameters",
            "type": "object",
            "properties": {
              "name": {
                "description": "Prefix and fuzzy search on name.",
                "type": "string"
              },
              "description": {
                "description": "Prefix and fuzzy search on description.",
                "type": "string"
              },
              "query": {
                "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                "type": "string"
              }
            }
          },
          "limit": {
            "description": "Return up to this many results.",
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 100
          }
        }
      },
      "SequencesAdvancedListDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filtering parameters",
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Return only sequences with this *exact* name."
              },
              "externalIdPrefix": {
                "description": "Filter by this (case-sensitive) prefix for the external ID.",
                "type": "string",
                "maxLength": 255,
                "example": "my.known.prefix"
              },
              "metadata": {
                "description": "Filter the sequences by metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "type": "object"
              },
              "assetIds": {
                "type": "array",
                "description": "Return only sequences linked to one of the specified assets.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "rootAssetIds": {
                "type": "array",
                "description": "Return only sequences linked to assets with one of these assets as the root asset.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "A server-generated ID for the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "createdTime": {
                "description": "Filter out sequences with createdTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Filter out sequences with lastUpdatedTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              }
            }
          },
          "limit": {
            "description": "Return up to this many results per page.",
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 100
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for paging trough results. Still keep the filter in subsequent requests."
          }
        }
      },
      "SequenceValueTypeEnum": {
        "type": "string",
        "description": "What type the datapoints in a column will have. DOUBLE is restricted to the range [-1E100, 1E100]",
        "default": "DOUBLE",
        "enum": [
          "STRING",
          "DOUBLE",
          "LONG"
        ]
      }
    },
    "parameters": {
      "project": {
        "in": "path",
        "name": "project",
        "required": true,
        "description": "The project name.",
        "schema": {
          "type": "string",
          "example": "publicdata"
        }
      },
      "partition": {
        "in": "query",
        "name": "partition",
        "required": false,
        "description": "Splits the data set into N partitions.\nYou need to follow the cursors within each partition in order to receive all the data.\nExample: 1/10\n",
        "schema": {
          "type": "string",
          "example": "1/10"
        }
      },
      "CogniteInternalId": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "description": "A server-generated ID for the object.",
          "type": "integer",
          "minimum": 1,
          "maximum": 9007199254740991,
          "format": "int64"
        }
      },
      "Offset": {
        "name": "offset",
        "description": "Offset from the first result. Sum of limit and offset must not exceed 1000.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "maximum": 1000
        }
      },
      "Limit": {
        "name": "limit",
        "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if you specify a higher limit.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 1000
        }
      },
      "Cursor": {
        "name": "cursor",
        "description": "Cursor for paging through results.",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo"
        }
      },
      "Name": {
        "name": "name",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "Name of the file.",
          "maxLength": 256
        }
      },
      "ModelId": {
        "name": "modelId",
        "in": "path",
        "description": "Model ID.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "RevisionId": {
        "name": "revisionId",
        "in": "path",
        "description": "Revision ID.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "responses": {
      "MissingField": {
        "description": "Missing required fields.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Some required fields are missing.",
              "required": [
                "code",
                "message",
                "missingFields"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "HTTP status code.",
                  "format": "int32",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "Error message."
                },
                "missingFields": {
                  "uniqueItems": true,
                  "type": "array",
                  "description": "Fields that are missing.",
                  "items": {
                    "type": "object",
                    "description": "Fields that are missing."
                  }
                }
              }
            }
          }
        }
      },
      "EmptyResponse": {
        "description": "Empty response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "The response for a failed request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "description": "Cognite API error.",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code.",
                      "format": "int32",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "Could not authenticate."
                    },
                    "missing": {
                      "type": "array",
                      "description": "List of lookup objects that do not match any results.",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "List of objects that are not unique.",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AssetDataWithCursorResponse": {
        "description": "Paged response with list of assets.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the asset.",
                            "minLength": 1,
                            "maxLength": 140
                          },
                          "parentId": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the asset.",
                            "maxLength": 500
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "maxLength": 128,
                            "description": "The source of the asset."
                          }
                        },
                        "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                      },
                      {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "rootId",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "createdTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "rootId": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "aggregates": {
                            "description": "Aggregated metrics of the asset",
                            "type": "object",
                            "properties": {
                              "childCount": {
                                "type": "integer",
                                "description": "Number of direct descendants for the asset",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "nextCursor": {
                  "type": "string",
                  "description": "The cursor to get the next page of results (if available)."
                }
              },
              "description": "A list of objects along with possible cursors to get the next or previous page of results."
            }
          }
        }
      },
      "AssetDataResponse": {
        "description": "Response with list of assets.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the asset.",
                            "minLength": 1,
                            "maxLength": 140
                          },
                          "parentId": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the asset.",
                            "maxLength": 500
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "maxLength": 128,
                            "description": "The source of the asset."
                          }
                        },
                        "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                      },
                      {
                        "type": "object",
                        "required": [
                          "id"
                        ],
                        "properties": {
                          "id": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "rootId",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "createdTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "rootId": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "aggregates": {
                            "description": "Aggregated metrics of the asset",
                            "type": "object",
                            "properties": {
                              "childCount": {
                                "type": "integer",
                                "description": "Number of direct descendants for the asset",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "AssetResponse": {
        "description": "Response with a single asset.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the asset.",
                      "minLength": 1,
                      "maxLength": 140
                    },
                    "parentId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "maxLength": 128,
                      "description": "The source of the asset."
                    }
                  },
                  "description": "A representation of a physical asset, for example a factory or a piece of equipment."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "rootId",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "rootId": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "aggregates": {
                      "description": "Aggregated metrics of the asset",
                      "type": "object",
                      "properties": {
                        "childCount": {
                          "type": "integer",
                          "description": "Number of direct descendants for the asset",
                          "format": "int32",
                          "minimum": 0
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventDataResponse": {
        "description": "Paged response with list of events",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "startTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "type": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Type of the event, e.g 'failure'."
                              },
                              "subtype": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Subtype of the event, e.g 'electrical'."
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipment that this event relates to.",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventResponse": {
        "description": "response with list of events",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "startTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventDataWithCursorResponse": {
        "description": "Paged response with list of events",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              },
                              "startTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "type": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Type of the event, e.g 'failure'."
                              },
                              "subtype": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Subtype of the event, e.g 'electrical'."
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipment that this event relates to.",
                                "items": {
                                  "description": "A server-generated ID for the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "required": [
                              "id"
                            ],
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              ]
            }
          }
        }
      },
      "FileMetadataResponse": {
        "description": "The response for a successful GET files/id operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "The external ID provided by the client. Must be unique for the resource type.",
                      "type": "string",
                      "maxLength": 255,
                      "example": "my.known.id"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 256
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 256,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "A server-generated ID for the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    },
                    "sourceCreatedTime": {
                      "description": "The timestamp for when the file was originally created in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "sourceModifiedTime": {
                      "description": "The timestamp for when the file was last modified in the source system.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "A server-generated ID for the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UploadFileMetadataResponse": {
        "description": "The response for a successful files operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "The external ID provided by the client. Must be unique for the resource type.",
                          "type": "string",
                          "maxLength": 255,
                          "example": "my.known.id"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the file.",
                          "maxLength": 256
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of the file."
                        },
                        "mimeType": {
                          "maxLength": 256,
                          "type": "string",
                          "example": "image/jpeg",
                          "description": "File type. E.g. text/plain, application/pdf, .."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "maxItems": 100,
                          "minItems": 1
                        },
                        "sourceCreatedTime": {
                          "description": "The timestamp for when the file was originally created in the source system.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "sourceModifiedTime": {
                          "description": "The timestamp for when the file was last modified in the source system.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "uploaded",
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "id": {
                          "description": "A server-generated ID for the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "uploaded": {
                          "type": "boolean",
                          "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                          "example": true
                        },
                        "uploadedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": [
                    "uploadUrl"
                  ],
                  "properties": {
                    "uploadUrl": {
                      "description": "The URL where the file contents should be uploaded.",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileMetadataWithCursorResponse": {
        "description": "The response for a successful files/list operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 256
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of the file."
                          },
                          "mimeType": {
                            "maxLength": 256,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "maxItems": 100,
                            "minItems": 1
                          },
                          "sourceCreatedTime": {
                            "description": "The timestamp for when the file was originally created in the source system.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "sourceModifiedTime": {
                            "description": "The timestamp for when the file was last modified in the source system.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "id",
                          "uploaded",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "id": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "uploaded": {
                            "type": "boolean",
                            "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                            "example": true
                          },
                          "uploadedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "createdTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    ]
                  }
                },
                "nextCursor": {
                  "type": "string",
                  "description": "Cursor to get the next page of results (if available)."
                }
              },
              "description": "A list of objects along with possible cursors to get the next page of results"
            }
          }
        }
      },
      "FileResponse": {
        "description": "The response for a successful files/byids, files/search or files/update operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "The external ID provided by the client. Must be unique for the resource type.",
                            "type": "string",
                            "maxLength": 255,
                            "example": "my.known.id"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 256
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of the file."
                          },
                          "mimeType": {
                            "maxLength": 256,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32 bytes, value 512 bytes, up to 16 key-value pairs.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "items": {
                              "description": "A server-generated ID for the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "maxItems": 100,
                            "minItems": 1
                          },
                          "sourceCreatedTime": {
                            "description": "The timestamp for when the file was originally created in the source system.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "sourceModifiedTime": {
                            "description": "The timestamp for when the file was last modified in the source system.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "id",
                          "uploaded",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "id": {
                            "description": "A server-generated ID for the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "uploaded": {
                            "type": "boolean",
                            "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                            "example": true
                          },
                          "uploadedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "createdTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "DataWithLinks": {
        "description": "The response for a successful files/downloadlink operation.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "downloadUrl": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "A server-generated ID for the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "The external ID provided by the client. Must be unique for the resource type.",
                                "type": "string",
                                "maxLength": 255,
                                "example": "my.known.id"
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "LoginStatusResponse": {
        "description": "Information about the current logged in entity",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "LoginStatusResponse",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "user",
                    "loggedIn",
                    "project",
                    "projectId"
                  ],
                  "properties": {
                    "user": {
                      "type": "string",
                      "description": "The user principal, e.g john.doe@corporation.com.",
                      "example": "tom@example.com"
                    },
                    "loggedIn": {
                      "type": "boolean",
                      "description": "Whether the user is logged in or not.",
                      "example": true
                    },
                    "project": {
                      "type": "string",
                      "description": "Name of project user belongs to",
                      "example": "digitalrevolution"
                    },
                    "projectId": {
                      "type": "integer",
                      "description": "Internal project id of the project",
                      "format": "int64",
                      "example": 137238723719
                    },
                    "apiKeyId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                    }
                  },
                  "description": "Represents the current authentication status of the request"
                }
              }
            }
          }
        }
      },
      "ProjectResponse": {
        "description": "Information about the project",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "name",
                "urlName"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The display name of the project.",
                  "example": "Open Industrial Data"
                },
                "urlName": {
                  "type": "string",
                  "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                  "example": "publicdata"
                },
                "defaultGroupId": {
                  "type": "integer",
                  "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                  "format": "int64",
                  "example": 123871937
                },
                "authentication": {
                  "type": "object",
                  "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                  "properties": {
                    "validDomains": {
                      "type": "array",
                      "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                      "example": [
                        "example.com",
                        "google.com"
                      ],
                      "items": {
                        "type": "string",
                        "example": "example.com",
                        "description": "Domain name that can successfully log into your tenant"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ServiceAccountResponse": {
        "description": "List of service accounts",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of service accounts",
                  "items": {
                    "required": [
                      "name",
                      "id",
                      "groups",
                      "isDeleted"
                    ],
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique name of the service account",
                        "example": "some-internal-service@example.com",
                        "title": "name"
                      },
                      "groups": {
                        "type": "array",
                        "description": "List of group ids",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "example": "[238712387, 1283712837, 1238712387]"
                      },
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "isDeleted": {
                        "type": "boolean",
                        "example": false,
                        "description": "If this service account has been logically deleted"
                      },
                      "deletedTime": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Time of deletion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "api-key": []
    },
    {
      "token": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Core resources",
      "tags": [
        "Assets",
        "Time series",
        "Events",
        "Files",
        "Sequences",
        "Raw"
      ]
    },
    {
      "name": "3D",
      "tags": [
        "3D Models",
        "3D Model Revisions",
        "3D Files",
        "3D Asset Mapping"
      ]
    },
    {
      "name": "Identity and access management",
      "tags": [
        "Projects",
        "Service accounts",
        "API keys",
        "Groups",
        "Security categories"
      ]
    },
    {
      "name": "Authentication",
      "tags": [
        "Login",
        "Logout"
      ]
    }
  ],
  "tags": [
    {
      "name": "Assets",
      "description": "The assets resource type stores digital representations of objects or  groups of objects from the physical world. Assets are organized in hierarchies.  For example, a water pump asset can be part of a subsystem asset on an  oil platform asset."
    },
    {
      "name": "Events",
      "description": "Event objects store complex information about multiple assets over a time period. For example, an event can describe two hours of maintenance on a water pump and some associated pipes, or a future time window where the pump is scheduled for inspection. This is in contrast with data points in time series that store single pieces of information about one asset at specific points in time (e.g., temperature measurements).\n\nAn event’s time period is defined by a start time and end time, both millisecond timestamps since the UNIX epoch. The timestamps can be in the future. In addition, events can have a text description as well as arbitrary metadata and properties.\n\nAsset references obtained from an event - through asset ids - may be invalid, simply by the non-transactional nature of HTTP. They are maintained in an eventual consistent manner.\n"
    },
    {
      "name": "Files",
      "description": "A file stores a sequence of bytes connected to one or more assets. For\nexample, a file can contain a piping and instrumentation diagram (P&IDs)\nshowing how multiple assets are connected.\n\nEach file is identified by the 'id' field, which is generated internally \nfor each new file. Each file's 'id' field is unique within a project.\n\nThe 'externalId' field is optional, but can also be used to identify a file. \nThe 'externalId' (if used) must be unique within a project.\n\nFiles are created in two steps; First the metadata is stored in a file\nobject, and then the file contents are uploaded. This means that files can\nexist in a non-uploaded state. The upload state is reflected in the 'uploaded' \nfield in responses.\n\n\nAsset references obtained from a file - through asset ids - may be\ninvalid, simply by the non-transactional nature of HTTP.\nThey are maintained in an eventual consistent manner."
    },
    {
      "name": "3D",
      "description": "We organize 3D data into models and revisions. A model is just a placeholder for a set of revisions. Revisions contains the actual 3D data. For example you can have a model named Compressor and you can upload a revision under that model. When you create a revision you need to attach a 3D file. For every new version of the 3D model you upload a new revision under the placeholder model. You can then easily track the history of a model by browsing the different revisions.\n\nWhen you upload a new revision Cognite need to process the 3D data to optimize it for rendering. This can take some time and we therefore give you a status string back in the revision object. You can then follow the process while you wait.\n\nA 3D model is typically built up by a hierarchical structure. This looks very similar to how we organize our internal asset hierarchy. We support endpoints to extract the 3D node hierarchy and endpoints to make mappings from the 3D nodes to nodes in Cognite's asset hierarchy. We assign a random ID, nodeId, to each node in the 3D hierarchy. This is the ID representing the object in the viewer. When a user click on a object in the viewer it returns the ID for the object that was clicked. You can then use that ID to look up which node in the hierarchy the user clicked on.\n\nWe also deliver a [web based 3D viewer](https://www.npmjs.com/package/@cognite/3d-viewer) to embed the 3D model in your own web page."
    },
    {
      "name": "Time series",
      "description": "A time series consists of a sequence of data points connected to a single asset. \n\nFor example: A water pump asset can have a temperature time series that records a data point in units of °C every second. \n\nA single asset can have several time series. The water pump could have additional time series measuring pressure within the pump, rpm, flow volume, power consumption, and more.\n\nTime series store data points as either number or strings. This is controlled by the is_string flag on the time series object. Numerical data points can be aggregated before they are returned from a query (e.g., to find the average temperature for a day). String data points, on the other hand, cannot be aggregated by CDF, but can store arbitrary information like states (e.g. “open”/”closed”) or more complex information (JSON).\n\nCognite stores discrete data points, but the underlying process measured by the data points can vary continuously. When interpolating between data points, we can either assume that each value stays the same until the next measurement, or that it linearly changes between the two measurements. This is controlled by the is_step flag on the time series object. For example, if we estimate the average over a time containing two data points, the average will either be close to the first (is step) or close to the mean of the two (not is step).\n\nA data point stores a single piece of information, a number or a string, associated with a specific time. Data points are identified by their timestamps, measured in milliseconds since the unix epoch -- 00:00, January 1st, 1970. Milliseconds is the finest time resolution supported by CDF i.e. fractional milliseconds are not supported. Leap seconds are not counted.\n\nNumerical data points can be aggregated before they are retrieved from CDF. This allows for faster queries by reducing the amount of data transferred. You can aggregate data points by specifying one or more aggregates (e.g. average, minimum, maximum) as well as the time granularity over which the aggregates should be applied (e.g. “1h” for one hour).\n\nAggregates are aligned to the start time modulo the granularity unit. For example, if you ask for daily average temperatures since Monday afternoon last week, the first aggregated data point will contain averages for Monday, the second for Tuesday, etc. Determining aggregate alignment without considering data point timestamps allows CDF to pre-calculate aggregates (e.g. to quickly return daily average temperatures for a year). As a consequence, aggregating over 60 minutes can return a different result that aggregating over 1 hour because the two queries will be aligned differently. \n\nAsset references obtained from a time series - through its asset id - may be invalid, simply by the non-transactional nature of HTTP. They are maintained in an eventual consistent manner."
    },
    {
      "name": "Raw",
      "description": "Manage data in the raw NoSQL database. Each project will have a variable number of raw databases, each of which will have a variable number of tables, each of which will have a variable number of key-value objects. Only queries on key are supported through this API."
    },
    {
      "name": "Login",
      "description": "A user that is only manifested in an external IDP needs to authenticate towards that IDP and not Cognite directly. Our login endpoints gives some mechanism for both redirecting to the IDP for a given project as well as getting information about the currently authenticated user. For a service account manifested in CDF, there's no reason to logging in. To validate that the key is valid, you can ask for authentication information about the logged in entity.\n"
    },
    {
      "name": "Logout",
      "description": "Logging out a user means invalidating the token granted by CDF on the behalf of the external IDP. Optionally, you can also get a logout url to log out of the IDP itself (Azure AD, Google etc). Logging out is only effective for tokens (not api keys).\n"
    },
    {
      "name": "Groups",
      "description": "Cognite groups API"
    },
    {
      "name": "Projects",
      "description": "Projects are used to separate customers from one another, and all objects in CDF are linked to a project. The project object contains configuration for how to authenticate users.\n"
    },
    {
      "name": "Service accounts",
      "description": "Manage service accounts for a specific project."
    },
    {
      "name": "API keys",
      "description": "Manage API keys"
    },
    {
      "name": "Security categories",
      "description": "Manage security categories"
    },
    {
      "name": "Sequences",
      "description": "A sequence stores a table with up to 200 columns indexed by row number. Each of  the columns has a pre-defined type which is a string, integer, or floating point number.\n\nFor example, a sequence can represent a curve, either with the dependent variable x as the row number  and a single value column y, or can simply store (x,y) pair in the rows directly. Other potential applications include data logs in which the index is not time-based.\nTo learn more about sequences, see the [concept guide](/dev/concepts/resource_types/sequences.html).\n"
    }
  ]
}
